var ctxfolderCardJob = "/views/admin/CardJob";
var ctxfolderSupplier = "/views/admin/supplier";
var ctxfolderProject = "/views/admin/project";
var ctxfolderMessage = "/views/message-box";
var ctxfolderCommonSetting = "/views/admin/commonSetting";
var app = angular.module('App_ESEIM_CARD_JOB', ['App_ESEIM_DASHBOARD', 'App_ESEIM_PROJECT', 'App_ESEIM_CUSTOMER', 'App_ESEIM_CONTRACT', 'App_ESEIM_PRICE', 'App_ESEIM_CONTRACT_PO', 'App_ESEIM_SUPPLIER', 'App_ESEIM_REPOSITORY', "my.popover", "ui.sortable", "ngCookies", "ngSanitize", "ngJsTree", "treeGrid", "ui.bootstrap", "ngRoute", "ngValidate", "datatables", "datatables.bootstrap", 'datatables.colvis', "ui.bootstrap.contextMenu", 'datatables.colreorder', 'ui.select', "pascalprecht.translate", 'dynamicNumber', 'scrollToEnd', 'ngTagsInput', 'ui.tab.scroll', 'FBAngular', 'angularjs-dropdown-multiselect', 'datatables.fixedheader']);

app.directive('customOnChangeCardjob', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var onChangeHandler = scope.$eval(attrs.customOnChangeCardjob);
            element.on('change', onChangeHandler);
            element.on('$destroy', function () {
                element.off();
            });
        }
    };
});

app.directive('bDatepicker', function ($parse) {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, el, attr) {
            el.datepicker({
                inline: false,
                autoclose: true,
                format: "dd/mm/yyyy",
                fontAwesome: true,
                container: el.parent()
            }).on('changeDate', function () {
                if (el.valid()) {
                    el.removeClass('invalid').addClass('success');
                }
            });
            var noStartDate = false;
            var startDate = new Date();
            if (attr.noStartDate != null && attr.noStartDate != "") {
                scope.$watch($parse(attr.noStartDate), function (newval) {
                    noStartDate = newval;
                    if (newval == true) {
                        el.datepicker('setStartDate', new Date(1960, 01, 01));
                    }
                    else {
                        el.datepicker('setStartDate', startDate);
                    }
                });
            }
            if (attr.startDate != null && attr.startDate != "") {
                scope.$watch($parse(attr.startDate), function (newval) {
                    startDate = newval;
                    if (noStartDate == false) {
                        el.datepicker('setStartDate', startDate);
                    }
                });
            }
            if (attr.endDate != null && attr.endDate != "") {
                scope.$watch($parse(attr.endDate), function (newval) {
                    endDate = newval;
                    if (noStartDate == false) {
                        el.datepicker('setEndDate', endDate);
                    }
                });
            }
        }
    };
});

app.directive('iconPicker', function ($parse) {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, el, attr) {
            el.iconpicker({
                placement: 'bottom', // (has some issues with auto and CSS). auto, top, bottom, left, right
                collision: true, // If true, the popover will be repositioned to another position when collapses with the window borders
                icons: [
                    {
                        title: "fa-solid fa-mountain",
                        searchTerms: ['overview']
                    },
                    {
                        title: "fa-solid fa-house",
                        searchTerms: ['board']
                    },
                    {
                        title: "fa-solid fa-list",
                        searchTerms: ['view']
                    },
                    {
                        title: "fa-regular fa-file",
                        searchTerms: ['spread', 'sheet']
                    },
                    {
                        title: "fa-regular fa-s",
                        searchTerms: ['user', 'story']
                    },
                    {
                        title: "fa-solid fa-truck",
                        searchTerms: ['sprints']
                    },
                    {
                        title: "fa-solid fa-book-open",
                        searchTerms: ['wiki']
                    },
                    {
                        title: "fa-solid fa-earth-europe",
                        searchTerms: ['mind', 'mapping']
                    },
                    {
                        title: "fa-solid fa-comments",
                        searchTerms: ['discussions']
                    },
                    {
                        title: "fa-regular fa-folder-open",
                        searchTerms: ['documents']
                    },
                    {
                        title: "fa-solid fa-rocket",
                        searchTerms: ['rockstar', 'team']
                    },
                    {
                        title: "fa-regular fa-calendar-days",
                        searchTerms: ['calendar']
                    },
                ],
                templates: {
                    search: '<input type="search" class="form-control iconpicker-search" placeholder="Nhập để lọc" />'
                }
            });
            el.on('iconpickerSelected', function (event) {
                $(event.currentTarget).trigger('input');
            });
            if (attr.ngModel != null && attr.ngModel != "") {
                scope.$watch($parse(attr.ngModel), function (newval) {
                    if (newval) {
                        el.data('iconpicker').update(newval, true);
                    }
                });
            }
            //var noStartDate = false;
            //if (attr.icons != null && attr.icons != "") {
            //    scope.$watch($parse(attr.icons), function (newval) {
            //        //noStartDate = newval;
            //        if (newval) {
            //            el.iconpicker({
            //                placement: 'bottom', // (has some issues with auto and CSS). auto, top, bottom, left, right
            //                collision: true, // If true, the popover will be repositioned to another position when collapses with the window borders
            //                icons: newval,
            //            });
            //        }
            //    });
            //}
            //if (attr.templates != null && attr.templates != "") {
            //    scope.$watch($parse(attr.templates), function (newval) {
            //        startDate = newval;
            //        if (newval) {
            //            el.iconpicker({
            //                placement: 'bottom', // (has some issues with auto and CSS). auto, top, bottom, left, right
            //                collision: true, // If true, the popover will be repositioned to another position when collapses with the window borders
            //                templates: newval,
            //            });
            //        }
            //    });
            //}
        }
    };
});

app.filter("fomartDateTime", function ($filter) {
    return function (date) {
        var dateNow = $filter('date')(new Date(), 'dd/MM/yyyy');
        var createDate = $filter('date')(new Date(date), 'dd/MM/yyyy');
        if (dateNow == createDate) {
            var today = new Date();
            var created = new Date(date);
            var diffMs = (today - created);
            var diffHrs = Math.floor((diffMs % 86400000) / 3600000);
            var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
            if (diffHrs <= 0) {
                if (diffMins <= 0) {
                    return caption.CJ_LBL_JUST_FINISH;
                } else {
                    return diffMins + ' ' + caption.CJ_LBL_MINUTE_AGO;
                }
            } else {
                return diffHrs + '  ' + caption.CJ_LBL_HOUR + diffMins + ' ' + caption.CJ_LBL_MINUTE_AGO;
            }
        } else {
            return $filter('date')(new Date(date), 'dd/MM/yyyy lúc h:mma');
        }
    }
});

app.filter('groupBy', function ($parse) {
    return _.memoize(function (items, field) {
        var getter = $parse(field);
        return _.groupBy(items, function (item) {
            return getter(item);
        });
    });
});

app.factory("interceptors", [function () {
    return {
        // if beforeSend is defined call it
        'request': function (request) {
            if (request.beforeSend)
                request.beforeSend();
            //console.log('begin call request');
            window.cardJobLockUpdate = true;
            window.cardJobApiCount++;
            setTimeout(function () {
                if (window.cardJobApiCount > 0) {
                    window.cardJobApiCount--;
                    //console.log(window.cardJobApiCount);
                }
            }, 3000);
            return request;
        },
        // if complete is defined call it
        'response': function (response) {
            if (response.config.complete)
                response.config.complete(response);
            //console.log('finish call request');
            if (window.cardJobApiCount == 0) {
                window.cardJobLockUpdate = false;
            }
            return response;
        }
    };
}]);

app.factory('dataserviceCardJob', function ($http) {
    $http.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    var headers = {
        "Content-Type": "application/json;odata=verbose",
        "Accept": "application/json;odata=verbose"
    };
    var submitFormUpload = function (url, data, callback, callback2) {
        var req = {
            method: 'POST',
            url: url,
            headers: {
                'Content-Type': undefined
            },
            data: data
        }
        $http(req).then(callback).catch(function (error) {
            if (!callback2) {
                App.unblockUI("#modal-body");
                App.toastrError("Không tìm thấy tệp tin trên máy. Vui lòng chọn lại tệp tin");
            }
            else {
                callback2();
            }
        });
    };
    return {
        getListDepartment: function (data, callback) {
            $http.post('/Admin/Department/gettreedata/' + data).then(callback);
        },
        getDepartment: function (callback) {
            $http.post('/Admin/CardJob/GetDepartment/').then(callback);
        },
        getCardWithDepartment: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardWithDepartment', data, {
                beforeSend: function () {
                    App.blockUI({
                        target: "#contentMain",
                        boxed: true,
                        message: 'loading...',
                    });
                },
                complete: function () {
                    App.unblockUI("#contentMain");
                }
            }).then(callback);
        },
        getListUserInDepartment: function (departmentCode, data, callback) {
            $http.get('/Admin/CardJob/GetListUserInDepartment/?departmentCode=' + departmentCode + '&branch=' + data).then(callback);
        },
        advanceSearch: function (data, callback) {
            $http.post('/Admin/CardJob/AdvanceSearch/', data).then(callback);
        },
        advanceSearchTeam: function (data, callback) {
            $http.post('/Admin/CardJob/AdvanceSearchTeam/', data).then(callback);
        },
        advanceSearchGroupUser: function (data, callback) {
            $http.post('/Admin/CardJob/AdvanceSearchGroupUser/', data).then(callback);
        },
        advanceSearchProject: function (data, callback) {
            $http.post('/Admin/CardJob/AdvanceSearchProject/', data).then(callback);
        },
        advanceSearchCustomer: function (data, callback) {
            $http.post('/Admin/CardJob/AdvanceSearchCustomer/', data).then(callback);
        },
        advanceSearchContract: function (data, callback) {
            $http.post('/Admin/CardJob/AdvanceSearchContract/', data).then(callback);
        },

        getListPageProject: function (page, length, name, callback) {
            $http.get('/Admin/CardJob/GetListPageProject?page=' + page + '&length=' + length + '&name=' + name).then(callback);
        },
        getCardWithProject: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardWithProject/', data).then(callback);
        },
        getListProject: function (callback) {
            $http.post('/Admin/ProjectProgress/GetListProject').then(callback);
        },

        //getListPageCustomer: function (page, length, name, callback) {
        //    $http.get('/Admin/CardJob/GetListPageCustomer?page=' + page + '&length=' + length + '&name=' + name).then(callback);
        //},
        getListPageCustomer: function (page, length, name, callback) {
            $http.get('/Admin/CardJob/GetListPageCustomer?page=1' + '&length=1000000' + '&name=' + name).then(callback);
        },
        getCardWithCustomer: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardWithCustomer/', data).then(callback);
        },
        getListCustomer: function (callback) {
            $http.post('/Admin/CustomerProgress/GetListCustomer').then(callback);
        },

        //getListPageContract: function (page, length, name, callback) {
        //    $http.get('/Admin/CardJob/GetListPageContract?page=' + page + '&length=' + length + '&name=' + name).then(callback);
        //},
        getListPageContract: function (page, length, name, callback) {
            $http.get('/Admin/CardJob/GetListPageContract?page=1' + '&length=1000000' + '&name=' + name).then(callback);
        },

        getCardWithContract: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardWithContract/', data).then(callback);
        },
        getContractSale: function (callback) {
            $http.post('/Admin/Project/GetContractSale/').then(callback);
        },

        //getListPageSupplier: function (page, length, name, callback) {
        //    $http.get('/Admin/CardJob/GetListPageSupplier?page=' + page + '&length=' + length + '&name=' + name).then(callback);
        //},
        getListPageSupplier: function (page, length, name, callback) {
            $http.get('/Admin/CardJob/GetListPageSupplier?page=1' + '&length=1000000' + '&name=' + name).then(callback);
        },
        getCardWithSupplier: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardWithSupplier/', data).then(callback);
        },
        advanceSearchSupplier: function (data, callback) {
            $http.post('/Admin/CardJob/AdvanceSearchSupplier/', data).then(callback);
        },
        getListSupplier: function (callback) {
            $http.post('/Admin/SupplierProgress/GetListSupplier').then(callback);
        },

        getBoardsType: function (callback) {
            $http.post('/Admin/CardJob/GetBoardsType/').then(callback);
        },
        getBoardsWithGroupBy: function (callback) {
            $http.post('/Admin/CardJob/GetBoardsWithGroupBy/').then(callback);
        },
        getBoardsWithWorkFlow: function (data, callback) {
            $http.post('/Admin/CardJob/GetBoardsWithWorkFlow?objCode=' + data).then(callback);
        },
        getListBoard: function (callback) {
            $http.post('/Admin/CardJob/GetListBoard/').then(callback);
        },
        checkExistBoardName: function (data, callback) {
            $http.post('/Admin/CardJob/CheckExistBoardName', data).then(callback);
        },
        insertBoard: function (data, callback) {
            $http.post('/Admin/CardJob/InsertBoard/', data, {
                beforeSend: function () {
                    App.blockUI({
                        target: ".modal-content",
                        boxed: true,
                        message: 'loading...'
                    });
                },
                complete: function () {
                    App.unblockUI(".modal-content");
                }
            }).then(callback);
        },
        getBoardDetail: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetBoardDetail/?BoardCode=' + data + '&objCode=' + data1).then(callback);
        },
        deleteBoard: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteBoard/' + data).then(callback)
        },
        updateBoard: function (data, callback) {
            $http.post('/Admin/CardJob/EditBoard/', data).then(callback);
        },

        getLists: function (data, callback) {
            $http.get('/Admin/CardJob/GetLists?BoardCode=' + data).then(callback);
        },
        insertList: function (data, callback) {
            $http.post('/Admin/CardJob/InsertList/', data).then(callback);
        },
        deleteList: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteList/' + data).then(callback);
        },
        updateListName: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateListName/', data).then(callback);
        },
        updateOrder: function (Orther, Entry, callback) {
            $http.post('/Admin/CardJob/UpdateOrder/?Orther=' + Orther + '&Entry=' + Entry).then(callback);
        },
        changeListStatus: function (listID, statusCode, callback) {
            $http.post('/Admin/CardJob/ChangeListStatus/?ListID=' + listID + '&Status=' + statusCode).then(callback);
        },
        changeListBackground: function (data, callback) {
            $http.post('/Admin/CardJob/ChangeListBackground', data).then(callback);
        },
        changeListWeightNum: function (data, callback) {
            $http.post('/Admin/CardJob/ChangeListWeightNum', data).then(callback);
        },
        changeListBeginTime: function (data, callback) {
            $http.post('/Admin/CardJob/ChangeListBeginTime', data).then(callback);
        },
        changeListDeadLine: function (data, callback) {
            $http.post('/Admin/CardJob/changeListDeadLine', data).then(callback);
        },
        checkExistListNameInBoard: function (data, callback) {
            $http.post('/Admin/CardJob/CheckExistListNameInBoard', data).then(callback);
        },

        //getListGroupUserPage: function (page, length, name, callback) {
        //    $http.get('/Admin/CardJob/GetListGroupUserPage?page=' + page + '&length=' + length + '&name=' + name).then(callback);
        //},
        getListGroupUserPage: function (page, length, name, callback) {
            $http.get('/Admin/CardJob/GetListGroupUserPage?page=1' + '&length=1000000' + '&name=' + name).then(callback);
        },

        getCardWithGroupUser: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardWithGroupUser/', data).then(callback);
        },
        getMemberInGroupUser: function (groupUserCode, data, callback) {
            $http.post('/Admin/CardJob/GetMemberInGroupUser/?groupUserCode=' + groupUserCode + '&branch=' + data).then(callback);
        },
        getListGroupUser: function (data, callback) {
            $http.post('/Admin/CardJob/GetListGroupUser?branch=' + data).then(callback);
        },
        getBranch: function (callback) {
            $http.post('/Admin/Project/GetBranch').then(callback);
        },

        getListsAndCard: function (data, callback) {
            $http.post('/Admin/CardJob/GetListsAndCard', data, {
                beforeSend: function () {
                    App.blockUI({
                        target: "#contentMain",
                        boxed: true,
                        message: 'loading...',
                    });
                },
                complete: function () {
                    App.unblockUI("#contentMain");
                }
            }).then(callback);
        },
        getCurrency: function (callback) {
            $http.post('/Admin/CardJob/GetCurrency').then(callback);
        },
        getUnit: function (callback) {
            $http.get('/Admin/CardJob/GetUnit').then(callback);
        },
        getCardsByList: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardsByList/?ListCode=' + data).then(callback);
        },
        getCardDetail: function (data, callback) {
            $http.get('/Admin/CardJob/GetCardDetail?CardCode=' + data).then(callback);
        },
        insertCard: function (data, callback) {
            $http.post('/Admin/CardJob/InsertCard/', data).then(callback);
        },
        deleteCard: function (id, callback) {
            $http.post('/Admin/CardJob/DeleteCard/' + id).then(callback);
        },
        getBoardListSugges: function (callback) {
            $http.post('/Admin/CardJob/GetBoardListSugges').then(callback);
        },
        getLevels: function (callback) {
            $http.post('/Admin/CardJob/GetLevels/').then(callback);
        },
        getCardActivityByUser: function (CardCode, callback) {
            $http.get('/Admin/CardJob/GetCardActivityByUser?CardCode=' + CardCode).then(callback);
        },
        changeWorkType: function (cardCode, type, callback) {
            $http.post('/Admin/CardJob/ChangeWorkType/?CardCode=' + cardCode + '&Type=' + type).then(callback);
        },
        changeCardStatus: function (cardCode, status, callback) {
            $http.post('/Admin/CardJob/ChangeCardStatus/?CardCode=' + cardCode + '&Status=' + status).then(callback);
        },
        changeCardLevel: function (cardCode, level, callback) {
            $http.post('/Admin/CardJob/ChangeCardLevel/?CardCode=' + cardCode + '&Level=' + level).then(callback);
        },
        changeCheckTitle: function (data, callback) {
            $http.post('/Admin/CardJob/ChangeCheckTitle', data).then(callback);
        },
        sortListByStatus: function (boardCode, orther, callback) {
            $http.post('/Admin/CardJob/SortListByStatus/?BoardCode=' + boardCode + '&Orther=' + orther).then(callback);
        },
        getWorkType: function (callback) {
            $http.post('/Admin/CardJob/GetWorkType/').then(callback);
        },
        getStatus: function (callback) {
            $http.post('/Admin/CardJob/GetStatus/').then(callback);
        },
        getCardProgress: function (cardCode, callback) {
            $http.get('/Admin/CardJob/GetCardProgress?CardCode=' + cardCode).then(callback);
        },
        getAddress: function (lat, lon, callback) {
            $http.get('/Admin/CardJob/GetAddress?lat=' + lat + '&lon=' + lon).then(callback);
        },
        updateCardName: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCardName/', data).then(callback);
        },
        updateCardDescription: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCardDescription', data).then(callback);
        },
        updateCardLabel: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCardLabel', data).then(callback);
        },
        changeListCard: function (cardCode, listCode, callback) {
            $http.post('/Admin/CardJob/ChangeListCard/?CardCode=' + cardCode + "&ListCode=" + listCode).then(callback);
        },
        updateWeightNum: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateWeightNum', data).then(callback);
        },
        updateCost: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCost', data).then(callback);
        },
        updateCurrency: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCurrency', data).then(callback);
        },
        updateActivity: function (cardCode, value, isCheck, callback) {
            $http.get('/Admin/CardJob/UpdateActivity/?CardCode=' + cardCode + '&Value=' + value + '&IsCheck=' + isCheck).then(callback);
        },
        updateAddress: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateAddress/', data).then(callback);
        },
        updateProgress: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateProgress', data).then(callback);
        },
        updateBeginTime: function (cardCode, beginTime, callback) {
            $http.post('/Admin/CardJob/UpdateBeginTime/?CardCode=' + cardCode + '&BeginTime=' + beginTime).then(callback);
        },
        updateEndTime: function (cardCode, endTime, callback) {
            $http.post('/Admin/CardJob/UpdateEndTime/?CardCode=' + cardCode + '&EndTime=' + endTime).then(callback);
        },
        updateDeadLine: function (cardCode, deadLine, callback) {
            $http.post('/Admin/CardJob/UpdateDeadLine/?CardCode=' + cardCode + '&DeadLine=' + deadLine).then(callback);
        },
        updateQuantitative: function (cardCode, quantitative, callback) {
            $http.post('/Admin/CardJob/UpdateQuantitative/?CardCode=' + cardCode + '&Quantitative=' + quantitative).then(callback);
        },
        updateUnit: function (cardCode, unit, callback) {
            $http.post('/Admin/CardJob/UpdateUnit/?CardCode=' + cardCode + '&Unit=' + unit).then(callback);
        },
        scopeCardProject: function (callback) {
            $http.post('/Admin/CardJob/ScopeCardProject').then(callback);
        },

        //getListPageUser: function (page, length, name, callback) {
        //    $http.get('/Admin/CardJob/GetListPageUser?page=' + page + '&length=' + length + '&name=' + name).then(callback);
        //},
        getListPageUser: function (page, length, name, callback) {
            $http.get('/Admin/CardJob/GetListPageUser?page=1' + '&length=1000000' + '&name=' + name).then(callback);
        },
        getCardWithUser: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardWithUser/', data).then(callback);
        },

        assignGroupOrTeam: function (data, callback) {
            $http.post('/Admin/CardJob/AssignGroupOrTeam/', data).then(callback);
        },
        getActivityAssign: function (data, callback) {
            $http.get('/Admin/CardJob/GetActivityAssign?cardCode=' + data).then(callback);
        },
        getMemberAssign: function (CardCode, callback) {
            $http.post('/Admin/CardJob/GetMemberAssign/?CardCode=' + CardCode).then(callback);
        },
        getListRoleAssign: function (callback) {
            $http.post('/Admin/CardJob/GetListRoleAssign').then(callback);
        },
        checkLeader: function (data, data1, data2, callback) {
            $http.post('/Admin/CardJob/CheckLeader?userId=' + data + '&branch=' + data1 + '&department=' + data2).then(callback);
        },
        getLeaderInDepartment: function (data, callback) {
            $http.post('/Admin/CardJob/GetLeaderInDepartment?code=' + data).then(callback);
        },
        roleInCardOfUser: function (data, callback) {
            $http.post('/Admin/CardJob/RoleInCardOfUser?cardCode=' + data).then(callback);
        },

        addCheckList: function (data, callback) {
            $http.post('/Admin/CardJob/AddCheckList', data).then(callback);
        },
        deleteCheckList: function (checkCode, callback) {
            $http.post('/Admin/CardJob/DeleteCheckList/?CheckCode=' + checkCode).then(callback);
        },
        getMaxWeightNumCheckList: function (data, callback) {
            $http.post('/Admin/CardJob/GetMaxWeightNumCheckList/?CardCode=' + data).then(callback);
        },
        getCheckList: function (cardCode, callback) {
            $http.post('/Admin/CardJob/GetCheckLists/?CardCode=' + cardCode).then(callback);
        },
        updateCheckList: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCheckList/', data).then(callback);
        },

        addCheckItem: function (data, callback) {
            $http.post('/Admin/CardJob/AddCheckItem', data).then(callback);
        },
        getCheckItem: function (checkCode, callback) {
            $http.post('/Admin/CardJob/GetCheckItem/?CheckCode=' + checkCode).then(callback);
        },
        changeChkItemStatus: function (itemId, callback) {
            $http.post('/Admin/CardJob/ChangeItemStatus/?Id=' + itemId).then(callback);
        },
        changeChkItemTitle: function (data, callback) {
            $http.post('/Admin/CardJob/ChangeItemTitle', data).then(callback);
        },
        deleteCheckItem: function (itemid, callback) {
            $http.post('/Admin/CardJob/DeleteCheckItem/?Id=' + itemid).then(callback);
        },

        addComment: function (data, callback) {
            $http.post('/Admin/CardJob/AddComment', data).then(callback);
        },
        getComment: function (cardCode, callback) {
            $http.post('/Admin/CardJob/GetComments/?CardCode=' + cardCode).then(callback);
        },
        deleteComment: function (cmtId, callback) {
            $http.post('/Admin/CardJob/DeleteComment/?id=' + cmtId).then(callback);
        },
        updateComment: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateComment', data).then(callback);
        },

        addAttachment: function (data, callback) {
            $http.post('/Admin/CardJob/AddAttachment/', data).then(callback);
        },
        uploadAttachment: function (data, callback) {
            submitFormUpload('/Admin/CardJob/UploadFile/', data, callback);
        },
        getAttachment: function (cardCode, callback) {
            $http.post('/Admin/CardJob/GetAttachment/?CardCode=' + cardCode).then(callback);
        },
        deleteAttachment: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteAttachment/', data).then(callback);
        },
        getFilePath: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetFilePath?filePath=' + data + "&cardCode=" + data1).then(callback);
        },
        getListUserFile: function (data, callback) {
            $http.post('/Admin/CardJob/GetListUserFile?Id=' + data).then(callback);
        },
        updateListPermissionViewFile: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateListPermissionViewFile?Id=' + data + '&ListPermissionViewFile=' + data1).then(callback);
        },
        checkFileItem: function (data, callback) {
            $http.post('/Admin/CardJob/CheckFileItem?itemCode=' + data).then(callback);
        },
        checkPermissionFileNoShare: function (data, callback) {
            $http.post('/Admin/CardJob/CheckPermisionFileNoShare?fileCode=' + data).then(callback);
        },

        //Object
        getObjDependency: function (callback) {
            $http.post('/Admin/CardJob/GetObjDependency').then(callback);
        },
        getObjTypeJC: function (callback) {
            $http.post('/Admin/CardJob/GetObjTypeJC').then(callback);
        },
        getListUser: function (callback) {
            $http.post('/Admin/CardJob/GetListUser').then(callback);
        },
        getObjCode: function (objDepen, callback) {
            $http.post('/Admin/CardJob/GetObjCode/?Dependency=' + objDepen).then(callback);
        },
        getObjTypeCode: function (data, callback) {
            $http.post('/Admin/CardJob/GetObjFromObjType?code=' + data).then(callback);
        },
        insertJcObjectIdRelative: function (data, callback) {
            $http.post('/Admin/CardJob/InsertJcObjectIdRelative', data).then(callback);
        },
        insertCardDependency: function (data, callback) {
            $http.post('/Admin/CardJob/InsertCardDependency/', data).then(callback);
        },
        getObjectRelative: function (CardCode, callback) {
            $http.post('/Admin/CardJob/GetObjectRelative/?CardCode=' + CardCode).then(callback);
        },
        deleteJcObjectIdRelative: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteJcObjectIdRelative/?ids=' + data).then(callback);
        },
        getItemChk: function (data, callback) {
            $http.post('/Admin/CardJob/GetItemChk/?cardCode=' + data).then(callback);
        },

        deleteCardDependency: function (dependencyId, callback) {
            $http.post('/Admin/CardJob/DeleteCardDependency/?Id=' + dependencyId).then(callback);
        },
        getRelative: function (callback) {
            $http.post('/Admin/CardJob/GetRelative/').then(callback);
        },

        getProduct: function (callback) {
            $http.post('/Admin/CardJob/GetProduct/').then(callback);
        },
        getCardProduct: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardProduct?CardCode=' + data).then(callback);
        },
        insertProduct: function (data, callback) {
            $http.post('/Admin/CardJob/InsertProduct/', data).then(callback);
        },
        deleteProduct: function (data, callback) {
            $http.get('/Admin/CardJob/DeleteProduct?id=' + data).then(callback);
        },
        getActivityProduct: function (callback) {
            $http.post('/Admin/CardJob/GetActivityProduct').then(callback);
        },

        getService: function (callback) {
            $http.post('/Admin/CardJob/GetService/').then(callback);
        },
        getCardService: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardService?CardCode=' + data).then(callback);
        },
        insertService: function (data, callback) {
            $http.post('/Admin/CardJob/InsertService/', data).then(callback);
        },
        deleteService: function (data, callback) {
            $http.get('/Admin/CardJob/DeleteService?id=' + data).then(callback);
        },
        getActivityService: function (callback) {
            $http.post('/Admin/CardJob/GetActivityService').then(callback);
        },

        GetLisAddressJobCard: function (data, callback) {
            $http.post('/Admin/CardJob/GetLisAddressJobCard?CardCode=' + data).then(callback);
        },
        deleteAddress: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteAddressJobCard?Id=' + data).then(callback);
        },
        InsertAddressJobCard: function (data, callback) {
            $http.post('/Admin/CardJob/InsertAddressJobCard/', data).then(callback);
        },

        //Notification
        sendNotification: function (data, callback) {
            $http.post('/Admin/CardJob/SendNotification', data).then(callback);
        },
        updateListUserView: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateListUserView?cardCode=' + data).then(callback);
        },
        insertListUserView: function (data, callback) {
            $http.post('/Admin/CardJob/InsertListUserView?cardCode=' + data).then(callback);
        },
        //Item work
        getCardItemCheck: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardItemCheck?cardCode=' + data).then(callback);
        },
        autoGenerateWorkSession: function (callback) {
            $http.post('/Admin/CardJob/AutoGenerateWorkSession').then(callback);
        },
        insertWorkItem: function (data, callback) {
            $http.post('/Admin/CardJob/InsertWorkItem', data).then(callback);
        },
        deleteWorkItemActivity: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteWorkItemActivity?id=' + data).then(callback);
        },
        getListWorkItem: function (data, callback) {
            $http.post('/Admin/CardJob/GetListWorkItem?CardCode=' + data).then(callback);
        },
        getItemWork: function (data, callback) {
            $http.post('/Admin/CardJob/GetItemWork?id=' + data).then(callback);
        },
        updateItemWork: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateItemWork', data).then(callback);
        },
        getItemApprove: function (data, callback) {
            $http.post('/Admin/CardJob/GetItemApprove?itemCode=' + data).then(callback);
        },
        approve: function (data, callback) {
            $http.post('/Admin/CardJob/Approve', data).then(callback);
        },
        approveAll: function (data, callback) {
            $http.post('/Admin/CardJob/ApproveAll?itemCode=' + data).then(callback);
        },
        deleteItemWork: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteItemWork?id=' + data).then(callback);
        },
        getContentCms: function (data, callback) {
            $http.get('/Admin/CardJob/GetContentCms?cardCode=' + data).then(callback);
        },


        getMemberInCardJob: function (data, callback) {
            $http.post('/Admin/CardJob/GetMemberInCardJob?cardCode=' + data).then(callback);
        },
        insertJobCardUser: function (data, callback) {
            $http.post('/Admin/CardJob/InsertJobCardUser', data).then(callback);
        },
        getJobCardUser: function (data, callback) {
            $http.post("/Admin/CardJob/GetJobCardUser/", data).then(callback);
        },
        deleteJobCardUser: function (data, callback) {
            $http.post("/Admin/CardJob/DeleteJobCardUser?id=" + data).then(callback);
        },
        insertUserToSubItem: function (data, callback) {
            $http.post("/Admin/CardJob/InsertUserToSubItem", data).then(callback);
        },
        getJobCardSubItemUser: function (data, callback) {
            $http.post("/Admin/CardJob/GetJobCardSubItemUser", data).then(callback);
        },
        checkRoleInCard: function (data, callback) {
            $http.post("/Admin/CardJob/CheckRoleInCard?cardCode=" + data).then(callback);
        },
        checkCardSuccess: function (data, callback) {
            $http.post("/Admin/CardJob/CheckCardSuccess?cardCode=" + data).then(callback);
        },
        getSuggesstion: function (data, callback) {
            $http.post("/Admin/CardJob/GetSuggesstion/", data).then(callback);
        },
        checkListAll: function (callback) {
            $http.post("/Admin/CardJob/CheckListAll").then(callback);
        },
        getLastestProject: function (callback) {
            $http.get("/Admin/CardJob/GetLastestProject").then(callback);
        },
        getInherit: function (data, callback) {
            $http.post("/Admin/CardJob/GetInherit?cardCode=" + data).then(callback);
        },
        updateInherit: function (data, data1, callback) {
            $http.post("/Admin/CardJob/UpdateInherit?cardCode=" + data + "&inherit=" + data1).then(callback);
        },
        copyCard: function (data, callback) {
            $http.post("/Admin/CardJob/CopyCard?cardCode=" + data).then(callback);
        },
        getAllShiftOfUser: function (userName, callback) {
            $http.post("/Admin/StaffTimeKeeping/GetAllShiftOfUser?userName=" + userName).then(callback);
        },
        getLastShiftLog: function (callback) {
            $http.post("/Admin/StaffTimeKeeping/GetLastShiftLog").then(callback);
        },
        checkIn: function (data, callback) {
            $http.post("/Admin/StaffTimeKeeping/CheckIn", data).then(callback);
        },
        checkOut: function (data, callback) {
            $http.post("/Admin/StaffTimeKeeping/CheckOut", data).then(callback);
        },
        getLastInOut: function (callback) {
            $http.post("/Admin/StaffTimeKeeping/GetLastInOut").then(callback);
        },

        uploadImageInOut: function (data, callback) {
            submitFormUpload('/Admin/StaffTimeKeeping/UploadImage/', data, callback);
        },
        checkInOutManual: function (data, callback) {
            $http.post("/Admin/StaffTimeKeeping/CheckInOutManual", data).then(callback);
        },
        getCheckInOutManual: function (data, callback) {
            $http.post("/Admin/StaffTimeKeeping/GetCheckInOutManual?shiftCode=" + data).then(callback);
        },
        updateCheckInOutManual: function (data, callback) {
            $http.post("/Admin/StaffTimeKeeping/UpdateCheckInOutManual", data).then(callback);
        },
        getUnitAssignStaff: function (callback) {
            $http.post("/Admin/CardJob/GetUnitAssignStaff").then(callback);
        },
        updateWorkItem: function (data, callback) {
            $http.post("/Admin/CardJob/UpdateWorkItem", data).then(callback);
        },
        updateAutoShiftCodeWorkItem: function (data, data1, callback) {
            $http.post("/Admin/CardJob/UpdateAutoShiftCodeWorkItem?shiftCodeNew=" + data + "&shiftCode=" + data1).then(callback);
        },
        //
        getAllCardJob: function (callback) {
            $http.post("/Admin/CardJob/GetAllCardJob").then(callback);
        },
        getListLinkCardJob: function (data, callback) {
            $http.post("/Admin/CardJob/GetListLinkCardJob/", data).then(callback);
        },
        deleteCardLink: function (data, callback) {
            $http.post("/Admin/CardJob/DeleteCardLink?Id=" + data).then(callback);
        },
        insertLinkCardJob: function (data, callback) {
            $http.post("/Admin/CardJob/InsertLinkCardJob/", data).then(callback);
        },
        userCreatedCard: function (data, callback) {
            $http.get("/Admin/CardJob/UserCreatedCard?cardCode=" + data).then(callback);
        },
        // COMMOMT
        getDataTypeCommon: function (callback) {
            $http.get('/Admin/CommonSetting/GetDataType').then(callback);
        },
        insertCommonSetting: function (data, callback) {
            $http.post('/Admin/CommonSetting/Insert/', data).then(callback);
        },
        updateCommonSetting: function (data, callback) {
            $http.post('/Admin/CommonSetting/Update/', data).then(callback);
        },
        deleteCommonSetting: function (data, callback) {
            $http.post('/Admin/CommonSetting/Delete', data).then(callback);
        },
        checkWeightNumber: function (data, callback) {
            $http.post('/Admin/CardJob/CheckWeightNumber/', data).then(callback);
        },
        searchProgress: function (data, callback) {
            $http.post('/Admin/CardJob/SearchProgress?boardCode=' + data).then(callback);
        },
        getCardRelative: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardRelative?cardCode=' + data).then(callback);
        },

        //add service
        getServiceCategoryParent: function (callback) {
            $http.post('/Admin/ServiceCategory/GetServiceCategoryParent').then(callback);
        },
        getServiceUnit: function (callback) {
            $http.post('/Admin/ServiceCategory/GetServiceUnit').then(callback);
        },
        getServiceCategoryGroup: function (callback) {
            $http.post('/Admin/ServiceCategory/GetServiceCategoryGroup').then(callback);
        },
        getServiceCategoryType: function (callback) {
            $http.post('/Admin/ServiceCategory/GetServiceCategoryType').then(callback);
        },
        insert: function (data, callback) {
            $http.post('/Admin/ServiceCategory/Insert', data, callback).then(callback);
        },
        update: function (data, callback) {
            $http.post('/Admin/ServiceCategory/Update', data).then(callback);
        },
        insertAttributeMore: function (data, callback) {
            $http.post('/Admin/ServiceCategory/InsertAttributeMore', data).then(callback);
        },
        updateAttributeMore: function (data, callback) {
            $http.post('/Admin/ServiceCategory/UpdateAttributeMore', data).then(callback);
        },
        deleteAttributeMore: function (data, callback) {
            $http.post('/Admin/ServiceCategory/DeleteAttributeMore/' + data).then(callback);
        },
        getDetailAttributeMore: function (data, callback) {
            $http.post('/Admin/ServiceCategory/GetDetailAttributeMore?Id=' + data).then(callback);
        },
        getItem: function (data, callback) {
            $http.get('/Admin/ServiceCategory/GetItem/' + data).then(callback);
        },

        //add Order RQ
        getAutocomplete: function (data, callback) {
            $http.get('/Admin/GalaxyKeyword/GetAutocomplete?key=' + data).then(callback);
        },
        uploadFile: function (data, callback) {
            submitFormUpload('/Admin/OrderRequestRaw/UploadFile/', data, callback);
        },
        insertOrderRQ: function (data, callback) {
            $http.post('/Admin/OrderRequestRaw/Insert/', data, {
                beforeSend: function () {
                    App.blockUI({
                        target: "#modal-body",
                        boxed: true,
                        message: 'loading...'
                    });
                },
                complete: function () {
                    App.unblockUI("#modal-body");
                }
            }).then(callback);
        },
        getItemOrderRQ: function (data, callback) {
            $http.post('/Admin/OrderRequestRaw/GetItem/', data, {
                beforeSend: function () {
                    App.blockUI({
                        target: "#contentMain",
                        boxed: true,
                        message: 'loading...'
                    });
                },
                complete: function () {
                    App.unblockUI("#contentMain");
                }
            }).then(callback);
        },
        updateOrderRQ: function (data, callback) {
            $http.post('/Admin/OrderRequestRaw/Update/', data, {
                beforeSend: function () {
                    App.blockUI({
                        target: "#modal-body",
                        boxed: true,
                        message: 'loading...'
                    });
                },
                complete: function () {
                    App.unblockUI("#modal-body");
                }
            }).then(callback);
        },
        //add Material product
        gettreedataLevel: function (callback) {
            $http.post('/Admin/materialProduct/GetProductUnit/').then(callback);
        },
        getProductImpType: function (callback) {
            $http.post('/Admin/materialProduct/GetProductImpType/').then(callback);
        },
        getproductgroup: function (callback) {
            $http.post('/Admin/materialProduct/GetProductGroup/').then(callback);
        },
        getInheritances: function (data, callback) {
            $http.post('/Admin/materialProduct/GetInheritances?productCode=' + data).then(callback);
        },
        getProductTypes: function (callback) {
            $http.post('/Admin/materialProduct/GetProductTypes/').then(callback);
        },
        getInheritancesDetail: function (data, callback) {
            $http.post('/Admin/materialProduct/GetInheritancesDetail?productCode=' + data).then(callback);
        },
        uploadImageMaterial: function (data, callback) {
            submitFormUpload('/Admin/materialProduct/UploadImage/', data, callback);
        },
        insertMaterial: function (data, callback) {
            $http.post('/Admin/materialProduct/Insert', data, callback).then(callback);
        },
        updateMaterial: function (data, callback) {
            $http.post('/Admin/materialProduct/Update', data).then(callback);
        },
        getListStatus: function (callback) {
            $http.post('/Admin/materialProduct/GetProductStatus/').then(callback);
        },
        getQrCodeFromString: function (data, callback) {
            $http.post('/Admin/lotProduct/GetQrCodeFromString?content=' + data).then(callback);
        },
        getBarCodeFromString: function (data, callback) {
            $http.post('/Admin/lotProduct/GetBarCodeFromString?content=' + data).then(callback);
        },
        deleteExtend: function (id, callback) {
            $http.post('/Admin/materialProduct/DeleteAttribute?Id=' + id).then(callback);
        },
        uploadCatalogue: function (data, callback) {
            submitFormUpload('/Admin/materialProduct/UploadCatalogue', data, callback);
        },
        insertProductAttribute: function (data, callback) {
            $http.post('/Admin/materialProduct/InsertProductAttribute', data).then(callback);
        },
        getAttributeItem: function (id, callback) {
            $http.post('/Admin/materialProduct/GetAttributeItem?id=' + id).then(callback);
        },
        updateAttribute: function (data, callback) {
            $http.post('/Admin/materialProduct/UpdateAttribute', data).then(callback);
        },
        insertProductFile: function (data, callback) {
            submitFormUpload('/Admin/MaterialProduct/InsertProductFile/', data, callback);
        },
        getProductFile: function (data, callback) {
            $http.post('/Admin/MaterialProduct/GetProductFile/' + data).then(callback);
        },
        deleteProductFile: function (data, callback) {
            $http.post('/Admin/MaterialProduct/DeleteProductFile/' + data).then(callback);
        },
        getTreeCategory: function (callback) {
            $http.post('/Admin/EDMSRepository/GetTreeCategory').then(callback);
        },
        updateProductFile: function (data, callback) {
            submitFormUpload('/Admin/MaterialProduct/UpdateProductFile/', data, callback);
        },
        gettreedataCoursetype: function (callback) {
            $http.post('/Admin/MaterialProductGroup/gettreedataCoursetype/').then(callback);
        },
        insertProductGroup: function (data, callback) {
            $http.post('/Admin/MaterialProductGroup/Insert', data, callback).then(callback);
        },
        getItemMaterial: function (data, callback) {
            $http.post('/Admin/materialProduct/GetItem?Id=' + data).then(callback);
        },

        //Add supplier
        getSupplierArea: function (callback) {
            $http.post('/Admin/Supplier/getListSupplierArea').then(callback);
        },
        getSupplierType: function (callback) {
            $http.post('/Admin/Supplier/getListSupplierType').then(callback);
        },
        getSupplierRole: function (callback) {
            $http.post('/Admin/Supplier/getListSupplierRole').then(callback);
        },
        getAddress: function (lat, lon, callback) {
            $http.get('/Admin/CardJob/GetAddress?lat=' + lat + '&lon=' + lon).then(callback);
        },
        getCurrency: function (callback) {
            $http.post('/Admin/CardJob/GetCurrency').then(callback);
        },
        uploadImage: function (data, callback) {
            submitFormUpload('/Admin/Supplier/UploadImage/', data, callback);
        },
        getSupplierGroup: function (callback) {
            $http.post('/Admin/Supplier/GetSupplierGroup/').then(callback);
        },
        getSupplierStatus: function (callback) {
            $http.post('/Admin/Supplier/GetSupplierStatus/').then(callback);
        },
        insertSupplier: function (data, callback) {
            $http.post('/Admin/Supplier/Insert/', data).then(callback);
        },
        updateSupplier: function (data, callback) {
            $http.post('/Admin/Supplier/Update/', data).then(callback);
        },
        deleteSupplier: function (data, callback) {
            $http.post('/Admin/Supplier/Delete/' + data).then(callback);
        },
        getItemSupplier: function (data, callback) {
            $http.get('/Admin/Supplier/GetItem/' + data).then(callback);
        },
        getItemAdd: function (data, callback) {
            $http.get('/Admin/Supplier/GetItemAdd?code=' + data).then(callback);
        },
        getListSupplierArea: function (callback) {
            $http.get('/Admin/Supplier/GetListSupplierArea').then(callback);
        },
        getInfoWithTaxCode: function (data, callback) {
            $http.get('/Admin/Customer/GetInfoWithTaxCode?taxCode=' + data).then(callback);
        },
        getSupplierFile: function (data, callback) {
            $http.post('/Admin/Supplier/GetSupplierFile/' + data).then(callback);
        },
        insertSupplierFile: function (data, callback) {
            submitFormUpload('/Admin/Supplier/InsertSupplierFile/', data, callback);
        },
        updateSupplierFile: function (data, callback) {
            submitFormUpload('/Admin/Supplier/UpdateSupplierFile/', data, callback);
        },
        deleteSupplierFile: function (data, callback) {
            $http.post('/Admin/Supplier/DeleteSupplierFile/' + data).then(callback);
        },
        getSuggestionsSupplierFile: function (data, callback) {
            $http.get('/Admin/Supplier/GetSuggestionsSupplierFile?supplierCode=' + data).then(callback);
        },
        getListObjectTypeShare: function (callback) {
            $http.get('/Admin/FileObjectShare/GetListObjectTypeShare/').then(callback);
        },
        getListObjectCode: function (objectCode, objectType, callback) {
            $http.get('/Admin/FileObjectShare/GetListObjectCode?objectCode=' + objectCode + '&objectType=' + objectType).then(callback);
        },
        getListFileWithObject: function (objectCode, objectType, callback) {
            $http.get('/Admin/FileObjectShare/GetListFileWithObject?objectCode=' + objectCode + '&objectType=' + objectType).then(callback);
        },
        getListObjectShare: function (objectCodeShared, objectTypeShared, objectCode, objectType, fileCode, callback) {
            $http.get('/Admin/FileObjectShare/GetListObjectShare?objectCodeShared=' + objectCodeShared + '&objectTypeShared=' + objectTypeShared + '&objectCode=' + objectCode + '&objectType=' + objectType + '&fileCode=' + fileCode).then(callback);
        },
        deleteObjectShare: function (data, callback) {
            $http.get('/Admin/FileObjectShare/DeleteObjectShare?id=' + data).then(callback);
        },
        insertContact: function (data, callback) {
            $http.post('/Admin/Supplier/InsertContact/', data).then(callback);
        },
        deleteContact: function (data, callback) {
            $http.post('/Admin/Supplier/DeleteContact/' + data).then(callback);
        },
        updateContact: function (data, callback) {
            $http.post('/Admin/Supplier/UpdateContact/', data).then(callback);
        },
        getContact: function (data, callback) {
            $http.get('/Admin/Supplier/GetContact/' + data).then(callback);
        },
        insertExtend: function (data, callback) {
            $http.post('/Admin/Supplier/InsertExtend/', data).then(callback);
        },
        deleteExtendSupplier: function (data, callback) {
            $http.post('/Admin/Supplier/DeleteExtend/' + data).then(callback);
        },
        updateExtend: function (data, callback) {
            $http.post('/Admin/Supplier/UpdateExtend/', data).then(callback);
        },
        getExtend: function (data, callback) {
            $http.get('/Admin/Supplier/GetExtend/' + data).then(callback);
        },
        getDataType: function (callback) {
            $http.get('/Admin/CommonSetting/GetDataType').then(callback);
        },
        insertCommonSetting: function (data, callback) {
            $http.post('/Admin/CommonSetting/Insert/', data).then(callback);
        },
        updateCommonSetting: function (data, callback) {
            $http.post('/Admin/CommonSetting/Update/', data).then(callback);
        },
        deleteCommonSetting: function (data, callback) {
            $http.post('/Admin/CommonSetting/Delete', data).then(callback);
        },
        updateSupplier: function (data, callback) {
            $http.post('/Admin/Supplier/Update/', data).then(callback);
        },

        //Buffer card
        updateCardByBufferData: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCardByBufferData', data).then(callback);
        },
        rollbackDataBuffer: function (data, callback) {
            $http.post('/Admin/CardJob/RollbackDataBuffer', data).then(callback);
        },
        logActivityUser: function (data, callback) {
            $http.get('/Admin/CardJob/LogActivityUser?cardCode=' + data).then(callback);
        },
        delCardNoTitle: function (data, callback) {
            $http.post('/Admin/CardJob/DelCardNoTitle?cardCode=' + data).then(callback);
        },

        //Schedule card
        scheduleCard: function (data, data1, callback) {
            $http.post('/Admin/CardJob/ScheduleCard?month=' + data + "&year=" + data1).then(callback);
        },

        //Add constraint
        getItemConstraint: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetItemConstraint?itemCode=' + data + "&cardCode=" + data1).then(callback);
        },
        addConstraint: function (data, data1, callback) {
            $http.post('/Admin/CardJob/AddConstraint?itemCode=' + data + "&constraint=" + data1).then(callback);
        },
        getAllConstraint: function (data, callback) {
            $http.post('/Admin/CardJob/GetAllConstraint?itemCode=' + data).then(callback);
        },
        deleteConstraint: function (data, data1, callback) {
            $http.post('/Admin/CardJob/DeleteConstraint?itemCode=' + data + "&constraint=" + data1).then(callback);
        },
        checkConstraintSuccess: function (data, callback) {
            $http.post('/Admin/CardJob/CheckConstraintSuccess?itemCode=' + data).then(callback);
        },
        getListItemActivity: function (data, callback) {
            $http.post('/Admin/CardJob/GetListItemActivity?itemCode=' + data).then(callback);
        },
        checkItemSuccess: function (data, data1, callback) {
            //$http.post('/Admin/CardJob/CheckItemSuccess?itemCode=' + data + '&cardCode=' + data1).then(callback);
        },

        //Count card
        getCountCard: function (data, callback) {
            $http.post('/Admin/CardJob/GetCountCard/', data).then(callback);
        },

        //Hide cost, currency
        hideCost: function (callback) {
            $http.get('/Admin/CardJob/HideCost/').then(callback);
        },

        //View detail employy
        detailOfEmploy: function (data, callback) {
            $http.post('/Admin/CardJob/DetailOfEmploy?user=' + data).then(callback);
        },

        //Workflow
        getWorkFlow: function (callback) {
            $http.post('/Admin/CardJob/GetWorkflow').then(callback);
        },
        createFlow: function (data, data1, callback) {
            $http.post('/Admin/CardJob/CreateFlow?wfCode=' + data + '&cardCode=' + data1).then(callback);
        },
        createInstanceWF: function (data, data1, callback) {
            $http.post('/Admin/CardJob/CreateInstanceWF?wfCode=' + data + '&cardCode=' + data1).then(callback);
        },
        checkWfInstCard: function (data, callback) {
            $http.post('/Admin/CardJob/CheckWfInstCard?cardCode=' + data).then(callback);
        },
        getActInst: function (data, callback) {
            $http.post('/Admin/CardJob/GetActInst?wfInstCode=' + data).then(callback);
        },
        insertDataLogger: function (data, callback) {
            $http.post('/Admin/CardJob/InsertDataLogger', data).then(callback);
        },
        deleteDataLogger: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteDataLogger?sessionId=' + data).then(callback);
        },
        getUnitAttr: function (callback) {
            $http.post('/Admin/CardJob/GetUnitAttr').then(callback);
        },
        getAttrDataType: function (callback) {
            $http.post('/Admin/CardJob/GetAttrDataType').then(callback);
        },
        getAttrGroup: function (data, callback) {
            $http.post('/Admin/CardJob/GetAttrGroup?cardCode=' + data).then(callback);
        },
        getAttrByGroup: function (data, callback) {
            $http.post('/Admin/CardJob/GetAttrByGroup?attrGroup=' + data).then(callback);
        },
        getDataLoggerCard: function (data, callback) {
            $http.post('/Admin/CardJob/GetDataLoggerCard?cardCode=' + data).then(callback);
        },
        getActInstFromWf: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetActInstFromWf?wfCode=' + data + '&cardCode=' + data1).then(callback);
        },
        getCheckListInCard: function (data, callback) {
            $http.post('/Admin/CardJob/GetCheckListInCard?cardCode=' + data).then(callback);
        },
        changeActIns: function (data, data1, callback) {
            $http.post('/Admin/CardJob/ChangeActIns?actInsCode=' + data + '&cardCode=' + data1).then(callback);
        },
        changeObjEntry: function (data, data1, data2, callback) {
            $http.post('/Admin/CardJob/changeObjEntry?actInsCode=' + data + '&cardCode=' + data1 + '&isEntry=' + data2).then(callback);
        },
        insertInstRunning: function (data, data1, callback) {
            $http.post('/Admin/WorkflowActivity/InsertInstRunning?wfInstCode=' + data + '&wfCode=' + data1).then(callback);
        },

        //File edms
        getTreeRepository: function (callback) {
            $http.post('/Admin/EDMSRepository/GetTreeRepository').then(callback);
        },
        getItemRepository: function (data, callback) {
            $http.get('/Admin/EDMSRepository/GetItemRepository?reposCode=' + data, {
                beforeSend: function () {
                    App.blockUI({
                        target: "#contentMain",
                        boxed: true,
                        message: 'loading...'
                    });
                },
                complete: function () {
                    App.unblockUI("#contentMain");
                }
            }).then(callback);
        },
        insertRepository: function (data, callback) {
            $http.post('/Admin/EDMSRepository/InsertRepository', data).then(callback);
        },
        updateRepository: function (data, callback) {
            $http.post('/Admin/EDMSRepository/UpdateRepository', data).then(callback);
        },
        deleteRepository: function (data, callback) {
            $http.post('/Admin/EDMSRepository/DeleteRepository?respos=' + data).then(callback);
        },

        getFileEDMS: function (data, data1, data2, data3, callback) {
            $http.post('/Admin/CardJob/GetFileEDMS?url=' + data + '&size=' + data1 + '&timeModify=' + data2 + '&cardCode=' + data3).then(callback);
        },
        getItemFile: function (data1, data2, data3, callback) {
            $http.get('/Admin/CardJob/GetItemFile?IsEdit=' + data1 + '&mode=' + data2 + '&idAttachment=' + data3).then(callback);
        },
        //InsertCardAuto
        insertCardAuto: function (callback) {
            $http.post('/Admin/CardJob/InsertCardAuto').then(callback);
        },
        //Role assign
        checkShowLabelAssign: function (data, callback) {
            $http.get('/Admin/CardJob/CheckShowLabelAssign?cardCode=' + data).then(callback);
        },
        getDepartmentInBranch: function (data, callback) {
            $http.post('/Admin/CardJob/GetDepartmentInBranch?branch=' + data).then(callback);
        },
        getListUserOfBranch: function (data, callback) {
            $http.post('/Admin/CardJob/GetListUserOfBranch?branch=' + data).then(callback);
        },
        getGroupDepartmentAssign: function (data, callback) {
            $http.post('/Admin/CardJob/GetGroupDepartmentAssign?cardCode=' + data).then(callback);
        },
        assignStatus: function (data, data1, callback) {
            $http.post('/Admin/CardJob/AssignStatus?id=' + data + '&value=' + data1).then(callback);
        },
        getStatusAssign: function (callback) {
            $http.get('/Admin/CardJob/GetStatusAssign').then(callback);
        },
        roleChangeStatusAssign: function (callback) {
            $http.get('/Admin/CardJob/RoleChangeStatusAssign').then(callback);
        },
        getMemberSendNotification: function (data, callback) {
            $http.post('/Admin/CardJob/GetMemberSendNotification?cardCode=' + data).then(callback);
        },

        //Share file
        getObjFileShare: function (callback) {
            $http.post('/Admin/CardJob/GetObjFileShare').then(callback);
        },
        insertFileShare: function (data, callback) {
            $http.post('/Admin/CardJob/InsertFileShare', data).then(callback);
        },
        viewFileOnline: function (data, callback) {
            $http.post('/Admin/CardJob/ViewFileOnline', data).then(callback);
        },
        isFileEdms: function (data1, data2, callback) {
            $http.get('/Admin/CardJob/IsFileEdms?fileCode=' + data1 + '&url=' + data2).then(callback);
        },

        //Permission modify header card
        permissionHeaderCard: function (data, callback) {
            $http.get('/Admin/CardJob/PermissionHeaderCard?cardCode=' + data).then(callback)
        },

        // Log status card
        getLogStatusCard: function (data, callback) {
            $http.post('/Admin/CardJob/GetLogStatusCard?cardCode=' + data).then(callback)
        },
        deleteNewCard: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteNewCard?cardCode=' + data).then(callback)
        },

        //Lock card
        lockCard: function (data, data1, callback) {
            $http.post('/Admin/CardJob/LockCard?cardCode=' + data + '&value=' + data1).then(callback)
        },

        //View log WF
        viewLogWF: function (data, data1, callback) {
            $http.get('/Admin/CardJob/ViewLogWF?cardCode=' + data + '&wfInstCode=' + data1).then(callback)
        },

        //Object activity
        getWfInstanceOfCard: function (data, callback) {
            $http.post('/Admin/CardJob/GetWfInstanceOfCard?cardCode=' + data).then(callback)
        },
        getAllWfInstance: function (callback) {
            $http.post('/Admin/CardJob/GetAllWfInstance').then(callback)
        },
        getAllWf: function (callback) {
            $http.post('/Admin/CardJob/GetAllWf').then(callback)
        },
        getActInstCard: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetActInstCard?wfInstCode=' + data + '&cardCode=' + data1).then(callback)
        },
        insertObjectProcess: function (data, callback) {
            $http.post('/Admin/WorkflowActivity/InsertObjectProcess', data).then(callback)
        },

        //Percent object
        getPercentObject: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetPercentObject?objCode=' + data + '&objType=' + data1).then(callback)
        },

        //Update count notify
        getCountNotify: function (callback) {
            $http.post('/Admin/NotifiManager/GetCountNotify/').then(callback);
        },

        //File card to edms
        insertCardJobFile: function (data, callback, callback2) {
            submitFormUpload('/Admin/CardJob/InsertCardJobFile', data, callback, callback2);
        },
        getSuggestionsCardFile: function (data, callback) {
            $http.get('/Admin/CardJob/GetSuggestionsCardCodeFile?cardCode=' + data).then(callback);
        },
        getCardFile: function (data, callback) {
            $http.post('/Admin/CardJob/GetCardFile?id=' + data).then(callback);
        },
        deleteCardFile: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteCardFile?id=' + data).then(callback);
        },
        getTreeCategory: function (callback) {
            $http.post('/Admin/EDMSRepository/GetTreeCategory').then(callback);
        },
        updateCardFile: function (data, callback) {
            submitFormUpload('/Admin/CardJob/UpdateCardFile', data, callback);
        },
        getItemFile: function (data, data1, data2, callback) {
            $http.get('/Admin/EDMSRepository/GetItemFile?id=' + data + '&&IsEdit=' + data1 + '&mode=' + data2).then(callback);
        },
        createTempFile: function (data, data1, data2, callback) {
            $http.post('/Admin/EDMSRepository/CreateTempFile?Id=' + data + "&isSearch=" + data1 + "&content=" + data2).then(callback);
        },
        getListUserShare: function (data, callback) {
            $http.post('/Admin/CardJob/GetListUserShare?cardCode=' + data).then(callback);
        },
        getFileShare: function (data, callback) {
            $http.post('/Admin/EDMSRepository/GetFileShare?id=' + data).then(callback);
        },
        insertFileShareCard: function (data, callback) {
            $http.post('/Admin/CardJob/InsertFileShareCard', data).then(callback);
        },

        //File item request
        insertCardJobFileRequest: function (data, callback) {
            submitFormUpload('/Admin/CardJob/insertCardJobFileRequest', data, callback);
        },
        getSuggestionsCardFileRequest: function (data, callback) {
            $http.get('/Admin/CardJob/GetSuggestionsCardCodeFileItem?cardCode=' + data).then(callback);
        },
        getCardFileRequest: function (data, callback) {
            $http.post('/Admin/CardJob/getCardFileRequest?id=' + data).then(callback);
        },

        //File item result
        insertCardJobFileResult: function (data, callback) {
            submitFormUpload('/Admin/CardJob/insertCardJobFileResult', data, callback);
        },
        getSuggestionsCardFileResult: function (data, callback) {
            $http.get('/Admin/CardJob/GetSuggestionsCardCodeFileResult?cardCode=' + data).then(callback);
        },
        getCardFileResult: function (data, callback) {
            $http.post('/Admin/CardJob/getCardFileResult?id=' + data).then(callback);
        },

        //Lock share
        getInfoLockShare: function (data, callback) {
            $http.post('/Admin/CardJob/GetInfoLockShare?cardCode=' + data).then(callback);
        },
        removeLockShare: function (data, callback) {
            $http.post('/Admin/CardJob/RemoveLockShare?cardCode=' + data).then(callback);
        },
        updateLockShareCard: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateLockShareCard?cardCode=' + data).then(callback);
        },
        checkSessionCard: function (data, callback) {
            $http.post('/Admin/CardJob/CheckSessionCard?cardCode=' + data).then(callback);
        },

        //Add new Card
        insertCardNew: function (data, callback) {
            $http.post('/Admin/CardJob/InsertCardNew', data).then(callback);
        },
        getListDefault: function (data, callback) {
            $http.post('/Admin/CardJob/GetListDefault?boardCode=' + data).then(callback);
        },
        insertJcRela: function (data, callback) {
            $http.post('/Admin/CardJob/InsertJcRela', data).then(callback);
        },
        insertCardSuggestion: function (data, callback) {
            $http.post('/Admin/CardJob/InsertCardSuggestion?cardCode=' + data).then(callback);
        },
        updateCardNew: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateCardNew', data).then(callback);
        },

        //Share file new Design
        getUserShareFilePermission: function (data, callback) {
            $http.post('/Admin/CardJob/GetUserShareFilePermission?id=' + data).then(callback);
        },
        deleteShareFile: function (data, data1, callback) {
            $http.post('/Admin/CardJob/DeleteShareFile?id=' + data + '&userName=' + data1).then(callback);
        },
        autoShareFilePermission: function (data, callback) {
            $http.post('/Admin/CardJob/AutoShareFilePermission', data).then(callback);
        },

        //Reject card
        rejectCard: function (data, callback) {
            $http.post('/Admin/CardJob/RejectCard', data).then(callback);
        },
        getReasonRejectUser: function (data, callback) {
            $http.post('/Admin/CardJob/GetReasonRejectUser?cardCode=' + data).then(callback);
        },

        //Update card realtime
        updateCardNameReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardNameReal?cardCode=' + data + '&cardName=' + data1).then(callback);
        },
        updateCardBegintimeReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardBegintimeReal?cardCode=' + data + '&beginTime=' + data1).then(callback);
        },
        updateCardDeadlineReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardDeadlineReal?cardCode=' + data + '&deadline=' + data1).then(callback);
        },
        updateCardEndtimeReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardEndtimeReal?cardCode=' + data + '&endtime=' + data1).then(callback);
        },
        updateCardStatusReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardStatusReal?cardCode=' + data + '&status=' + data1).then(callback);
        },
        updateCardLevelReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardLevelReal?cardCode=' + data + '&cardLevel=' + data1).then(callback);
        },
        updateCardWorkTypeReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardWorkTypeReal?cardCode=' + data + '&worktype=' + data1).then(callback);
        },
        updateWeightNumReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateWeightNumReal?cardCode=' + data + '&weight=' + data1).then(callback);
        },
        updateDescriptionReal: function (data, callback) {
            $http.post('/Admin/CardJob/UpdateDescriptionReal', data).then(callback);
        },
        updateListReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateListReal?cardCode=' + data + '&listCode=' + data1).then(callback);
        },
        updateCardCycleReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardCycleReal?cardCode=' + data + '&cycleCode=' + data1).then(callback);
        },
        isUpdateNewData: function (data, data1, callback) {
            if (window.cardJobLockUpdate != true) {
                $http.post('/Admin/CardJob/IsUpdateNewData?cardCode=' + data + '&timeUpdate=' + data1).then(callback);
            }
        },
        updateCardInheritReal: function (data, data1, callback) {
            $http.post('/Admin/CardJob/UpdateCardInheritReal?cardCode=' + data + '&inherit=' + data1).then(callback);
        },
        autoUpdateLockShareJson: function (data, callback) {
            $http.post('/Admin/CardJob/AutoUpdateLockShareJson?cardCode=' + data).then(callback);
        },

        //Rollback card
        rollbackInfoCard: function (data, callback) {
            $http.post('/Admin/CardJob/RollbackCard', data).then(callback);
        },

        //Upgrade report item
        getItemCheckRpt: function (data, callback) {
            $http.get('/Admin/CardJob/GetItemCheckRpt?cardCode=' + data).then(callback);
        },
        inserReportSession: function (data, callback) {
            $http.post('/Admin/CardJob/InserReportSession', data).then(callback);
        },
        getReportSession: function (data, callback) {
            $http.get('/Admin/CardJob/GetReportSession?cardCode=' + data).then(callback);
        },
        delReportSession: function (data, data1, callback) {
            $http.post('/Admin/CardJob/DelReportSession?id=' + data + '&createdBy=' + data1).then(callback);
        },
        getItemReportResult: function (data, callback) {
            $http.post('/Admin/CardJob/GetItemReportResult?id=' + data).then(callback);
        },
        getItemSessionWork: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetItemSessionWork?session=' + data + '&cardCode=' + data1).then(callback);
        },
        approveSessionWork: function (data, callback) {
            $http.post('/Admin/CardJob/ApproveSessionWork', data).then(callback);
        },
        setupDefaultRepoObject: function (data, data1, data2, callback) {
            $http.post('/Admin/CardJob/SetupDefaultRepoObject?objectCode=' + data + '&objectType=' + data1 + '&cateRepoSettingId=' + data2).then(callback);
        },

        //New Coaching
        getListCoachingType: function (callback) {
            $http.post('/Admin/CardJob/GetListCoachingType').then(callback);
        },
        getListCoachingId: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetListCoachingId?coachingType=' + data + '&coachingTypeId=' + data1).then(callback);
        },
        getListCoachingDetail: function (data, data1, callback) {
            $http.post('/Admin/CardJob/GetListCoachingDetail?cardCode=' + data + '&itemCode=' + data1).then(callback);
        },
        insertCoaching: function (data, callback) {
            $http.post('/Admin/CardJob/InsertCoaching', data).then(callback);
        },
        deleteCoaching: function (data, callback) {
            $http.post('/Admin/CardJob/DeleteCoaching?id=' + data).then(callback);
        },
        //Gantt
        getTrueTypeFont: function (callback) {
            $http.get('/files/Times New Roman.base64.txt').then(callback);
        },
    };
});

app.controller('Ctrl_ESEIM_CARDJOB', function ($scope, $rootScope, $compile, $uibModal, dataserviceCardJob, $cookies, $filter, $translate, $window) {
    window.cardJobApiCount = 0;
    $rootScope.go = function (path) {
        $location.path(path); return false;
    };
    var culture = $cookies.get('_CULTURE') || 'vi-VN';
    $translate.use(culture);
    $rootScope.$on('$translateChangeSuccess', function () {
        caption = caption[culture] ? caption[culture] : caption;
        $rootScope.StatusData = [{
            Value: 1,
            Name: 'Kích Hoạt'
        }, {
            Value: 2,
            Name: 'Không kích hoạt'
        }];

        $rootScope.validationOptionsAssignStaffToItem = {
            rules: {
                EstimateTime: {
                    required: true,
                    regx: /^[+]?\d+(\.\d+)?$/,
                },
            },
            messages: {
                EstimateTime: {
                    required: caption.CJ_VALIDATE_TIME_OUT_NO_BLANK,
                    regx: caption.CJ_REGEX_NUMBER_NEGATIVE,
                }
            }
        }

        $rootScope.validationOptionsCheckList = {
            rules: {
                Title: {
                    required: true,
                    maxlength: 255,
                    regx: /^[^\s].*/
                },
                WeightNumCheckList: {
                    required: true,
                    min: 0,
                    max: 100,
                }
            },
            messages: {
                Title: {
                    required: caption.COM_ERR_REQUIRED.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE),//'Nhập tiêu đề!',
                    maxlength: caption.COM_ERR_EXCEED_CHARACTERS.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE).replace("{1}", "255"),
                    regx: "Tiêu đề đầu mục việc không bắt đầu bằng khoảng trắng"
                },
                WeightNumCheckList: {
                    required: caption.CJ_VALIDATE_ENTER_WEIGHTNUM,
                    min: caption.CJ_VALIDATE_WEIGHT_NUM_GREATER_THAN_0,
                    max: caption.CJ_VALIDATE_WEIGHT_NUM_SMALLER_THAN_100
                }
            }
        }

        $rootScope.validationOptionsAddCardNormal = {
            rules: {
                CardName: {
                    required: true,
                },
            },
            messages: {
                CardName: {
                    required: caption.CJ_VALIDATE_WORK_REQUIRED
                }
            }
        }

        $rootScope.validationOptionsItemWork = {
            rules: {
                StartTime: {
                    required: true,
                },
                EndTime: {
                    required: true,
                },
                ProgressFromStaff: {
                    required: true,
                    regx: /^[+]?\d+(\.\d+)?$/,
                },
                ProgressFromLeader: {
                    regx: /^[+]?\d+(\.\d+)?$/,
                }
            },
            messages: {
                StartTime: {
                    required: caption.CJ_VALIDATE_START_DATE
                },
                EndTime: {
                    required: caption.CJ_VALIDATE_ENTER_END_DATE
                },
                ProgressFromStaff: {
                    required: caption.CJ_VALIDATE_ENTER_PROGRESS,
                    regx: caption.CJ_VALIDATE_PROGRESS_NEGATIVE
                },
                ProgressFromLeader: {
                    regx: caption.CJ_VALIDATE_PROGRESS_NEGATIVE
                }
            }
        }

        $rootScope.validationOptionsShiftLog = {
            rules: {
                ChkinTime: {
                    required: true,
                },
                ChkoutTime: {
                    required: true,
                },
                ChkinLocationTxt: {
                    required: true,
                },
                ChkoutLocationTxt: {
                    required: true,
                }
            },
            messages: {
                ChkinTime: {
                    required: "Thời gian check in không được bỏ trống"
                },
                ChkoutTime: {
                    required: "Thời gian check out không được bỏ trống"
                },
                ChkinLocationTxt: {
                    required: "Địa điểm check in không được bỏ trống"
                },
                ChkoutLocationTxt: {
                    required: "Địa điểm check out không được bỏ trống"
                }
            }
        }

        $rootScope.validationOptionsWeightNum = {
            rules: {
                WeightNum: {
                    required: true,
                    regx: /^[+]?\d+(\.\d+)?$/,
                },
            },
            messages: {
                WeightNum: {
                    required: caption.CJ_VALIDATE_ENTER_WEIGHTNUM,
                    regx: caption.CJ_VALIDATE_ENTER_WEIGHTNUM_PLUS,
                }
            }

        }

        $rootScope.validationOptionsProgress = {
            rules: {
                Progress: {
                    required: true,
                    //regx: /^([0-9])+\b$/,
                    regx: /^[+]?\d+(\.\d+)?$/,
                },
            },
            messages: {
                Progress: {
                    required: caption.CJ_VALIDATE_PROGRESS,
                    regx: caption.CJ_VALIDATE_PROGRESS_NEGATIVE
                }
            }
        }

        $rootScope.validationOptionsBoard = {
            rules: {
                BoardName: {
                    required: true,
                },
            },
            messages: {
                BoardName: {
                    required: caption.CJ_VALIDATE_BOARD_NAME,
                }
            }
        }

        $rootScope.isTranslate = true;

        $rootScope.validationOptionsService = {
            rules: {
                ServiceCode: {
                    required: true,
                    regx: /^[a-zA-Z0-9._äöüÄÖÜ]*$/,
                    maxlength: 255
                },
                ServiceName: {
                    required: true,
                    maxlength: 255
                },
            },
            messages: {
                ServiceCode: {
                    required: caption.SVC_MSG_NOT_CODE,
                    regx: caption.COM_VALIDATE_ITEM_CODE.replace("{0}", caption.SVC_CURD_LBL_SERVICE_CODE),
                    maxlength: caption.SVC_MSG_NOT_CODE_CHARACTER_255
                },
                ServiceName: {
                    required: caption.SVC_MSG_NOT_NAME,
                    maxlength: caption.SVC_MSG_NOT_NAME_CHARACTER
                },
            }
        }

        $rootScope.validationAttributeOptionsService = {
            rules: {
                AttributeCode: {
                    required: true,
                    regx: /^[a-zA-Z0-9._äöüÄÖÜ]*$/
                },
                AttributeName: {
                    required: true,
                },
                Note: {
                    maxlength: 300
                },
                FieldType: {
                    required: true,
                },
                AttributeValue: {
                    required: true,
                },
            },
            messages: {
                AttributeCode: {
                    required: caption.SVC_MSG_CODE_NOT_BLANK,
                    regx: caption.COM_VALIDATE_ITEM_CODE.replace("{0}", caption.SVC_CURD_TAB_ATTRIBUTE_LBL_CODE),
                },
                AttributeName: {
                    required: caption.SVC_MSG_NAME_NOT_BLANK,
                },
                Note: {
                    maxlength: caption.SVC_MSG_NOT_ACTION_CHARACTER
                },
                FieldType: {
                    required: caption.SVC_MSG_VALUE_TYPE_NOT_BLANK,
                },
                AttributeValue: {
                    required: caption.SVC_MSG_TYPE_NOT_BLANK
                }
            }
        }

        $rootScope.validationOptionsOrderRQ = {
            rules: {
                Title: {
                    required: true,
                },
                Content: {
                    required: true,
                },
                Phone: {
                    regx: /^(^0)+([0-9]){9,10}\b$/
                }

            },
            messages: {
                Title: {
                    required: caption.COM_ERR_REQUIRED.replace("{0}", caption.ORR_CURD_LBL_ORR_TITLE),
                },
                Content: {
                    required: caption.COM_ERR_REQUIRED.replace("{0}", caption.ORR_CURD_LBL_ORR_CONTENT),
                },
                Phone: {
                    regx: caption.ORR_VALIDATE_PHONE_NUMBER
                }
            }
        }

        $scope.validationOptionsmore = {
            rules: {
                AttributeCode: {
                    required: true,
                    maxlength: 255,
                },
                AttributeName: {
                    required: true,
                    maxlength: 255,
                },
                Page: {
                    required: true,
                    maxlength: 255,
                },
                Category: {
                    required: true,
                    maxlength: 255,
                },
                Width: {
                    required: true,
                    maxlength: 255,
                },
                Length: {
                    required: true,
                    maxlength: 255,
                },
                Weight: {
                    required: true,
                    maxlength: 255,
                },
            },
            messages: {
                AttributeCode: {
                    required: caption.MLP_VALIDATE_CODE_PRODUCT,
                    maxlength: caption.MLP_VALIDATE_CODE_CHARACTER_PRODUCT
                },
                AttributeName: {
                    required: caption.MLP_VALIDATE_NAME_PRODUCT,
                    maxlength: caption.MLP_VALIDATE_NAME_CHARACTER_PRODUCT
                },
                Page: {
                    required: caption.MLP_VALIDATE_PAGE,

                },
                Category: {
                    required: caption.MLP_VALIDATE_CATEGORY,

                },
                Width: {
                    required: caption.MLP_VALIDATE_WIDTH,

                },
                Length: {
                    required: caption.MLP_VALIDATE_LENGTH,

                },
                Weight: {
                    required: caption.MLP_VALIDATE_WEIGTH,

                },

            }
        }

        $rootScope.validationOptionsMaterial = {
            rules: {
                ProductCode: {
                    required: true,
                    maxlength: 50
                },
                ProductName: {
                    required: true,
                    maxlength: 200
                },
                Unit: {
                    required: true,
                    maxlength: 100
                },
                PricePerM: {
                    required: true,
                },
                PricePerM2: {
                    required: true,
                },
                Wide: {
                    regx: /^([0-9])+\b$/
                },
                High: {
                    regx: /^([0-9])+\b$/
                }
            },
            messages: {
                ProductCode: {
                    required: caption.MLP_VALIDATE_CODE_PRODUCT_IMPORT,
                    maxlength: caption.MLP_VALIDATE_CODE_PRODUCT_IMPORT_CHARACTER
                },
                ProductName: {
                    required: caption.MLP_VALIDATE_NAME_PRODUCT_IMPORT,
                    maxlength: caption.MLP_VALIDATE_NAME_PRODUCT_IMPORT_CHARACTER
                },
                Unit: {
                    required: caption.MLP_VALIDATE_UNIT_IMPORT,
                    maxlength: caption.MLP_VALIDATE_UNIT_IMPORT_CHARACTER1
                },
                PricePerM: {
                    required: caption.MLP_VALIDATE_PERM_IMPORT,
                },
                PricePerM2: {
                    required: caption.MLP_VALIDATE_PERM2_IMPORT,
                },
                Wide: {
                    regx: caption.MLP_VALIDATE_WIDTH,
                },
                High: {
                    regx: caption.MLP_VALIDATE_HEIGHT,
                }
            }
        }

        $rootScope.validationAttributeOptions = {
            rules: {
                AttributeCode: {
                    required: true,
                    maxlength: 255
                },
                AttributeName: {
                    required: true,
                    maxlength: 255
                },
                AttributeValue: {
                    required: true
                },


            },
            messages: {
                AttributeCode: {
                    required: caption.MLP_VALIDATE_CODE_PROPERTIES_IMPORT,
                    maxlength: caption.MLP_VALIDATE_CODE_PROPERTIES_IMPORT_CHARACTER
                },
                AttributeName: {
                    required: caption.MLP_VALIDATE_NAME_PROPERTIES_IMPORT,
                    maxlength: caption.MLP_VALIDATE_NAME_PROPẺTIES_IMPORT_CHARACTER
                },
                AttributeValue: {
                    required: caption.MLP_VALIDATE_VALUE_IMPORT,
                },

            }
        }

        $rootScope.validationOptionAddC1more = {
            rules: {
                AttributeCode: {
                    required: true,
                },
                AttributeName: {
                    required: true,
                },
                Value: {
                    required: true,
                },

            },
            messages: {
                AttributeCode: {
                    required: caption.MLP_VALIDATE_CODE_PRODUCT,
                },
                AttributeName: {
                    required: caption.MLP_VALIDATE_NAME_PRODUCT,
                },
                Value: {
                    required: caption.MLP_VALIDATE_CATEGORY,
                },

            }
        }

        $rootScope.validationOptionCarpetMore = {
            rules: {
                AttributeCode: {
                    required: true,
                },
                AttributeName: {
                    required: true,
                },
                Page: {
                    required: true,
                },
                Category: {
                    required: true,
                },
                PricePerM2: {
                    required: true,
                },
                PricePerM: {
                    required: true,
                },
                Width: {
                    required: true,
                },
                Length: {
                    required: true,
                },

            },
            messages: {
                AttributeCode: {
                    required: caption.MLP_VALIDATE_CODE_PROPERTIES_IMPORT,
                },
                AttributeName: {
                    required: caption.MLP_VALIDATE_NAME_PROPERTIES_IMPORT,
                },
                Page: {
                    required: caption.MLP_VALIDATE_PAGE,
                },
                Category: {
                    required: caption.MLP_VALIDATE_CATEGORY,
                },
                PricePerM2: {
                    required: caption.MLP_VALIDATE_PERM2,
                },
                PricePerM: {
                    required: caption.MLP_VALIDATE_PERM,
                },
                Width: {
                    required: caption.MLP_MSG_WIDTH_NOBLANK,
                },
                Length: {
                    required: caption.MLP_VALIDATE_LENGTH,
                },

            }
        }

        $rootScope.validationOptionSimpleOrder = {
            rules: {
                AttributeCode: {
                    required: true,
                },
                AttributeName: {
                    required: true,
                },
                Category: {
                    required: true,
                },
                PricePerM: {
                    required: true,
                },
                Page: {
                    required: true,
                },
                Width: {
                    required: true,
                },
                Length: {
                    required: true,
                },
            },
            messages: {
                AttributeCode: {
                    required: caption.MLP_VALIDATE_CODE_PROPERTIES_IMPORT,
                },
                AttributeName: {
                    required: caption.MLP_VALIDATE_NAME_PROPERTIES_IMPORT,
                },
                Category: {
                    required: caption.MLP_VALIDATE_CATEGORY,
                },
                PricePerM: {
                    required: caption.MLP_VALIDATE_PERM,
                },
                Page: {
                    required: caption.MLP_VALIDATE_PAGE,
                },
                Width: {
                    required: caption.MLP_MSG_WIDTHS_NOBLANK,
                },
                Length: {
                    required: caption.MLP_VALIDATE_LENGTH,
                },
            }
        }

        $rootScope.validationOptionAddC2more = {
            rules: {
                AttributeCode: {
                    required: true,
                },
                AttributeName: {
                    required: true,
                },
                Category: {
                    required: true,
                },
                PricePerM: {
                    required: true,
                },
                Page: {
                    required: true,
                },
                Width: {
                    required: true,
                },
                Length: {
                    required: true,
                },
                Weight: {
                    required: true,
                },

            },
            messages: {
                AttributeCode: {
                    required: caption.MLP_VALIDATE_CODE_PRODUCT_IMPORT,
                },
                AttributeName: {
                    required: caption.MLP_VALIDATE_NAME_PRODUCT_IMPORT,
                },
                Category: {
                    required: caption.MLP_VALIDATE_CATEGORY,
                },
                PricePerM: {
                    required: caption.MLP_VALIDATE_PERM,
                },
                Page: {
                    required: caption.MLP_VALIDATE_PAGE,
                },
                Width: {
                    required: caption.MLP_VALIDATE_WIDTH,
                },
                Length: {
                    required: caption.MLP_VALIDATE_LENGTH,
                },
                Weight: {
                    required: caption.MLP_VALIDATE_WEIGTH,
                },
            }
        }

        $rootScope.validationOptionFloorMore = {
            rules: {
                AttributeCode: {
                    required: true,
                },
                AttributeName: {
                    required: true,
                },
                Category: {
                    required: true,
                },
                PricePerM: {
                    required: true,
                },
                Page: {
                    required: true,
                },
                PricePerM2: {
                    required: true,
                },
                Width: {
                    required: true,
                }

            },
            messages: {
                AttributeCode: {
                    required: caption.MLP_VALIDATE_CODE_PRODUCT_IMPORT,
                },
                AttributeName: {
                    required: caption.MLP_VALIDATE_NAME_PRODUCT_IMPORT,
                },
                Category: {
                    required: caption.MLP_VALIDATE_CATEGORY,
                },
                PricePerM: {
                    required: caption.MLP_VALIDATE_PERM,
                },
                Page: {
                    required: caption.MLP_VALIDATE_PAGE,
                },
                PricePerM2: {
                    required: caption.MLP_VALIDATE_PERM,
                },
                Width: {
                    required: caption.MLP_MSG_WIDTHS_NOBLANK,
                },

            }
        }

        $rootScope.validationOptionsFile = {
            rules: {
                FileName: {
                    required: true
                },

            },
            messages: {
                FileName: {
                    required: caption.COM_ERR_REQUIRED.replace("{0}", caption.MLP_CURD_TAB_FILE_LIST_COL_NAME),
                },

            }
        }

        $rootScope.validationOptionsCardLogger = {
            rules: {
                DtCode: {
                    required: true,
                },
                DtTitle: {
                    required: true,
                }
            },
            messages: {
                DtCode: {
                    required: caption.CJ_VALIDATE_ATTR_CODE
                },
                DtTitle: {
                    required: caption.CJ_VALIDATE_ATTR_NAME,
                }
            }
        }

        $rootScope.validationOptionsCard = {
            rules: {
                CardName: {
                    required: true,
                },
                WeightNum: {
                    required: true,
                    regx: /^\d+(\.\d+)?$/
                },
                Deadline: {
                    required: true,
                },
                BeginTime: {
                    required: true,
                }
            },
            messages: {
                CardName: {
                    required: caption.CJ_VALIDATE_WORK_REQUIRED
                },
                WeightNum: {
                    required: caption.CJ_WEIGHT_NUM_NOT_EMPTY,
                    regx: caption.CJ_WEIGHT_NUM_NOT_NEGATIVE
                },
                Deadline: {
                    required: caption.CJ_DATE_END_NOT_EMPTY
                },
                BeginTime: {
                    required: caption.CJ_DATE_START_NOT_EMPTY
                }
            }
        }

        $rootScope.validationOptionsReason = {
            rules: {
                ChangeDetails: {
                    required: true,
                    regx: /^[^\s].*/
                }
            },
            messages: {
                ChangeDetails: {
                    required: caption.CJ_REASON_NOT_EMPTY,
                    regx: caption.CJ_REASON_NOT_START_WITH_SPACE
                }
            }
        }

        $rootScope.templatesIcp = {
            search: '<input type="search" class="form-control iconpicker-search" placeholder="Nhập để lọc" />'
        };
    });
    $rootScope.checkDataPrice = function (data) {
        var partternNumber = /^[0-9]\d*(\\d+)?$/;
        var mess = { Status: false, Title: "" }
        if (!partternNumber.test(data.PricePerM)) {
            mess.Status = true;
            mess.Title = mess.Title.concat(" - ", caption.MLP_VALIDATE_PERM_VALUE, "<br/>");
        }
        if (!partternNumber.test(data.PricePerM2)) {
            mess.Status = true;
            mess.Title = mess.Title.concat(" - ", caption.MLP_VALIDATE_PERM2_VALUE, "<br/>");
        }
        return mess;
    }
    $rootScope.isTranslate = false;
    $rootScope.open = true;
    $rootScope.zoomMapDefault = 16;
    $rootScope.latDefault = 21.0277644;
    $rootScope.lngDefault = 105.83415979999995;
    $rootScope.addressDefault = 'Hanoi, Hoàn Kiếm, Hanoi, Vietnam';
    $rootScope.show = {
        length: 20,
        board: true,
        groupUser: false,
        user: false,
        team: false,
        project: false,
        customer: false,
        contract: false,
        supplier: false
    };
    $rootScope.boardCode = "";
    $rootScope.isDisabled = false;
    $rootScope.listSelectBoardCommon = [];
    $rootScope.totalSelectBoardCommon = 0;
    $rootScope.searchObj = {
        CardName: '',
        FromDate: '',
        ToDate: '',
        Status: '',
        Comment: '',
        Description: '',
        Object: '',
        BranchId: '',
        ObjTypeCode: '',
        ButtonStatus: false,
        WorkflowInstCode: ''
    };

    $rootScope.searchAdv = {
        CardName: '',
        FromDate: '',
        ToDate: '',
        Status: '',
        Comment: '',
        BranchId: '',
        Supplier: '',
        Contract: '',
        Customer: '',
        Project: '',
        Group: '',
        UserId: '',
        Department: '',
        UserName: '',
        BoardCode: '',
        ListCode: '',
        TimeType: ['CJ_TIME_TYPE_CREATE']
    }

    $rootScope.listAndCard = {
        Length: 4,
        CurrentPage: 1,
        Total: 1
    }
    $rootScope.CheckListCode = '';
    dataserviceCardJob.getCurrency(function (rs) {
        rs = rs.data;
        $rootScope.currencyData = rs;
    });
    dataserviceCardJob.getBranch(function (rs) {
        rs = rs.data;
        $scope.listBranch = rs;
    })
    $rootScope.searchObj.BranchId = "b_HN";
    $rootScope.listNotification = [];
    $rootScope.ListRelative = [];

    $rootScope.Rela = {
        ListRelative: [],
        ListDelRelative: []
    }

    $rootScope.CardLink = {
        ListCardLinkDel: [],
        ListCardLink: []
    }
    $rootScope.ItemCheck = {
        Id: 0,
        CardCode: '',
        ChkListCode: '',
        CheckTitle: '',
        Completed: 0,
        WeightNum: 0,
        checkItem: false,
        TitleSubItemChk: "",
        ListUserItemChk: [],
        ListSubItem: [],
        Constraint: ''
    }
    $rootScope.ListDelItemCheck = [];
    $rootScope.ItemWork = [];
    $rootScope.CardInherit = {
        Code: '',
        Name: ''
    };

    //root var to check if data is changed
    $rootScope.isDataChanged = false;

    //Search advantage
    $rootScope.SearchAdvMode = false;
    $rootScope.settingNotification = "";
    $rootScope.isTabSumary = true;
    function initLengthListCard() {
        if ($window.innerWidth > 975 && $window.innerWidth < 1295) {
            $rootScope.listAndCard.Length = 2;
        }
        else if ($window.innerWidth > 1295 && $window.innerWidth < 1595) {
            $rootScope.listAndCard.Length = 3;
        } else if ($window.innerWidth > 1595 && $window.innerWidth < 1915) {
            $rootScope.listAndCard.Length = 4;
        }
        else if ($window.innerWidth > 1915 && $window.innerWidth < 2235) {
            $rootScope.listAndCard.Length = 5;
        } else if ($window.innerWidth > 2235) {
            $rootScope.listAndCard.Length = 6;
        }
    }
    function initLengthRelative() {
        $rootScope.show.length = 20;
        //if ($window.innerHeight < 700) {
        //    $rootScope.show.length = 10;
        //} else {
        //    $rootScope.show.length = 15;
        //}
    }
    initLengthListCard();
    initLengthRelative();

    //Admin right
    $rootScope.isAllData = window.isAllData;
    $rootScope.listIconIcp = [
        {
            title: "fa-regular fa-mountain",
            searchTerms: ['overview']
        },
        {
            title: "fa-solid fa-house",
            searchTerms: ['board']
        },
        {
            title: "fa-regular fa-list",
            searchTerms: ['view']
        },
        {
            title: "fa-regular fa-file",
            searchTerms: ['spread', 'sheet']
        },
        {
            title: "fa-regular fa-s",
            searchTerms: ['user', 'story']
        },
        {
            title: "fa-regular fa-truck",
            searchTerms: ['sprints']
        },
        {
            title: "fa-regular fa-book-open",
            searchTerms: ['wiki']
        },
        {
            title: "fa-regular fa-earth-europe",
            searchTerms: ['mind', 'mapping']
        },
        {
            title: "fa-regular fa-comments-question-check",
            searchTerms: ['discussions']
        },
        {
            title: "fa-regular fa-folder-open",
            searchTerms: ['documents']
        },
        {
            title: "fa-regular fa-rocket",
            searchTerms: ['rockstar', 'team']
        },
        {
            title: "fa-regular fa-calendar-days",
            searchTerms: ['calendar']
        },
    ];
});

app.config(function ($routeProvider, $validatorProvider, $httpProvider, $translateProvider) {
    $translateProvider.useUrlLoader('/Admin/CardJob/Translation');
    caption = $translateProvider.translations();
    $routeProvider
        .when('/', {
            templateUrl: ctxfolderCardJob + '/index.html',
            controller: 'indexCardJob'
        })
    $validatorProvider.setDefaults({
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else if (element.prop('type') === 'radio' && element.parent('.radio-inline').length) {
                error.insertAfter(element.parent().parent());
            } else if (element.prop('type') === 'checkbox' || element.prop('type') === 'radio') {
                error.appendTo(element.parent().parent());
            } else {
                error.insertAfter(element);
            }
        },
        highlight: function (element) {
            $(element).closest('.form-group').addClass('has-error');
        },
        unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error');
        },
        success: function (label) {
            label.closest('.form-group').removeClass('has-error');
        }
    });
    $httpProvider.interceptors.push('interceptors');
});

app.controller('indexCardJob', function ($scope, $http, $location, $rootScope, $routeParams, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, $window, $cookies) {
    $("#icon-home").removeClass('pt10');
    $("#breadcrumb").addClass('hidden');
    $scope.model = {}
    $rootScope.CardCode = "";
    $scope.modelDetail = {};
    $scope.ViewMode = 1;
    //$scope.DfSetting = {};
    $scope.addlist = {};
    $scope.addcard = {};
    $scope.showAddList = false;

    //Initial board null
    $rootScope.boardCode = null;
    $rootScope.boardId = null;

    //Show detail job of 1 user
    $rootScope.isShowDetail = false;

    //$scope.showAddCard = '';
    $scope.stringSettings = { displayProp: 'Name', idProperty: 'Code' };
    $scope.modelTimeType = [
        {
            Code: 'CJ_TIME_TYPE_CREATE',
            Name: 'Ngày tạo thẻ'
        },
    ];
    $scope.eventTimeType = {
        onItemSelect: function (item) {
            var index = $rootScope.searchAdv.TimeType.findIndex(x => x == item.Code);
            if (index == -1) {
                $rootScope.searchAdv.TimeType.push(item.Code);
            }
        },
        onItemDeselect: function (item) {
            var index = $rootScope.searchAdv.TimeType.findIndex(x => x == item.Code);
            if (index != -1) {
                $rootScope.searchAdv.TimeType.splice(index, 1);
            }
        },
        onSelectAll: function () {
            for (var item of $scope.TimeTypes) {
                $rootScope.searchAdv.TimeType.push(item.Code);
            }
            console.log($rootScope.searchAdv.TimeType);
        },
        onDeselectAll: function () {
            $rootScope.searchAdv.TimeType = [];
            console.log($rootScope.searchAdv.TimeType);
        }
    };
    $scope.translateTimeType = {
        buttonDefaultText: caption.CJ_CURD_TXT_SEARCH_TIME_TYPE,
        checkAll: caption.CJ_CURD_TXT_SEARCH_TIME_ALL,
        uncheckAll: caption.CJ_CURD_TXT_SEARCH_TIME_NONE,
        dynamicButtonTextSuffix: caption.CJ_CURD_TXT_SEARCH_TIME_CHECK
    };
    $scope.TimeTypes = [
        {
            //id: 0,
            Code: 'CJ_TIME_TYPE_CREATE',
            Name: 'Ngày tạo thẻ'
        },
        {
            //id: 1,
            Code: 'CJ_TIME_TYPE_START',
            Name: 'Ngày bắt đầu'
        },
        {
            //id: 2,
            Code: 'CJ_TIME_TYPE_END',
            Name: 'Ngày hoàn thành'
        },
        {
            //id: 3,
            Code: 'CJ_TIME_TYPE_COMPLETE',
            Name: 'Kế hoạch kết thúc'
        },
    ];
    // end time type
    $scope.searchKey = {
        BoardName: ''
    }
    $scope.modelInOut = {
        Lat: 0,
        Lon: 0,
        ShiftCode: '',
    }
    $scope.listBoardCommon = [];
    $scope.totalBoardCommon = 0;
    $scope.tabCommon = 'Phòng ban';
    $scope.iconCommon = '';
    $scope.treeDataDepartment = [];
    $scope.listColorIconBoard = ["#8e44ad33", "#27ae6026", "#2980b921", "#2ca94b29", "#ed78322b", "#ed1b2433"]
    $scope.isCheckIn = false;
    $scope.listDepartmentFlat = [];
    $scope.initData = function () {
        dataserviceCardJob.getBoardsWithGroupBy(function (rs) {
            rs = rs.data;
            $scope.listBoardsGroup = rs;
            //loadListAndCardWithTab();
        });
        dataserviceCardJob.getListDepartment(null, function (result) {
            result = result.data;
            $rootScope.totalDepartment = result.length;
            $scope.listDepartmentFlat = result;
            //$scope.treeDataDepartment = [];
            //$scope.treeData = result;
            //$scope.ListParent = result.filter(function (item) {
            //    return (item.ParentCode == null);
            //});
            //var index = 0;
        });
        dataserviceCardJob.getStatus(function (rs) {
            rs = rs.data;
            $scope.CardStatus = rs;
        });
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoards = rs;
        });
        dataserviceCardJob.getUnit(function (rs) {
            rs = rs.data;
            $scope.listUnit = rs
        });
        dataserviceCardJob.checkListAll(function (rs) {
            rs = rs.data;
            $scope.listCheck = rs;
        })
        dataserviceCardJob.getObjTypeJC(function (rs) {
            rs = rs.data;
            $scope.objTypeJC = rs;
        })
        dataserviceCardJob.getLastShiftLog(function (rs) {
            rs = rs.data;
            $scope.isCheckIn = rs.IsCheckIn;
            $scope.modelInOut.ShiftCode = rs.ShiftCode;
        })
        dataserviceCardJob.getAllWf(function (rs) {
            rs = rs.data;
            $scope.lstSearchWfInst = rs;
        })
    };
    $scope.initData();
    $scope.objTypeChange = function (code) {
        dataserviceCardJob.getObjTypeCode(code, function (rs) {
            rs = rs.data;
            $scope.listObjWithType = rs;
        });
    };
    $scope.readyCBGroupUser = function () {
        $('#treeDiv').jstree(true).settings.core.multiple = true;
        dataserviceCardJob.getListDepartment(null, function (result) {
            result = result.data;
            $rootScope.totalDepartment = result.length;
            //$scope.treeData = result;
            $scope.ListParent = result.filter(function (item) {
                return (item.ParentCode == null);
            });
            var index = 0;
            for (var i = 0; i < result.length; i++) {
                if (result[i].ParentCode == null) {
                    var stt = $scope.ListParent.length - index;
                    if (stt.toString().length == 1) {
                        stt = "0" + stt;
                    }
                    index = index + 1;
                    var data = {
                        id: result[i].Id,
                        parent: '#',
                        text: stt + ' - ' + result[i].Title,
                        state: { selected: false, opened: true }
                    }
                    $scope.treeDataDepartment.push(data);
                } else {
                    var data = {
                        id: result[i].Id,
                        parent: result[i].ParentCode,
                        text: result[i].Title,
                        state: { selected: false, opened: true }
                    }
                    $scope.treeDataDepartment.push(data);
                }
            }
        });
    }
    $scope.searchGroupUser = function (search) {
        $('#treeDiv').jstree(true).search(search);
    }
    $scope.searchTreeGroupUser = function (e, data) {
        if (data.res.length === 0) {

        };
    }
    $scope.selectNodeGroupUser = function () {
        var listSelect = [];
        var listNoteSelect = $scope.treeInstance.jstree(true).get_checked(true);
        for (var i = 0; i < listNoteSelect.length; i++) {
            var obj = {
                code: listNoteSelect[i].id,
            }
            listSelect.push(obj);
        }
        $rootScope.listSelectBoardCommon = listSelect;
        $rootScope.totalSelectBoardCommon = listSelect.length;


        if (listSelect.length == $rootScope.totalDepartment) {
            $scope.isCheck = true;
        } else {
            $scope.isCheck = false;
        }

        loadDataTabGroupUserListAndCard();
    }
    $scope.selectDepartment = function (department) {
        var listSelect = angular.copy($rootScope.listSelectBoardCommon);
        if (!department.IsSelected) {
            department.IsSelected = true;
            var obj = {
                code: department.Id,
            }
            listSelect.push(obj);
        }
        else {
            department.IsSelected = false;
            listSelect = listSelect.filter(x => x.Id != department.Id);
        }
        $rootScope.listSelectBoardCommon = listSelect;
        $rootScope.totalSelectBoardCommon = listSelect.length;

        if (listSelect.length == $rootScope.totalDepartment) {
            $scope.isCheck = true;
        } else {
            $scope.isCheck = false;
        }

        loadDataTabGroupUserListAndCard();
    }
    $scope.deselectNodeGroupUser = function () {
        var listSelect = [];
        var listNoteSelect = $scope.treeInstance.jstree(true).get_checked(true);
        for (var i = 0; i < listNoteSelect.length; i++) {
            var obj = {
                code: listNoteSelect[i].id,
            }
            listSelect.push(obj);
        }
        $rootScope.listSelectBoardCommon = listSelect;
        $rootScope.totalSelectBoardCommon = listSelect.length;
        loadDataTabGroupUserListAndCard();


        if (listSelect.length == $rootScope.totalDepartment) {
            $scope.isCheck = true;
        } else {
            $scope.isCheck = false;
        }
    }
    $scope.treeConfigGroupUser = {
        core: {
            multiple: false,
            animation: true,
            error: function (error) {
                $log.error('treeCtrl: error from js tree - ' + angular.toJson(error));
            },
            check_callback: true,
            worker: true,
        },
        types: {
            default: {
                icon: 'fa fa-folder icon-state-warning'
            }
        },
        version: 1,
        plugins: ['checkbox', 'types', 'search', 'contextmenu'],
        checkbox: {
            //"three_state": false,
            //"whole_node": true,
            "keep_selected_style": true,
            "cascade": "undetermined",
        },
        'contextmenu': {
            'items': treeContextMenu
        }
    };
    $scope.treeEventsGroupUser = {
        'ready': $scope.readyCBGroupUser,
        'select_node': $scope.selectNodeGroupUser,
        'deselect_node': $scope.deselectNodeGroupUser,
        'search': $scope.searchTreeGroupUser,
    }
    $scope.onMultipleGroupUser = function () {
        if ($scope.isCheck == true) {
            $('#treeDiv').jstree(true).settings.core.multiple = true;
        } else {
            $('#treeDiv').jstree(true).settings.core.multiple = false;
        }
    }
    $scope.isCheck = false;
    var isAuto = false;
    $scope.checkAllDepartmentAuto = function () {
        if ($scope.isCheck) {
            $scope.isCheck = false;
        }
        else {
            $scope.isCheck = true;
        }
        var listSelect = angular.copy($scope.listDepartmentFlat);
        if ($scope.isCheck) {
            //$scope.treeInstance.jstree(true).check_all();
            listSelect.forEach(x => x.IsSelected = true);

            $rootScope.listSelectBoardCommon = listSelect;
            $rootScope.totalSelectBoardCommon = listSelect.length;
        }
        else {
            //$scope.treeInstance.jstree(true).uncheck_all();
            listSelect.forEach(x => x.IsSelected = false);

            $rootScope.listSelectBoardCommon = [];
            $rootScope.totalSelectBoardCommon = 0;
        }
        //var listSelect = [];
        //var listNoteSelect = $scope.treeInstance.jstree(true).get_checked(true);
        //for (var i = 0; i < listNoteSelect.length; i++) {
        //    var obj = {
        //        code: listNoteSelect[i].id,
        //    }
        //    listSelect.push(obj);
        //}
        loadDataTabGroupUserListAndCard();
        isAuto = true;
    }
    $scope.checkAllDepartment = function () {
        if ($scope.isCheck) {
            $scope.isCheck = false;
        }
        else {
            $scope.isCheck = true;
        }

        var listSelect = angular.copy($scope.listDepartmentFlat);
        if ($scope.isCheck) {
            //$scope.treeInstance.jstree(true).check_all();
            listSelect.forEach(x => x.IsSelected = true);
            $scope.listDepartmentFlat = listSelect;
            $rootScope.listSelectBoardCommon = listSelect;
            $rootScope.totalSelectBoardCommon = listSelect.length;
        }
        else {
            //$scope.treeInstance.jstree(true).uncheck_all();
            listSelect.forEach(x => x.IsSelected = false);
            $scope.listDepartmentFlat = listSelect;
            $rootScope.listSelectBoardCommon = [];
            $rootScope.totalSelectBoardCommon = 0;
        }
        //var listSelect = [];
        //var listNoteSelect = $scope.treeInstance.jstree(true).get_checked(true);
        //for (var i = 0; i < listNoteSelect.length; i++) {
        //    var obj = {
        //        code: listNoteSelect[i].id,
        //    }
        //    listSelect.push(obj);
        //}

        //$rootScope.listSelectBoardCommon = listSelect;
        loadDataTabGroupUserListAndCard();
    }
    $scope.boardCommom = function () {
        $scope.listBoardCommon = [];
        $rootScope.listSelectBoardCommon = [];
        isAuto = false;
        $rootScope.listAndCard.CurrentPage = 1;
        $scope.isCheck = false;
        //hide detail employee
        $rootScope.isShowDetail = false;
        $rootScope.isCalendar = false;

        //tab board
        if ($rootScope.show.board) {
            $scope.tabCommon = 'Bảng';
            dataserviceCardJob.getBoardsWithGroupBy(function (rs) {
                rs = rs.data;
                $scope.listBoardsGroup = rs;
            });
            dataserviceCardJob.getBoardsWithWorkFlow($rootScope.searchObj.Object, function (rs) {
                rs = rs.data;
                $scope.listBoardsGroupWorkFlow = rs;
            })
            $scope.detail(null);
        }
        //tab group user
        if ($rootScope.show.groupUser) {
            $scope.tabCommon = 'Phòng ban';
            if (isAuto) {
                loadDataTabGroupUserListAndCard();
            }
            else {
                $scope.checkAllDepartmentAuto();
            }
        }
        //tab user
        if ($rootScope.show.user) {
            loadDataTabUser();
            //loadDataTabUserListAndCard();
        }
        //tab team
        if ($rootScope.show.team) {
            loadDataTabTeam();
            //loadDataTabTeamListAndCard();
        }
        //tab project
        if ($rootScope.show.project) {
            loadDataTabProject();
            //loadDataTabProjectListAndCard();
        }
        //tab customer
        if ($rootScope.show.customer) {
            loadDataTabCustomer();
            //loadDataTabCustomerListAndCard();
        }
        //tab contract
        if ($rootScope.show.contract) {
            loadDataTabContract();
            //loadDataTabContractListAndCard();
        }
        //tab supplier
        if ($rootScope.show.supplier) {
            loadDataTabSupplier();
            //loadDataTabSupplierListAndCard();
        }
        //$rootScope.listSelectBoardCommon = $rootScope.listSelectBoardCommon.length != 0 ? [] : [];
    }
    $scope.scrollCommon = function (dir) {
        if (dir == 'bottom') {
            if ($scope.listBoardCommon.length < $scope.totalBoardCommon) {
                //tab user
                var page = ($scope.listBoardCommon.length / $rootScope.show.length) + 1;
                if ($rootScope.show.user) {
                    dataserviceCardJob.getListPageUser(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
                        rs = rs.data;
                        for (var i = 0; i < rs.ListData.length; i++) {
                            var obj = {
                                Id: rs.ListData[i].Id,
                                Code: rs.ListData[i].Code,
                                Name: rs.ListData[i].Name,
                                CountWork: rs.ListData[i].CountWork,
                                CreatedTime: rs.ListData[i].CreatedTime
                            }
                            $scope.listBoardCommon.push(obj);
                        }
                        $scope.totalBoardCommon = rs.Total;
                    });
                }
                //tab team
                if ($rootScope.show.team) {
                    dataserviceCardJob.getListGroupUserPage(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
                        rs = rs.data;
                        for (var i = 0; i < rs.ListData.length; i++) {
                            var obj = {
                                Id: rs.ListData[i].Id,
                                Code: rs.ListData[i].Code,
                                Name: rs.ListData[i].Name,
                                CountWork: rs.ListData[i].CountWork,
                                CreatedTime: rs.ListData[i].CreatedTime
                            }
                            $scope.listBoardCommon.push(obj);
                        }
                        $scope.totalBoardCommon = rs.Total;
                    });
                }
                //tab project
                if ($rootScope.show.project) {
                    dataserviceCardJob.getListPageProject(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
                        rs = rs.data;
                        for (var i = 0; i < rs.ListData.length; i++) {
                            var obj = {
                                Id: rs.ListData[i].Id,
                                Code: rs.ListData[i].Code,
                                Name: rs.ListData[i].Name,
                                CountWork: rs.ListData[i].CountWork,
                                CreatedTime: rs.ListData[i].CreatedTime
                            }
                            $scope.listBoardCommon.push(obj);
                        }
                        $scope.totalBoardCommon = rs.Total;
                    });
                }
                //tab customer
                if ($rootScope.show.customer) {
                    dataserviceCardJob.getListPageCustomer(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
                        rs = rs.data;
                        for (var i = 0; i < rs.ListData.length; i++) {
                            var obj = {
                                Id: rs.ListData[i].Id,
                                Code: rs.ListData[i].Code,
                                Name: rs.ListData[i].Name,
                                CountWork: rs.ListData[i].CountWork,
                                CreatedTime: rs.ListData[i].CreatedTime
                            }
                            $scope.listBoardCommon.push(obj);
                        }
                        $scope.totalBoardCommon = rs.Total;
                    });
                }
                //tab contract
                if ($rootScope.show.contract) {
                    dataserviceCardJob.getListPageContract(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
                        rs = rs.data;
                        for (var i = 0; i < rs.ListData.length; i++) {
                            var obj = {
                                Id: rs.ListData[i].Id,
                                Code: rs.ListData[i].Code,
                                Name: rs.ListData[i].Name,
                                CountWork: rs.ListData[i].CountWork,
                                CreatedTime: rs.ListData[i].CreatedTime
                            }
                            $scope.listBoardCommon.push(obj);
                        }
                        $scope.totalBoardCommon = rs.Total;
                    });
                }
                //tab supplier
                if ($rootScope.show.supplier) {
                    dataserviceCardJob.getListPageSupplier(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
                        rs = rs.data;
                        for (var i = 0; i < rs.ListData.length; i++) {
                            var obj = {
                                Id: rs.ListData[i].Id,
                                Code: rs.ListData[i].Code,
                                Name: rs.ListData[i].Name,
                                CountWork: rs.ListData[i].CountWork,
                                CreatedTime: rs.ListData[i].CreatedTime
                            }
                            $scope.listBoardCommon.push(obj);
                        }
                        $scope.totalBoardCommon = rs.Total;
                    });
                }
            }
        }
    };

    //CurrentPageList
    $scope.lists = [];
    var currentPageList = 1;
    $scope.selectBoardCommon = function () {
        $rootScope.listAndCard.CurrentPage = 1;
        if ($rootScope.show.user && $rootScope.isShowDetail) {
            var lengthChecked = $scope.listBoardCommon.filter(function (obj, index) {
                return obj.IsCheck;
            });
            for (var i = 0; i < lengthChecked.length; i++) {
                for (var j = 0; j < $rootScope.listSelectBoardCommon.length; j++) {
                    if (lengthChecked[i].Code === $rootScope.listSelectBoardCommon[j].Code) {
                        lengthChecked[i].IsCheck = false;
                        lengthChecked.splice(i, 1);
                        break;
                    }
                }
            }
            $rootScope.listSelectBoardCommon = lengthChecked;
            $rootScope.reloadDetailEmployee();
        }
        else {
            var lengthChecked = $scope.listBoardCommon.filter(function (obj, index) {
                return obj.IsCheck;
            });
            $rootScope.listSelectBoardCommon = lengthChecked;
            $rootScope.totalSelectBoardCommon = lengthChecked.length;
            loadListAndCardWithTab();
            if (lengthChecked.length == $scope.listBoardCommon.length) {
                $scope.isCheck = true;
            } else {
                $scope.isCheck = false;
            }
        }
    }
    $scope.selectUser = function (user) {
        user.IsCheck = !user.IsCheck;
        $scope.selectBoardCommon();
    };
    $scope.searchBoardCommom = function () {
        //tab groupUser
        if ($rootScope.show.groupUser) {
            $scope.searchGroupUser($scope.searchKey.BoardName);
        }
        //tab user
        if ($rootScope.show.user) {
            loadDataTabUser();
        }
        //tab team
        if ($rootScope.show.team) {
            loadDataTabTeam();
        }
        //tab project
        if ($rootScope.show.project) {
            loadDataTabProject();
        }
        //tab customer
        if ($rootScope.show.customer) {
            loadDataTabCustomer();
        }
        //tab contract
        if ($rootScope.show.contract) {
            loadDataTabContract();
        }
        //tab supplier
        if ($rootScope.show.supplier) {
            loadDataTabSupplier();
        }
    }
    $scope.contextmenuOptionsCommon = function (code) {
        var contextMenuData = [];
        if ($rootScope.listSelectBoardCommon.length != 0) {
            var rightOnChecked = $rootScope.listSelectBoardCommon.find(function (element) {
                if (element.Code == code) return true;
            });
            if (rightOnChecked) {
                contextMenuData.push(['<i class="fab fa-trello"></i>Giao việc', function () {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/add-card-normal.html',
                        controller: 'add-card-normalCardJob',
                        backdrop: 'static',
                        size: '35',
                        resolve: {
                            para: function () {
                                return $rootScope.listSelectBoardCommon;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        d.Object.BeginTime = d.Object.BeginTime != '' ? $filter('date')(d.Object.BeginTime, 'dd/MM/yyyy') : '';
                        d.Object.EndTime = d.Object.EndTime != '' ? $filter('date')(d.Object.EndTime, 'dd/MM/yyyy') : '';
                        d.Object.Deadline = d.Object.Deadline != '' ? $filter('date')(d.Object.Deadline, 'dd/MM/yyyy') : '';
                        d.Object.Status = '';
                        $scope.cards[d.ListCode].push(d.Object);
                        loadDate();
                    }, function () { });
                }]);
            }
        }
        return contextMenuData
    }
    $scope.addBoard = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-board.html',
            controller: 'add-boardCardJob',
            size: '30',
            backdrop: 'static'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getBoardsWithGroupBy(function (rs) {
                rs = rs.data;
                $scope.listBoardsGroup = rs;
                loadListAndCardWithTab();
            });
            dataserviceCardJob.getListBoard(function (rs) {
                rs = rs.data;
                $scope.listBoards = rs;
            });
            $scope.create = {};
        }, function () { });
    };
    $scope.editBoard = function (BoardCode) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/edit-board.html',
            controller: 'edit-boardCardJob',
            size: '30',
            resolve: {
                para: function () {
                    return BoardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getBoardsWithGroupBy(function (rs) {
                rs = rs.data;
                //angular.forEach(rs, function (item) {
                //    angular.forEach(item.ListBoard, function (item1) {
                //        var color = $scope.listColorIconBoard[Math.floor(Math.random() * $scope.listColorIconBoard.length)]
                //        angular.forEach(item1, function (item2) {
                //            //item2.BackgroundImage = $scope.listIconBoard[Math.floor(Math.random() * $scope.listIconBoard.length)]
                //            item2.BackgroundColor = color;
                //        })
                //    });
                //});
                $scope.listBoardsGroup = rs;
                loadListAndCardWithTab();
            });
            dataserviceCardJob.getListBoard(function (rs) {
                rs = rs.data;
                $scope.listBoards = rs;
            });
            $scope.create = {};
        }, function () { });
    };
    $scope.deleteBoard = function (BoardID) {
        dataserviceCardJob.deleteBoard(BoardID, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.boardCommom();
                dataserviceCardJob.getListBoard(function (rs) {
                    rs = rs.data;
                    $scope.listBoards = rs;
                });
                $scope.create = {};
            }
        });
    };
    $scope.detail = function (BoardCode, BoardID) {
        $rootScope.boardCode = BoardCode;
        $rootScope.boardId = BoardID;
        $rootScope.listAndCard.CurrentPage = 1;
        loadListAndCardWithTab();
        if ($rootScope.isTabSumary == false) {
            dataserviceCardJob.getBoardsWithWorkFlow($rootScope.searchObj.Object, function (rs) {
                rs = rs.data;
                $scope.listBoardsGroupWorkFlow = rs;
            });
        }
    };
    $rootScope.reloadWFBoard = function (code) {
        dataserviceCardJob.getBoardsWithWorkFlow(code, function (rs) {
            rs = rs.data;
            $scope.listBoardsGroupWorkFlow = rs;
        });
        dataserviceCardJob.getBoardDetail($rootScope.boardCode, code, function (rs) {
            rs = rs.data;
            $scope.modelDetail = rs;
        });
    }
    //end card left
    //card detail
    $scope.acticeDrag = false;
    $scope.create = {};
    $scope.search = function () {
        //if ($rootScope.searchObj.CardName != '' || $rootScope.searchObj.FromDate != ''
        //    || $rootScope.searchObj.ToDate != '' || $rootScope.searchObj.Status != ''
        //    || $rootScope.searchObj.Comment != '' || $rootScope.searchObj.Description != '' || $rootScope.searchObj.Object != '' || $rootScope.searchObj.BranchId != '') {

        //} else {
        //    /*App.toastrWarning(caption.CJ_MSG_ENTER_KEY_WORD);*/
        //}
        $rootScope.listAndCard.CurrentPage = 1;
        loadListAndCardWithTab();
        dataserviceCardJob.getBoardsWithWorkFlow($rootScope.searchObj.Object, function (rs) {
            rs = rs.data;
            $scope.listBoardsGroupWorkFlow = rs;
        });
        $rootScope.searchObj.ButtonStatus = false;
    }
    $rootScope.indexTab = '';
    $scope.searchInTab = function (index) {
        $rootScope.indexTab = index;
        if (index == 1) {
            $rootScope.searchObj.Status = "START";
        } else if (index == 2) {
            $rootScope.searchObj.Status = "CREATED";
        } else if (index == 3) {
            $rootScope.searchObj.Status = "DONE";
        } else if (index == 4) {
            $rootScope.searchObj.Status = "CANCLED";
        } else if (index == 5) {
            $rootScope.searchObj.Status = "";
        } else if (index == 6) {
            $rootScope.searchObj.Status = "TRASH";
        } else if (index == 7) {
            $rootScope.searchObj.Status = "CLOSED";
        }
        loadListAndCardWithTab();
        $rootScope.searchObj.ButtonStatus = true;
        if ($rootScope.isCalendar) {
            $('#calendarCard').fullCalendar('refetchEvents');
            $rootScope.loadCalendar("calendarCard");
        }
    }
    $scope.selectBoard = function (boardCode) {
        dataserviceCardJob.getLists(boardCode, function (rs) {
            rs = rs.data;
            if (rs.length != 0) {
                $scope.listsInBoard = rs;
                $scope.create.ListCode = $scope.listsInBoard.length != 0 ? $scope.listsInBoard[0].ListCode : '';
            } else {
                $scope.listsInBoard = [];
                $scope.create.ListCode = '';
                App.toastrError(caption.CJ_MSG_NO_LIST_IN_BOARD);
            }
        });
    }
    $scope.createNewCard = function () {
        if ($rootScope.show.board) {
            $scope.create.TabBoard = 1;
        }
        if ($rootScope.show.groupUser) {
            $scope.create.TabBoard = 2;
        }
        if ($rootScope.show.user) {
            $scope.create.TabBoard = 3;
        }
        if ($rootScope.show.team) {
            $scope.create.TabBoard = 4;
        }
        if ($rootScope.show.project) {
            $scope.create.TabBoard = 5;
        }
        if ($rootScope.show.customer) {
            $scope.create.TabBoard = 6;
        }
        if ($rootScope.show.contract) {
            $scope.create.TabBoard = 7;
        }
        if ($rootScope.show.supplier) {
            $scope.create.TabBoard = 8;
        }
        $scope.create.ListCodeRelative = $rootScope.listSelectBoardCommon;
        dataserviceCardJob.insertCard($scope.create, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initData();
                $rootScope.loadWork(true);
                $scope.cleanInfo();
            }
        });
    };
    $scope.cleanInfo = function () {

        $scope.create.ListCode = '';
        $scope.create.CardName = '';
        $scope.create.BoardCode = '';
    }
    $scope.options = {
        title: $compile('<label>Thêm thẻ mới</label> <a class="close" style="width: 30px; height: 30px;opacity: 1;" onclick="$(\'.popover\').popover(\'hide\')" data-dismiss="alert"></a>')($scope),
        content: $compile(`
                            <div class="input-group">
                                <ui-select tagging ng-model="create.BoardCode" theme="bootstrap" on-select="selectBoard(create.BoardCode)">
                                    <ui-select-match placeholder="Bảng việc...">{{$select.selected.BoardName}}</ui-select-match>
                                    <ui-select-choices style="height: auto" repeat="x.BoardCode as x in listBoards | filter: $select.search">
                                        {{x.BoardName}}
                                    </ui-select-choices>
                                </ui-select>
                                <span class="input-group-addon" ng-click="create.BoardCode = ''">
                                     <span class="fa fa-times"></span>
                                 </span>
                            </div>
                            <div class="input-group mt5">
                                <ui-select tagging ng-model="create.ListCode" theme="bootstrap">
                                    <ui-select-match placeholder="Danh sách...">{{$select.selected.ListName}}</ui-select-match>
                                    <ui-select-choices style="height: auto" repeat="x.ListCode as x in listsInBoard | filter: $select.search">
                                        {{x.ListName}}
                                    </ui-select-choices>
                                </ui-select>
                                <span class="input-group-addon" ng-click="create.ListCode = ''">
                                    <span class="fa fa-times"></span>
                                </span>
                            </div>
                            <input class='form-control mt5' ng-model='create.CardName' placeholder='Tên thẻ...'/>
                            <button class='btn btn-red mt5' style="width: 100%" ng-click='createNewCard()'>Tạo</button>
                            <style>
                                .popover-title{cursor: pointer}
                            </style>
                            <script>
                                $('.popover').draggable();
                                $('body').on('hidden.bs.popover', function (e) {
                                    $(e.target).data("bs.popover").inState = { click: false, hover: false, focus: false }
                                });
                            </script>
                            `)($scope),
        trigger: "click",
        placement: "bottom",
        html: true
    };
    $scope.openAddList = function () {
        $scope.showAddList = !$scope.showAddList;
    }

    $scope.openAddCard = function (ListCode) {
        $scope.showAddCard = ListCode;
        var listTextAre = $('#BoardDetailMain').find('.cardArea');
        for (var i = 0; i < listTextAre.length; i++) {
            listTextAre[i].remove();
        }
        var html = '<textarea  id="textare_' + ListCode + '"class="form-control cardArea" placeholder="Nhập tiêu đề cho thẻ này..." ng-model="addcard.CardName"></textarea>';
        $("#bottom_" + ListCode).append($compile(html)($scope));
        var $textarea = $('#textare_' + ListCode);
        $textarea.focus();
    }

    $scope.closeAddCard = function (ListCode) {
        $scope.showAddCard = '';
        $("#textare_" + ListCode).remove();
    }

    $scope.deleteList = function (ListID) {
        dataserviceCardJob.deleteList(ListID, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initData();
                loadListAndCardWithTab();
            }
        });
    };

    $scope.cardDetail = function (CardCode) {
        $rootScope.CardCode = CardCode;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-buffer.html',
            controller: 'edit-cardCardJob',
            backdrop: 'static',
            keyboard: false,
            size: '80',
            resolve: {
                para: function () {
                    return CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            updateNotify();
        }, function () { });
    }

    $scope.addNewCard = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/addNewCard.html',
            controller: 'addNewCard',
            backdrop: 'static',
            size: '80',
            resolve: {
                para: function () {
                    return {
                        ObjectCode: $rootScope.searchObj.Object,
                        BoardCode: $rootScope.boardCode
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            $rootScope.reloadGridCard();
        }, function () {
            $rootScope.reloadGridCard(true);
            if ($rootScope.isTabSumary == false) {
                dataserviceCardJob.getBoardsWithWorkFlow($rootScope.searchObj.Object, function (rs) {
                    rs = rs.data;
                    $scope.listBoardsGroupWorkFlow = rs;
                });
                dataserviceCardJob.getBoardDetail($rootScope.boardCode, $rootScope.searchObj.Object, function (rs) {

                    rs = rs.data;
                    $scope.modelDetail = rs;
                });
            }
        });
    }

    $scope.addCardBuffer = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-buffer.html',
            controller: 'add-card-buffer',
            backdrop: 'static',
            keyboard: false,
            size: '75',
            resolve: {
                para: function () {
                    return {
                        ObjectCode: $rootScope.searchObj.Object,
                        BoardCode: $rootScope.boardCode
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            if ($rootScope.isDataChanged) {
                $rootScope.reloadGridCard();
                $rootScope.isDataChanged = false;
            }
        }, function () {
            if ($rootScope.isDataChanged) {
                $rootScope.reloadGridCard(true);
                $rootScope.isDataChanged = false;
            }
            if ($rootScope.isTabSumary == false) {
                dataserviceCardJob.getBoardsWithWorkFlow($rootScope.searchObj.Object, function (rs) {
                    rs = rs.data;
                    $scope.listBoardsGroupWorkFlow = rs;
                });
                dataserviceCardJob.getBoardDetail($rootScope.boardCode, $rootScope.searchObj.Object, function (rs) {

                    rs = rs.data;
                    $scope.modelDetail = rs;
                });
            }
        });
    }

    $scope.addCardNormal = function () {
        var obj = {
            Code: "",
            Name: "",
            TabBoard: 0
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + "/add-card.html",
            controller: 'add-cardCardJob',
            backdrop: 'static',
            size: '80',
            resolve: {
                para: function () {
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $rootScope.reloadGridCard();
        }, function () { });
    };

    $scope.showGantt = function () {
        if ($rootScope.boardCode == null || $rootScope.boardCode == "" || $rootScope.boardCode == undefined) {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_TABLE_WORKING);
        } else {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/show-gantt.html',
                controller: 'show-gantt',
                backdrop: 'static',
                size: '70'
            });
            modalInstance.result.then(function (d) {
            }, function () {
                $rootScope.reloadGridCard();
            });
        }
    }

    //Show calendar
    $rootScope.isCalendar = false;
    $scope.showSchedule = function () {
        $rootScope.isShowDetail = false;
        if ($rootScope.isCalendar) {
            $rootScope.isCalendar = false;
        }
        else {
            $rootScope.isCalendar = true;
        }
    }

    $scope.addList = function () {
        $scope.addlist.BoardCode = $rootScope.boardCode;
        $scope.addlist.WeightNum = $scope.addlist.WeightNum == null ? 0 : $scope.addlist.WeightNum;
        dataserviceCardJob.insertList($scope.addlist, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.addlist.ListName = "";
                var dataSearch = {
                    Length: $rootScope.listAndCard.Length,
                    Page: $rootScope.listAndCard.CurrentPage,
                    BoardCode: $rootScope.boardCode,
                    CardName: $rootScope.searchObj.CardName,
                    FromDate: $rootScope.searchObj.FromDate,
                    ToDate: $rootScope.searchObj.ToDate,
                    DeadLine: $rootScope.searchObj.DeadLine,
                    Object: $rootScope.searchObj.Object,
                    CurrentPageList: currentPageList,
                }
                dataserviceCardJob.getListsAndCard(dataSearch, function (rs) {
                    rs = rs.data;
                    $scope.lists = rs.Data;
                    $rootScope.listAndCard.Total = (rs.Total % $rootScope.listAndCard.Length == 0) ? rs.Total + 1 : rs.Total;
                    loadDate();
                    //next page auto
                    if (rs.Total % $rootScope.listAndCard.Length == 0) {
                        $rootScope.listAndCard.CurrentPage = $rootScope.listAndCard.CurrentPage + 1;
                        dataSearch.Page = $rootScope.listAndCard.CurrentPage;
                        dataserviceCardJob.getListsAndCard(dataSearch, function (rs) {
                            rs = rs.data;
                            $scope.lists = rs.Data;
                        });
                    }
                });
            }
        })
    }
    $scope.sortListByStatus = function (orther) {
        dataserviceCardJob.sortListByStatus($rootScope.boardCode, orther, function (rs) {
            rs = rs.data;
            if (rs.Error) {

            }
            else {
                $scope.initData();
            }
        })
    }
    $scope.editingListTitle = function (id) {
        if ($scope.acticeDrag == false) {
            $scope.acticeDrag = true;
            document.getElementById("listName_" + id).focus();
        }
    }
    $scope.updateListName = function (ListID) {
        var element = $('#listName_' + ListID);
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        console.log('NewName: ' + newName);
        console.log("CurrentName: " + currentName);
        if (newName != currentName) {
            console.log("Change name");
            var data = {
                ListID: ListID,
                ListName: newName
            }

            dataserviceCardJob.updateListName(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    element.attr('data-currentvalue', newName)
                }
            })
        }
        $scope.acticeDrag = false;
    }
    $scope.changeListStatus = function (listID, statusCode) {
        dataserviceCardJob.changeListStatus(listID, statusCode, function (rs) {
            rs = rs.data;
            if (rs.Error) {
            }
            else {
                for (var i = 0; i < $scope.lists.length; i++) {
                    if ($scope.lists[i].ListID == listID) {
                        $scope.lists[i].Status = statusCode;
                        if (statusCode == 0) {
                            $scope.lists[i].HeaderColor = '#d35400';
                        };
                        if (statusCode == 1) {
                            $scope.lists[i].HeaderColor = '#f1c40f';
                        };
                        if (statusCode == 2) {
                            $scope.lists[i].HeaderColor = '#2ecc71';
                        }
                    }
                }
            }
        })
    }
    $scope.changeListHeaderBackground = function (listId) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/edit-list-background.html',
            controller: 'edit-list-backgroundCardJob',
            backdrop: 'static',
            size: '30',
            resolve: {
                para: function () {
                    return listId;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.initData();
        }, function () { });
    }
    $scope.changeListWeightNum = function (listId, weightNum) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/edit-list-weight-num.html',
            controller: 'edit-list-weight-numCardJob',
            backdrop: 'static',
            size: '15',
            resolve: {
                para: function () {
                    return {
                        listId: listId,
                        weightNum: weightNum
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.initData();
        }, function () { });
    }
    $scope.changeListBeginTime = function (listId, beginTime) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/edit-list-beginTime.html',
            controller: 'edit-list-beginTimeCardJob',
            backdrop: 'static',
            size: '15',
            resolve: {
                para: function () {
                    return {
                        ListId: listId,
                        BeginTime: beginTime
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.initData();
        }, function () { });
    }
    $scope.changeListDeadLine = function (listId, deadLine) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/edit-list-deadLine.html',
            controller: 'edit-list-deadLineCardJob',
            backdrop: 'static',
            size: '15',
            resolve: {
                para: function () {
                    return {
                        ListId: listId,
                        Deadline: deadLine
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.initData();
        }, function () { });
    }
    $scope.selectPageList = function () {
        loadListAndCardWithTab();
    }
    $scope.addCard = function (ListCode) {
        if ($scope.addcard.CardName == "" || $scope.addcard.CardName == undefined || $scope.addcard.CardName == null) {
            return App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
        }
        if ($scope.addcard.CardName.trim() == "") {
            return App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
        }
        $scope.addcard.ListCode = ListCode;
        $scope.addcard.ListCodeRelative = $rootScope.listSelectBoardCommon;
        if ($rootScope.show.board) {
            $scope.addcard.TabBoard = 1;
        }
        if ($rootScope.show.groupUser) {
            $scope.addcard.TabBoard = 2;
        }
        if ($rootScope.show.user) {
            $scope.addcard.TabBoard = 3;
        }
        if ($rootScope.show.team) {
            $scope.addcard.TabBoard = 4;
        }
        if ($rootScope.show.project) {
            $scope.addcard.TabBoard = 5;
        }
        if ($rootScope.show.customer) {
            $scope.addcard.TabBoard = 6;
        }
        if ($rootScope.show.contract) {
            $scope.addcard.TabBoard = 7;
        }
        if ($rootScope.show.supplier) {
            $scope.addcard.TabBoard = 8;
        }
        dataserviceCardJob.insertCard($scope.addcard, function (rs) {

            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initData();
                $scope.closeAddCard(ListCode);
                $scope.addcard.CardName = '';
                $rootScope.loadWork(true);
                loadListAndCardWithTab();
            }
        });
    };
    $scope.cardMember = function (cardCode) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
            controller: 'add-group-or-teamCardJob',
            size: '55',
            resolve: {
                obj: function () {
                    return {
                        CardCode: cardCode,
                        Type: 1
                    };
                }
            },
            backdrop: 'static',
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };
    $scope.cardGroupUser = function (cardCode) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
            controller: 'add-group-or-teamCardJob',
            size: '55',
            backdrop: 'static',
            resolve: {
                obj: function () {
                    return {
                        CardCode: cardCode,
                        Type: 2
                    };
                }
            },
        });
        modalInstance.result.then(function (d) {
        }, function () {
        });
    };
    $scope.cardRelative = function (cardCode) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-object-relative.html',
            controller: 'add-object-relativeCardJob',
            size: '70',
            backdrop: 'static',
            keyboard: false,
            resolve: {
                cardCode: function () {
                    return cardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };
    $scope.cardName = function (cardID, cardNameNew) {

        if (cardNameNew == "" || cardNameNew == undefined) {
            App.toastrError(caption.CJ_MSG_PLS_ENTER_TITLE_CARD);
        }
        else {
            var obj = {
                CardID: cardID,
                CardName: cardNameNew
            }
            dataserviceCardJob.updateCardName(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    if (rs.Title != '') {
                        App.toastrSuccess(rs.Title);
                    }
                }
            })
        }

    }
    $scope.cardProgress = function (cardCode) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/edit-progress.html',
            controller: 'edit-progressCardJob',
            size: '15',
            resolve: {
                para: function () {
                    return {
                        CardCode: cardCode,
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };
    $scope.cardChangeBeginTime = function (cardCode, beginTime) {
        dataserviceCardJob.updateBeginTime(cardCode, beginTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
            }
        })
    }
    $scope.cardChangeEndTime = function (cardCode, endTime) {
        dataserviceCardJob.updateEndTime(cardCode, endTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
            }
        })
    }
    $scope.cardChangeDeadLine = function (cardCode, listCode) {
        $scope.cardCodeDeadline = cardCode;
        $scope.listCodeDeadLine = listCode;
    }
    $scope.cardQuantitative = function (cardCode, quantitative) {
        if (quantitative >= 0) {
            dataserviceCardJob.updateQuantitative(cardCode, quantitative, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    if (rs.Title != '') {
                        App.toastrSuccess(rs.Title);
                    }
                }
            })
        } else {
            App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_QUANTITATIVE))
        }
    }
    $scope.cardUnit = function (cardCode, unit) {
        dataserviceCardJob.updateUnit(cardCode, unit, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
            }
        })
    }

    //ui-sortable options 
    var orther = [];
    $scope.sortableOptions = {
        handle: '.task-board',
        activate: function (e, ui) {
            $scope.acticeDrag = true;
        },
        start: function (e, ui) {
            ui.item.addClass('rotate');
            orther = $scope.lists.map(function (i) {
                return i.Order;
            })
        },
        update: function (e, ui) {
            var logEntry = $scope.lists.map(function (i) {
                return i.Order;
            });
        },
        stop: function (e, ui) {
            //console.log(ui);
            $('.ui-sortable-placeholder').css('display', 'none');
            ui.placeholder.removeClass('ui-sortable-placeholder');
            ui.placeholder.removeAttr("visibility").removeAttr("height");
            ui.item.removeClass('rotate');

            var logEntry = $scope.lists.map(function (i) {
                return i.Order;
            });
            dataserviceCardJob.updateOrder(orther, logEntry, function (rs) {
                rs = rs.data;
                if (rs.Error) {

                }
                else {

                }
            });
            $scope.acticeDrag = false;
        }
    };
    $scope.sortableCard = {
        connectWith: ".tag-content",
        start: function (e, ui) {

        },
        stop: function (e, ui) {
            if (ui.item.sortable.droptarget) {
                var CardCode = ui.item.sortable.droptarget.context.id;
                var ListCode = ui.item.sortable.droptarget[0].id;
                dataserviceCardJob.changeListCard(CardCode, ListCode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        //App.toastrSuccess(rs.Title);
                    }
                });
            }
        }
    };
    $scope.gridCard = function (type) {

        $scope.ViewMode = type;
        if ($rootScope.show.groupUser) {
            $scope.selectNodeGroupUser();
        } else {
            $scope.selectBoardCommon();
        }
    };

    //End card detail
    //Hide some control search
    $scope.isTabSumary = true;
    $scope.showControl = function (index) {
        if (index != 0) {
            $scope.isTabSumary = false;
            $rootScope.isTabSumary = false;
            $rootScope.searchObj.ObjTypeCode = "PROJECT";
            dataserviceCardJob.getLastestProject(function (rs) {
                rs = rs.data;
                $rootScope.searchObj.Object = rs;
                dataserviceCardJob.getBoardsWithWorkFlow($rootScope.searchObj.Object, function (rs) {
                    rs = rs.data;
                    $scope.listBoardsGroupWorkFlow = rs;
                })
            })
            dataserviceCardJob.getObjTypeCode($rootScope.searchObj.ObjTypeCode, function (rs) {
                rs = rs.data;
                $scope.listObjWithType = rs;
            });
        } else {
            $scope.isTabSumary = true;
            $rootScope.isTabSumary = true;
            $rootScope.searchObj.ObjTypeCode = "";
            $rootScope.searchObj.Object = ""
        }
    }
    //end hide some search

    //Search advantage
    $rootScope.SearchAdv = function () {
        $rootScope.isShowDetail = false;
        if ($rootScope.SearchAdvMode) {
            $rootScope.SearchAdvMode = false;
        } else {

            $rootScope.show.board = true;
            $rootScope.show.groupUser = false;
            $rootScope.show.user = false;
            $rootScope.show.team = false;
            $rootScope.show.project = false;
            $rootScope.show.customer = false;
            $rootScope.show.contract = false;
            $rootScope.show.supplier = false;

            $rootScope.boardCode = null;
            $rootScope.SearchAdvMode = true;
            dataserviceCardJob.getListUser(function (rs) {
                rs = rs.data;
                $rootScope.listUser = rs;
            })
            dataserviceCardJob.getListProject(function (rs) {
                rs = rs.data;
                $rootScope.listProject = rs;
            })
            dataserviceCardJob.getListCustomer(function (rs) {
                rs = rs.data;
                $rootScope.listCustomer = rs;
            })
            dataserviceCardJob.getListSupplier(function (rs) {
                rs = rs.data;
                $rootScope.getListSupplier = rs;
            })
            dataserviceCardJob.getContractSale(function (rs) {
                rs = rs.data;
                $rootScope.listContract = rs;
            })
            dataserviceCardJob.getDepartment(function (rs) {
                rs = rs.data;
                $rootScope.listDepartment = rs;
            })
            dataserviceCardJob.getListGroupUser("", function (rs) {
                rs = rs.data;
                $rootScope.listGroupUser = rs;
            })
            //loadDataTabBoard()
        }
    }
    $rootScope.searchAdvantage = function () {
        loadDataTabBoard()
    }
    $rootScope.selectUser = function (item) {
        $rootScope.searchAdv.UserName = item.UserName;
    }
    $scope.boardSelect = function (boardCode) {
        $rootScope.searchAdv.ListCode = "";
        dataserviceCardJob.getLists(boardCode, function (rs) {
            rs = rs.data;
            $scope.Lists = rs;
        });
    };
    $rootScope.listSelect = function (board) {
        if (board == "" || board == null || board == undefined) {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_TABLE_WORKING);
        }
    }

    // view help detail
    $scope.viewCmsDetail = function (helpId) {
        //item, bookMark
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderDashBoard + '/viewItem.html',
            controller: 'viewItemHelp',
            backdrop: 'static',
            windowClass: 'message-avoid-header',
            size: '65',
            resolve: {
                para: function () {
                    return {
                        helpId
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    //Show detail job of 1 user
    $rootScope.viewDetailEmployee = function () {
        $rootScope.isCalendar = false;
        if ($rootScope.isShowDetail) {
            $rootScope.isShowDetail = false;
            $rootScope.searchObj.FromDate = '';
            $rootScope.searchObj.ToDate = '';
        } else {
            if ($rootScope.listSelectBoardCommon.length > 1 || $rootScope.listSelectBoardCommon.length <= 0) {
                return App.toastrError(caption.CJ_MSG_PLS_SELECT_EMPLOYEE);
            }
            var date = new Date();
            var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
            var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

            $rootScope.searchObj.FromDate = $filter('date')(firstDay, 'dd/MM/yyyy');
            $rootScope.searchObj.ToDate = $filter('date')(lastDay, 'dd/MM/yyyy');
            $rootScope.isShowDetail = true;
        }
    }

    //hide,show menu
    function openNavCard() {
        if (!$rootScope.open) {
            $rootScope.open = true;
            document.getElementById("mySidenav").style.width = "345px";
            document.getElementById("BoardDetail").style.paddingLeft = "330px";
            //document.getElementById('navbar-menu').style.paddingLeft = "325px";
        }
        else {
            closeNavCard();
        }
    }
    function closeNavCard() {
        $rootScope.open = false;
        document.getElementById("mySidenav").style.width = "0";
        document.getElementById("BoardDetail").style.paddingLeft = "15px";
        //document.getElementById('navbar-menu').style.paddingLeft = "0px";
        document.body.style.backgroundColor = "white";
        //document.getElementById('checkInOut').style.paddingLeft = "325px";
    }
    function openMenu() {
        $.app.menu.expanded = false;
        $.app.menu.expand();
    }
    function closeMenu() {
        $.app.menu.collapsed = false;
        $.app.menu.toggle();
    }

    //setting
    function setHeightBoard() {
        var $menu = $('#navbar-menu');
        var $header = $('.nav-header .btn-group');
        var $searchBoard = $('.nav-search input');
        var $footer = $('.nav-footer');

        var menu = $menu.height();
        var header = $header[0].offsetHeight;
        var searchBoard = $searchBoard[0].offsetHeight;
        var footer = $footer.height();
        var height = $window.innerHeight - (menu + header + searchBoard + footer) - 25;
        $('#list-board').css({
            "height": "85vh",
            'overflow-y': 'scroll'
        });
    }
    function setHeightBoardCommom() {
        var $menu = $('#navbar-menu');
        var $header = $('.nav-header .btn-group');
        var $searchBoard = $('.nav-search input');
        var $footer = $('.nav-footer');
        var $headerBody = $('.board-header-commom');

        var menu = $menu.height();
        var header = $header[0].offsetHeight;
        var searchBoard = $searchBoard[0].offsetHeight;
        var footer = $footer.height();
        var headerBody = $headerBody[0].offsetHeight;
        var height = $window.innerHeight - (menu + header + searchBoard + footer + headerBody) - 25;
        $('#list-board-commom').css({
            "height": "78vh",
            'overflow-y': 'scroll'
        });
    }
    function loadDate() {
        setTimeout(function () {
            $(".startDate").datepicker({
                inline: false,
                autoclose: true,
                format: "dd/mm/yyyy",
                fontAwesome: true,
            }).on('changeDate', function (selected) {
                var maxDate = new Date(selected.date.valueOf());
                $('.endDate').datepicker('setStartDate', maxDate);
            });
            $(".endDate").datepicker({
                inline: false,
                autoclose: true,
                format: "dd/mm/yyyy",
                fontAwesome: true,
            }).on('changeDate', function (selected) {
                var maxDate = new Date(selected.date.valueOf());
                $('.startDate').datepicker('setEndDate', maxDate);
            });
            $(".cardDetailLine").datepicker({
                inline: false,
                autoclose: true,
                format: "dd/mm/yyyy",
                dateFormat: "dd/mm/yyyy",
                fontAwesome: true,
            }).on('changeDate', function (selected) {
                var deadLine = $filter('date')(selected.date.valueOf(), "dd/MM/yyyy");
                dataserviceCardJob.updateDeadLine($scope.cardCodeDeadline, deadLine, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        var getList = $scope.lists.find(function (element) {
                            if (element.ListCode == $scope.listCodeDeadLine) return true;
                        });
                        if (getList) {
                            var getCard = getList.ListCard.find(function (element) {
                                if (element.CardCode == $scope.cardCodeDeadline) return true;
                            });
                            if (getCard) {
                                getCard.Deadline = deadLine;
                            }
                        }
                        App.toastrSuccess(rs.Title);
                    }
                })
            });

        }, 100);
    }
    function loadDateSearch() {
        //search
        $.fn.datepicker.defaults.language = 'vi';
        $('#FromDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy',
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#ToDate').datepicker('setStartDate', maxDate);
        });
        $('#ToDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy',
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#FromDate').datepicker('setEndDate', maxDate);
        });

        $('#FromDateAdv').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy',
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#ToDateAdv').datepicker('setStartDate', maxDate);
        });
        $('#ToDateAdv').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy',
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#FromDateAdv').datepicker('setEndDate', maxDate);
        });
    }
    function resetDateSearch() {
        $('#FromDate').datepicker('setEndDate', null);
        $('#ToDate').datepicker('setStartDate', null);
    }
    function treeContextMenu(node) {
        var items = {
            'item1': {
                'label': 'Giao việc',
                'icon': 'fab fa-trello',
                'action': function () {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/add-card-normal.html',
                        controller: 'add-card-normalCardJob',
                        backdrop: 'static',
                        size: '35',
                        resolve: {
                            para: function () {
                                return $rootScope.listSelectBoardCommon;
                            }
                        }

                    });
                    modalInstance.result.then(function (d) {
                        d.Object.BeginTime = d.Object.BeginTime != '' ? $filter('date')(d.Object.BeginTime, 'dd/MM/yyyy') : '';
                        d.Object.EndTime = d.Object.EndTime != '' ? $filter('date')(d.Object.EndTime, 'dd/MM/yyyy') : '';
                        d.Object.Deadline = d.Object.Deadline != '' ? $filter('date')(d.Object.Deadline, 'dd/MM/yyyy') : '';
                        d.Object.Status = '';
                        //$scope.cards[d.ListCode].push(d.Object);
                        loadDate();
                    }, function () { });
                }
            },
        }

        return items;
    }
    //loadData
    function loadListAndCardWithTab() {
        //tab group user
        if ($rootScope.show.groupUser) {
            loadDataTabGroupUserListAndCard();
        }
        //tab user
        if ($rootScope.show.user) {
            loadDataTabUserListAndCard();
        }
        //tab board
        if ($rootScope.show.board) {
            loadDataTabBoard();
        }
        //tab team
        if ($rootScope.show.team) {
            loadDataTabTeamListAndCard();
        }
        //tab project
        if ($rootScope.show.project) {
            loadDataTabProjectListAndCard();
        }
        //tab customer
        if ($rootScope.show.customer) {
            loadDataTabCustomerListAndCard();
        }
        //tab contract
        if ($rootScope.show.contract) {
            loadDataTabContractListAndCard();
        }
        //tab supplier
        if ($rootScope.show.supplier) {
            loadDataTabSupplierListAndCard();
        }
        if ($scope.ViewMode == 0) {
            var TabBoard = 0;
            if ($rootScope.show.board) {
                TabBoard = 1;
            }
            if ($rootScope.show.groupUser) {
                TabBoard = 2;
            }
            if ($rootScope.show.user) {
                TabBoard = 3;
            }
            if ($rootScope.show.team) {
                TabBoard = 4;
            }
            if ($rootScope.show.project) {
                TabBoard = 5;
            }
            if ($rootScope.show.customer) {
                TabBoard = 6;
            }
            if ($rootScope.show.contract) {
                TabBoard = 7;
            }
            if ($rootScope.show.supplier) {
                TabBoard = 8;
            }
            var data = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                BoardCode: $rootScope.boardCode,
                CardName: $rootScope.searchObj.CardName,
                Fromdate: $rootScope.searchObj.FromDate,
                Todate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                ObjType: $rootScope.searchObj.ObjTypeCode,
                TabBoard: TabBoard
            }
            dataserviceCardJob.getCountCard(data, function (rs) {
                rs = rs.data;
                $rootScope.CountCard = rs;
            })
        }
    }

    function loadDataTabGroupUserListAndCard() {

        if ($scope.ViewMode == 0) {
            var dataSearch = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                Length: $rootScope.listAndCard.Length,
                Page: $rootScope.listAndCard.CurrentPage,
                CardName: $rootScope.searchObj.CardName,
                FromDate: $rootScope.searchObj.FromDate,
                ToDate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                CurrentPageList: currentPageList,
            }

            var data = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                BoardCode: $rootScope.boardCode,
                CardName: $rootScope.searchObj.CardName,
                Fromdate: $rootScope.searchObj.FromDate,
                Todate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                ObjType: $rootScope.searchObj.ObjTypeCode,
                TabBoard: 2
            }
            dataserviceCardJob.getCardWithDepartment(dataSearch, function (rs) {
                rs = rs.data;

                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = rs.Total;
                loadDate();
            })
            dataserviceCardJob.getCountCard(data, function (rs) {
                rs = rs.data;
                $rootScope.CountCard = rs;
            })
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
        }
    }

    function loadDataTabBoard() {
        setHeightBoard();
        dataserviceCardJob.getBoardDetail($rootScope.boardCode, $rootScope.searchObj.Object, function (rs) {
            rs = rs.data;
            $scope.modelDetail = rs;
        });

        if ($scope.ViewMode == 0) {
            var dataSearch = {};
            currentPageList = 1;
            if (!$rootScope.SearchAdvMode) {
                dataSearch = {
                    Length: $rootScope.listAndCard.Length,
                    Page: $rootScope.listAndCard.CurrentPage,
                    BoardCode: $rootScope.boardCode,
                    CardName: $rootScope.searchObj.CardName,
                    FromDate: $rootScope.searchObj.FromDate,
                    ToDate: $rootScope.searchObj.ToDate,
                    Status: $rootScope.searchObj.Status,
                    Object: $rootScope.searchObj.Object,
                    BranchId: $rootScope.searchObj.BranchId,
                    CurrentPageList: currentPageList,
                }
            }
            else {
                dataSearch = {
                    Length: $rootScope.listAndCard.Length,
                    Page: $rootScope.listAndCard.CurrentPage,
                    BoardCode: $rootScope.boardCode,
                    CardName: $rootScope.searchAdv.CardName,
                    FromDate: $rootScope.searchAdv.FromDate,
                    ToDate: $rootScope.searchAdv.ToDate,
                    Status: $rootScope.searchObj.Status,
                    BranchId: $rootScope.searchAdv.BranchId,
                    Supplier: $rootScope.searchAdv.Supplier,
                    Contract: $rootScope.searchAdv.Contract,
                    Customer: $rootScope.searchAdv.Customer,
                    Project: $rootScope.searchAdv.Project,
                    Group: $rootScope.searchAdv.Group,
                    UserId: $rootScope.searchAdv.UserId,
                    Department: $rootScope.searchAdv.Department,
                    UserName: $rootScope.searchAdv.UserName,
                    BoardSearch: $rootScope.searchAdv.BoardCode,
                }
            }
            dataserviceCardJob.getListsAndCard(dataSearch, function (rs) {
                rs = rs.data;
                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = (rs.Total % $rootScope.listAndCard.Length == 0) ? rs.Total + 1 : rs.Total;
                loadDate();
            });
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
            else {
                $scope.boardCommom();
            }
        }
    }

    function loadDataTabUser() {
        $scope.listBoardCommon = [];
        var page = ($scope.listBoardCommon.length / $scope.show.length) + 1;
        dataserviceCardJob.getListPageUser(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
            rs = rs.data;

            $scope.listBoardCommon = rs.ListData;
            $scope.totalBoardCommon = rs.Total;
            $scope.tabCommon = rs.Tab;
            $scope.iconCommon = rs.Icon;
            setHeightBoardCommom();
            $scope.checkAllCommonAuto();
            loadDataTabUserListAndCard();
        });
    }
    function loadDataTabUserListAndCard() {
        if ($scope.ViewMode == 0) {
            var dataSearch = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                Length: $rootScope.listAndCard.Length,
                Page: $rootScope.listAndCard.CurrentPage,
                CardName: $rootScope.searchObj.CardName,
                FromDate: $rootScope.searchObj.FromDate,
                ToDate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                CurrentPageList: currentPageList,
            }
            dataserviceCardJob.getCardWithUser(dataSearch, function (rs) {
                rs = rs.data;
                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = rs.Total;
                loadDate();
            })
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
        }
    }

    function loadDataTabTeam() {
        $scope.listBoardCommon = [];
        var page = ($scope.listBoardCommon.length / $scope.show.length) + 1;
        dataserviceCardJob.getListGroupUserPage(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
            debugger
            rs = rs.data;
            $scope.listBoardCommon = rs.ListData;
            $scope.totalBoardCommon = rs.Total;
            $scope.tabCommon = rs.Tab;
            $scope.iconCommon = rs.Icon;
            setHeightBoardCommom();
            $scope.checkAllCommonAuto();
            loadDataTabTeamListAndCard();
        });
    }
    function loadDataTabTeamListAndCard() {

        if ($scope.ViewMode == 0) {
            var dataSearch = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                Length: $rootScope.listAndCard.Length,
                Page: $rootScope.listAndCard.CurrentPage,
                CardName: $rootScope.searchObj.CardName,
                FromDate: $rootScope.searchObj.FromDate,
                ToDate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
            }
            dataserviceCardJob.getCardWithGroupUser(dataSearch, function (rs) {
                rs = rs.data;
                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = rs.Total;
                loadDate();
            })
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
        }
    }

    function loadDataTabProject() {
        $scope.listBoardCommon = [];
        var page = ($scope.listBoardCommon.length / $scope.show.length) + 1;
        dataserviceCardJob.getListPageProject(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
            rs = rs.data;
            $scope.listBoardCommon = rs.ListData;
            $scope.totalBoardCommon = rs.Total;
            $scope.tabCommon = rs.Tab;
            $scope.iconCommon = rs.Icon;
            setHeightBoardCommom();
            $scope.checkAllCommonAuto();
            loadDataTabProjectListAndCard();
        });
    }
    function loadDataTabProjectListAndCard() {
        if ($scope.ViewMode == 0) {
            var dataSearch = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                Length: $rootScope.listAndCard.Length,
                Page: $rootScope.listAndCard.CurrentPage,
                CardName: $rootScope.searchObj.CardName,
                FromDate: $rootScope.searchObj.FromDate,
                ToDate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                CurrentPageList: currentPageList,
            }
            dataserviceCardJob.getCardWithProject(dataSearch, function (rs) {
                rs = rs.data;
                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = rs.Total;
                loadDate();
            })
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
        }
    }

    function loadDataTabCustomer() {
        $scope.listBoardCommon = [];
        var page = ($scope.listBoardCommon.length / $scope.show.length) + 1;
        dataserviceCardJob.getListPageCustomer(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
            rs = rs.data;
            $scope.listBoardCommon = rs.ListData;
            $scope.totalBoardCommon = rs.Total;
            $scope.tabCommon = rs.Tab;
            $scope.iconCommon = rs.Icon;
            setHeightBoardCommom();
            $scope.checkAllCommonAuto();
            loadDataTabCustomerListAndCard();
        });
    }
    function loadDataTabCustomerListAndCard() {
        if ($scope.ViewMode == 0) {
            var dataSearch = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                Length: $rootScope.listAndCard.Length,
                Page: $rootScope.listAndCard.CurrentPage,
                CardName: $rootScope.searchObj.CardName,
                FromDate: $rootScope.searchObj.FromDate,
                ToDate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                CurrentPageList: currentPageList,
            }
            dataserviceCardJob.getCardWithCustomer(dataSearch, function (rs) {
                rs = rs.data;
                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = rs.Total;
                loadDate();
            })
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
        }
    }

    function loadDataTabContract() {
        $scope.listBoardCommon = [];
        var page = ($scope.listBoardCommon.length / $scope.show.length) + 1;
        dataserviceCardJob.getListPageContract(page, $rootScope.show.length, $scope.searchKey.BoardName, function (rs) {
            rs = rs.data;
            $scope.listBoardCommon = rs.ListData;
            $scope.totalBoardCommon = rs.Total;
            $scope.tabCommon = rs.Tab;
            $scope.iconCommon = rs.Icon;
            setHeightBoardCommom();
            $scope.checkAllCommonAuto();
            loadDataTabContractListAndCard();
        });
    }
    function loadDataTabContractListAndCard() {
        if ($scope.ViewMode == 0) {
            var dataSearch = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                Length: $rootScope.listAndCard.Length,
                Page: $rootScope.listAndCard.CurrentPage,
                CardName: $rootScope.searchObj.CardName,
                FromDate: $rootScope.searchObj.FromDate,
                ToDate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                CurrentPageList: currentPageList,
            }
            dataserviceCardJob.getCardWithContract(dataSearch, function (rs) {
                rs = rs.data;
                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = rs.Total;
                loadDate();
            })
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
        }
    }
    $scope.checkAllCommon = function () {
        if ($scope.isCheck) {
            $scope.isCheck = false;
            if ($scope.listBoardCommon.length > 0) {
                for (var i = 0; i < $scope.listBoardCommon.length; i++) {
                    $scope.listBoardCommon[i].IsCheck = false;
                }
            }
        }
        else {
            $scope.isCheck = true;
            if ($scope.listBoardCommon.length > 0) {
                for (var i = 0; i < $scope.listBoardCommon.length; i++) {
                    $scope.listBoardCommon[i].IsCheck = true;
                }
            }
        }
        var lengthChecked = $scope.listBoardCommon.filter(function (obj, index) {
            return obj.IsCheck;
        });
        $rootScope.listSelectBoardCommon = lengthChecked;
        $rootScope.totalSelectBoardCommon = lengthChecked.length;
        loadListAndCardWithTab();
    }
    $scope.checkAllCommonAuto = function () {
        if ($scope.isCheck) {
            $scope.isCheck = false;
            if ($scope.listBoardCommon.length > 0) {
                for (var i = 0; i < $scope.listBoardCommon.length; i++) {
                    $scope.listBoardCommon[i].IsCheck = false;
                }
            }
        }
        else {
            $scope.isCheck = true;
            if ($scope.listBoardCommon.length > 0) {
                for (var i = 0; i < $scope.listBoardCommon.length; i++) {
                    $scope.listBoardCommon[i].IsCheck = true;
                }
            }
        }
        var lengthChecked = $scope.listBoardCommon.filter(function (obj, index) {
            return obj.IsCheck;
        });
        $rootScope.listSelectBoardCommon = lengthChecked;
        $rootScope.totalSelectBoardCommon = lengthChecked.length;
    }

    function loadDataTabSupplier() {
        $scope.listBoardCommon = [];
        var page = ($scope.listBoardCommon.length / $scope.show.length) + 1;
        dataserviceCardJob.getListPageSupplier(page, $scope.show.length, $scope.searchKey.BoardName, function (rs) {
            rs = rs.data;
            $scope.listBoardCommon = rs.ListData;
            $scope.totalBoardCommon = rs.Total;
            $scope.tabCommon = rs.Tab;
            $scope.iconCommon = rs.Icon;
            setHeightBoardCommom();
            $scope.checkAllCommonAuto();
            loadDataTabSupplierListAndCard();
        });
    }
    function loadDataTabSupplierListAndCard() {
        if ($scope.ViewMode == 0) {
            var dataSearch = {
                ListObjCode: $rootScope.listSelectBoardCommon,
                Length: $rootScope.listAndCard.Length,
                Page: $rootScope.listAndCard.CurrentPage,
                CardName: $rootScope.searchObj.CardName,
                FromDate: $rootScope.searchObj.FromDate,
                ToDate: $rootScope.searchObj.ToDate,
                Status: $rootScope.searchObj.Status,
                Object: $rootScope.searchObj.Object,
                BranchId: $rootScope.searchObj.BranchId,
                CurrentPageList: currentPageList,
            }
            dataserviceCardJob.getCardWithSupplier(dataSearch, function (rs) {
                rs = rs.data;
                $scope.lists = rs.Data;
                $rootScope.listAndCard.Total = rs.Total;
                loadDate();
            })
        } else {
            if ($rootScope.reloadGridCard) {
                $rootScope.reloadGridCard();
            }
        }
    }
    setTimeout(function () {
        loadDateSearch();
    }, 3000);
    $(document).ready(function (e) {
        $('.content-wrapper').css("height", "100%");
        $('#contentMain').css("height", "100%");
        $('.container-fluid').not('.board-detail').css("height", "100%");

        $.app.menu.expanded = true;
        $.app.menu.collapsed = false;
        $.app.menu.toggle();
        $(".menu-toggle").click(function (e) {
            if ($.app.menu.collapsed) {
                $.app.menu.expanded = false;
                $.app.menu.expand();
                closeNavCard();
            } else {
                $.app.menu.collapsed = false;
                $.app.menu.toggle();
                closeNavCard();
            }
            e.stopImmediatePropagation();
        });
        $("#btnOpenTrello").click(function (e) {
            e.preventDefault();
            if ($.app.menu.expanded) {
                $.app.menu.toggle();
            }
            openNavCard();
            e.stopImmediatePropagation();
        });
    });
    angular.element($window).bind('resize', function () {
        if ($window.innerWidth > 975 && $window.innerWidth < 1295) {
            $rootScope.listAndCard.Length = 2;
        }
        else if ($window.innerWidth > 1295 && $window.innerWidth < 1595) {
            $rootScope.listAndCard.Length = 3;
        } else if ($window.innerWidth > 1595 && $window.innerWidth < 1915) {
            $rootScope.listAndCard.Length = 4;
        }
        else if ($window.innerWidth > 1915 && $window.innerWidth < 2235) {
            $rootScope.listAndCard.Length = 5;
        } else if ($window.innerWidth > 2235) {
            $rootScope.listAndCard.Length = 6;
        }
    });
    $rootScope.loadListAndCardWithTab = function () {
        loadListAndCardWithTab();
    }
    $rootScope.loadWork = function (increase) {
        for (var i = 0; i < $scope.listBoardCommon.length; i++) {
            if ($scope.listBoardCommon[i].IsCheck) {
                if (increase) {
                    $scope.listBoardCommon[i].CountWork = $scope.listBoardCommon[i].CountWork + 1;
                } else {
                    $scope.listBoardCommon[i].CountWork = $scope.listBoardCommon[i].CountWork - 1;
                }
            }
        }
    }

    $scope.showPercent = function (type, code) {
        for (var i = 0; i < $scope.listBoardCommon.length; i++) {
            if ($scope.listBoardCommon[i].Code == code) {
                $scope.listBoardCommon[i].IsShowPercent = true;
                dataserviceCardJob.getPercentObject(code, type, function (rs) {
                    rs = rs.data;
                    $scope.listBoardCommon[i].PercentObject = rs;
                })
                break;
            }
        }
    }

    //Show, hide nav-left
    $scope.showNavLeft = true;
    $scope.navLeft = function () {
        if ($scope.showNavLeft) {
            $scope.showNavLeft = false;
            document.getElementById("mySidenav").style.width = "0px";
            document.getElementById("BoardDetail").style.paddingLeft = "0px";
        }
        else {
            $scope.showNavLeft = true;
            document.getElementById("mySidenav").style.width = "345px";
            document.getElementById("BoardDetail").style.paddingLeft = "330px";
        }
    }

    function updateNotify() {
        dataserviceCardJob.getCountNotify(function (rs) {
            rs = rs.data;
            document.getElementById("countCardWork").innerText = "Bạn có " + rs.CountWork + " công việc mới.";
            document.getElementById("countAllNotifyNew").innerText = rs.All;
            document.getElementById("allNotifyNew").innerText = rs.All + " mới";
        })
    }
});

app.controller('grid-cardCardJob', function ($scope, $rootScope, $compile, $filter, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, dataserviceCardJob) {
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    //Khai báo số lượng
    $rootScope.status_all = 0;
    $rootScope.status_pending = 0;
    $rootScope.status_new = 0;
    $rootScope.status_complete = 0;
    $rootScope.status_cancel = 0;
    $rootScope.status_trash = 0;

    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CardJob/GetGridCard",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#board-detail-body",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {

                if (!$rootScope.SearchAdvMode) {
                    d.ListObjCode = $rootScope.listSelectBoardCommon;
                    d.BoardCode = $rootScope.boardCode;
                    d.CardName = $rootScope.searchObj.CardName;
                    d.Fromdate = $rootScope.searchObj.FromDate;
                    d.Todate = $rootScope.searchObj.ToDate;
                    d.Status = $rootScope.searchObj.Status;
                    d.Object = $rootScope.searchObj.Object;
                    d.BranchId = $rootScope.searchObj.BranchId;
                    d.ObjType = $rootScope.searchObj.ObjTypeCode;
                    d.WorkflowInstCode = $rootScope.searchObj.WorkflowInstCode;
                } else {
                    d.BoardCode = $rootScope.boardCode;
                    d.CardName = $rootScope.searchAdv.CardName;
                    d.FromDate = $rootScope.searchAdv.FromDate;
                    d.ToDate = $rootScope.searchAdv.ToDate;
                    d.Status = $rootScope.searchAdv.Status;
                    d.BranchId = $rootScope.searchAdv.BranchId;
                    d.Supplier = $rootScope.searchAdv.Supplier;
                    d.Contract = $rootScope.searchAdv.Contract;
                    d.Customer = $rootScope.searchAdv.Customer;
                    d.Project = $rootScope.searchAdv.Project;
                    d.Group = $rootScope.searchAdv.Group;
                    d.UserId = $rootScope.searchAdv.UserId;
                    d.Department = $rootScope.searchAdv.Department;
                    d.UserName = $rootScope.searchAdv.UserName;
                    d.BoardSearch = $rootScope.searchAdv.BoardCode;
                    d.ListCode = $rootScope.searchAdv.ListCode;
                    d.TimeType = $rootScope.searchAdv.TimeType.length > 0 ? $rootScope.searchAdv.TimeType.join(', ') : '';
                }

                if ($rootScope.show.board) {
                    d.TabBoard = 1;
                }
                if ($rootScope.show.groupUser) {
                    d.TabBoard = 2;
                }
                if ($rootScope.show.user) {
                    d.TabBoard = 3;
                }
                if ($rootScope.show.team) {
                    d.TabBoard = 4;
                }
                if ($rootScope.show.project) {
                    d.TabBoard = 5;
                }
                if ($rootScope.show.customer) {
                    d.TabBoard = 6;
                }
                if ($rootScope.show.contract) {
                    d.TabBoard = 7;
                }
                if ($rootScope.show.supplier) {
                    d.TabBoard = 8;
                }
            },
            complete: function (d) {
                App.unblockUI("#board-detail-body");
                $(".dataTables_scrollBody").addClass('scroller-sm-fade');
                heightTableAuto();
                var TabBoard = 0;

                if ($rootScope.show.board) {
                    TabBoard = 1;
                }
                if ($rootScope.show.groupUser) {
                    TabBoard = 2;
                }
                if ($rootScope.show.user) {
                    TabBoard = 3;
                }
                if ($rootScope.show.team) {
                    TabBoard = 4;
                }
                if ($rootScope.show.project) {
                    TabBoard = 5;
                }
                if ($rootScope.show.customer) {
                    TabBoard = 6;
                }
                if ($rootScope.show.contract) {
                    TabBoard = 7;
                }
                if ($rootScope.show.supplier) {
                    TabBoard = 8;
                }
                var data = {
                    ListObjCode: $rootScope.listSelectBoardCommon,
                    BoardCode: $rootScope.boardCode,
                    CardName: $rootScope.searchObj.CardName,
                    Fromdate: $rootScope.searchObj.FromDate,
                    Todate: $rootScope.searchObj.ToDate,
                    Status: $rootScope.searchObj.Status,
                    Object: $rootScope.searchObj.Object,
                    BranchId: $rootScope.searchObj.BranchId,
                    ObjType: $rootScope.searchObj.ObjTypeCode,
                    WorkflowInstCode: $rootScope.searchObj.WorkflowInstCode,
                    TabBoard: TabBoard
                };
                var page = 0;

                var table = $('#tblData').DataTable();

                table.on('order', function () {
                    if (table.page() !== page) {
                        table.page(page).draw('page');
                    }
                });

                table.on('page', function () {
                    page = table.page();
                });
                dataserviceCardJob.getCountCard(data, function (rs) {
                    rs = rs.data;
                    $rootScope.CountCard = rs;
                })
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(pageLength)
        .withOption('order', [0, 'asc'])
        .withFixedHeader({
            bottom: true
        })
        .withOption('serverSide', true)
        //.withOption('scrollY', "62vh")
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('rowCallback', function (row, data) {
            if (data.BoardType == "BOARD_REGULARLY") {
                $(row).addClass('row-board-regularly');
            }
            else if (data.IsRead == 'False') {
                $(row).addClass('row-no-read');
            }
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            $compile(angular.element(row))($scope);
            $(row).find('td:not(:has(label.mt-checkbox))').on('dblclick', function (evt) {
                if (evt.target.localName == 'input' && evt.target.type == 'checkbox') {

                } else {
                    console.log(data.CardCode);
                    $rootScope.CardCode = data.CardCode;
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + "/add-card-buffer.html",
                        controller: 'edit-cardCardJob',
                        size: '75',
                        keyboard: false,
                        backdrop: 'static',
                        resolve: {
                            para: function () {
                                return data.CardCode;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        if ($rootScope.isDataChanged) {
                            $rootScope.reloadGridCard();
                        }
                        updateNotify();
                    }, function () {
                        if ($rootScope.isDataChanged) {
                            $rootScope.reloadGridCard();
                        }
                    });
                }
            });
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("CardID").withTitle(titleHtml).notSortable().renderWith(function (data, type, full, meta) {
        $scope.selected[full.id] = false;

        return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.id + ']" ng-click="toggleOne(selected)"/><span></span></label>';
    }).withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CardName').withTitle('<i class="fa fa-paper-plane mr5"></i>{{"CJ_COL_CARD_NAME" | translate}}').renderWith(function (data, type, full) {
        var deadLine = '';
        var workType = "";
        var priority = "";
        var updateTimeTxt = "";
        var showLadbelApprove = "";
        var groupAssign = "";
        var departmentAssign = "";
        var wfName = "";
        var actName = "";
        if (full.DepartmentAssign != "") {
            departmentAssign = '<br/><span class="fs9 black">' + caption.CJ_CURD_BTN_DEPARTMENT + ': ' + full.DepartmentAssign + '</span>'
        }
        if (full.GroupAssign != "") {
            groupAssign = '<br/><span class="fs9 black">' + caption.CJ_CURD_BTN_TEAM + ': ' + full.GroupAssign + '</span>'
        }
        if (full.IsShowLabelAssign == 'True') {
            showLadbelApprove = '</br><img src="/images/default/icon-warning.gif" style = "width: 17px; height: 17px;"/><span class="fs9 blink">' + caption.CJ_LBL_APPROVE_EMP + ' ! </span>'
        }

        if (full.WfName != "") {
            wfName = '<br/><span class="fs9">' + '<span style="color: green;">' + caption.CJ_LBL_WF + ': </span>' + full.WfName + '</span>'
        }
        if (full.ActName != "") {
            var instName = full.ActName.length > 40 ? full.ActName.substr(0, 40) + " ..." : full.ActName;
            actName = '; <span role="button" class="fs9" title="' + full.ActName + '"><span style="color: green;">' + caption.CJ_TXT_ACTIVITY + ': </span>' + instName + '</span>'
        }

        var cardName = data.length > 40 ? data.substr(0, 40) + " ..." : data;
        if (full.UpdateTime != null && full.UpdateTime != "" && full.UpdateTime != undefined) {

            var updateText = $filter('date')(full.UpdateTime, 'dd/MM/yyyy HH:mm:ss')
            updateTimeTxt = '<span class="fs9 black">' + caption.CJ_LBL_UPDATE_TIME + ': ' + updateText + '</span>'

            var updated = new Date(full.UpdateTime);
            var currentTime = new Date();
            var diffMsUpdate = (updated - currentTime);
            var diffDayUpdated = Math.floor((diffMsUpdate / 86400000));
            if (diffDayUpdated == -1) {
                var diffHrsUpdate = Math.floor((diffMsUpdate % 86400000) / 3600000);
                if (diffHrsUpdate < 10) {
                    cardName = '<span style = "color: #9406b7">' + cardName + '</span>'
                }
            }
        }
        if (full.WorkType != "") {
            workType = '<span class="fs9 mr-1" style="color: #048004;">' + caption.CJ_LBL_WORK_TYPE + ': ' + full.WorkType + '</span><br/>'
        }
        if (full.Priority != "") {
            priority = '<span class="badge-customer badge-customer-success ml-1">' + full.Priority + '</span>'
        }
        if (full.Deadline == '') {
            deadLine = '<span class="badge-customer badge-customer-success fs9 ml5">{{"CJ_LBL_NO_SET_DEADLINE" | translate}}</span>'
        }
        else {
            if (full.Status != 'Thẻ rác' && full.Status != 'Đóng' && full.Status != 'Bị hủy' && full.Status != 'Hoàn thành') {
                var created = new Date(full.Deadline);
                var now = new Date();
                var diffMs = (created - now);
                var diffDay = Math.floor((diffMs / 86400000));
                if ((diffDay + 1) < 0) {
                    deadLine = '<span class="badge-customer badge-customer-danger fs9 ml5">' + caption.CJ_LBL_TIME_OUT + '</span>';
                } else if ((diffDay + 1) > 0) {
                    deadLine = '<span class="badge-customer badge-customer-success fs9 ml5">' + caption.CJ_LBL_STILL_DATE + ' ' + (diffDay + 1) + ' ' + caption.CJ_LBL_DAY + '</span>'
                } else {
                    var end = new Date(new Date().setHours(23, 59, 59, 999));
                    var diffMs1 = (end - now);
                    var diffHrs = Math.floor((diffMs1 % 86400000) / 3600000);
                    var diffMins = Math.round(((diffMs1 % 86400000) % 3600000) / 60000);
                    deadLine = '<span class="badge-customer badge-customer-success fs9 ml5">' + caption.CJ_LBL_STILL_DATE + ' ' + diffHrs + 'h ' + diffMins + 'p</span>'
                }
            }
        }
        var lastActivity = '';
        if (full.LastActivity != '' && full.LastActivity != null && full.LastActivity != undefined) {
            var lastAct = JSON.parse(full.LastActivity);
            lastActivity += '<span class="active-time">';
            lastActivity += '(<b class="ng-binding">' + lastAct.GivenName + '</b> ';
            if (lastAct.Action == 'REVIEW') {
                lastActivity += '<span>{{\'CJ_STATUS_VIEWED\' | translate}}</span>';
            }
            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'ITEMCHECK') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_ITEM_CREATE\' | translate}}</span>';
            }
            if (lastAct.Action == 'UPDATE' && lastAct.IdObject == 'ITEMCHECK') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_UPDATE\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'ITEMCHECK') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_DEL_ITEM\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'CMT') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_CREATE_CMT\' | translate}}</span>';
            }
            if (lastAct.Action == 'UPDATE' && lastAct.IdObject == 'CMT') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_UPDATE\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'CMT') {
                lastActivity += '<span class="text-danger blink">{{\'CL_LBL_LOG_DEL_CMT\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'FILE') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_UPLOAD_FILE\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'FILE') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_DEL_FILE\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'ITEMWORK') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_RPT_PROGRESS\' | translate}}</span>';
            }
            if (lastAct.Action == 'UPDATE' && lastAct.IdObject == 'ITEMWORK') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_UPDATE\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'ITEMWORK') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_DEL_PROGRESS\' | translate}}</span>';
            }
            if (lastAct.Action == 'LEADER' && lastAct.IdObject == 'ITEMWORK') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_EVALUATE_PROGRESS\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'SUBITEM') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_ADD_SUB_ITEM\' | translate}}</span>';
            }
            if (lastAct.Action == 'UPDATE' && lastAct.IdObject == 'SUBITEM') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_UPDATE\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'SUBITEM') {
                lastActivity += '<span class="text-danger blink">{{\'CL_LBL_DEL_SUB_ITEM\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'ADDR') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_ADD_ADDRESS\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'ADDR') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_DEL_ADDRESS\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'PROD') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_ADD_PROD\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'PROD') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_DEL_PROD\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'CARDLINK') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_ADD\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'CARDLINK') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_DEL\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'SER') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_ADD_SER\' | translate}}</span>';
            }
            if (lastAct.Action == 'DELETE' && lastAct.IdObject == 'SER') {
                lastActivity += '<span class="text-danger blink">{{\'CJ_LBL_LOG_DEL_SER\' | translate}}</span>';
            }

            if (lastAct.Action == 'ADD' && lastAct.IdObject == 'ADD_MEMBER') {
                lastActivity += '<span class="text-success blink">{{\'CJ_LBL_LOG_CREATE_CMT\' | translate}}</span>';
            }
            if (lastAct.Action == 'REJECT') {
                lastActivity += '<span class="blink' + (lastAct.IsCheck ? ' text-danger' : '') + '">' + (lastAct.IsCheck ? ' đã từ chối' : 'đã bỏ từ chối') + '</span>';
            }
            if (lastAct.Action == 'ACCEPT') {
                lastActivity += '<span class="blink' + (lastAct.IsCheck ? ' text-danger' : '') + '">' + (lastAct.IsCheck ? 'đã đồng ý' : 'đã bỏ đồng ý') + '</span>';
            }
            lastActivity += '</span>';
            if (lastAct.ChangeDetails != '' && lastAct.ChangeDetails != null && lastAct.ChangeDetails != undefined) {
                lastActivity += '<span class="active-body">';
                if (lastAct.ChangeDetails.length > 60) {
                    lastActivity += '<span class="mb5"> ' + lastAct.ChangeDetails.substr(0, 40) + '...</span>';
                }
                else {
                    lastActivity += '<span class="mb5"> ' + lastAct.ChangeDetails + '</span>';
                }
                lastActivity += ')</span>';
            }
            else {
                lastActivity += ')';
            }
        }
        if (full.Status == 'Hoàn thành') {
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                cardName +
                '<div class="pt5"><span class="badge-customer badge-customer-success fs9" style="width:95px;">&nbsp;' + caption.CJ_LBL_SUCCESS + '</span>' + priority +
                '</div>' + '<div class= "pt5">' + workType + updateTimeTxt + showLadbelApprove + lastActivity + departmentAssign + groupAssign + wfName + actName + '</div>';
        }
        else if (full.Status == 'Đang triển khai') {
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                '<span> ' + cardName + '</span >' +
                '<div class="pt5"><span class="badge-customer badge-customer-danger" style="width:95px;">&nbsp;' + caption.CJ_LBL_PENDING + '</span>' + deadLine + priority +
                '</div>' + '<div class ="pt5">' + workType + updateTimeTxt + showLadbelApprove + lastActivity + departmentAssign + groupAssign + wfName + actName + '</div>';
        }
        else if (full.Status == 'Bị hủy') {
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                cardName +
                '<div class="pt5"><span class="badge-customer badge-customer-warning" style="width:95px;">&nbsp;' + caption.CJ_LBL_CANCLE + '</span>' + priority +
                '</div>' + '<div class ="pt5">' + workType + updateTimeTxt + showLadbelApprove + lastActivity + departmentAssign + groupAssign + wfName + actName + '</div>';
        }
        else if (full.Status == 'Mới tạo') {
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                cardName +
                '<div class="pt5"><span class="badge-customer badge-customer-success fs9" style="width:95px;">&nbsp;' + caption.CJ_LBL_CREATE + '</span>' + deadLine + priority +
                '</div>' + '<div class ="pt5">' + workType + updateTimeTxt + showLadbelApprove + lastActivity + departmentAssign + groupAssign + wfName + actName + '</div>';
        }
        else if (full.Status == 'Thẻ rác') {
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                cardName +
                '<div class="pt5"><span class="badge-customer badge-customer-danger fs9" style="width:95px;">&nbsp;' + caption.CJ_TAB_STATUS_TRASH + '</span>' + deadLine + priority +
                '</div>' + '<div class ="pt5">' + workType + updateTimeTxt + showLadbelApprove + lastActivity + departmentAssign + groupAssign + wfName + actName + '</div>';
        }
        else if (full.Status == 'Đóng') {
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                cardName +
                '<div class="pt5"><span class="badge-customer badge-customer-danger fs9" style="width:95px;">&nbsp;' + caption.CJ_MSG_TAB_CLOSE + '</span>' + deadLine + priority +
                '</div>' + '<div class ="pt5">' + workType + updateTimeTxt + showLadbelApprove + lastActivity + departmentAssign + groupAssign + wfName + actName + '</div>';
        }
    }).withOption('sClass', 'nowrap first-col-sticky'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('BeginTime').withTitle('<i class="fa fa-calendar mr5"></i>{{"CJ_LIST_COL_START" | translate}}').withOption('sClass', 'text-wrap w50').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('Deadline').withTitle('<i class="fa fa-calendar mr5"></i>{{"CJ_LIST_COL_DEADLINE" | translate}}').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }).withOption('sClass', 'text-wrap w50'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('EndTime').withTitle('<i class="fa fa-calendar mr5"></i>{{"CJ_LIST_COL_END" | translate}}').withOption('sClass', 'text-wrap w20').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedBy').withTitle('<i class="fa fa-user mr5"></i>{{"CJ_COL_CREATE_BY" | translate}}').withOption('sClass', 'text-wrap w20').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('BoardName').withTitle('<i class="fa fa-newspaper-o mr5"></i>{{"CJ_LIST_COL_BOARD" | translate}}').withOption('sClass', 'text-wrap').renderWith(function (data, type) {
        return '<span class="badge-customer badge-customer-success ml-1" style = "background-color: #3c92e8fc !important;">' + data + '</span>'
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedTime').withTitle('<i class="fa fa-calendar mr5"></i>{{"CJ_COL_CREATE_DATE" | translate}}').withOption('sClass', 'text-wrap w20').renderWith(function (data, type, full) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('').notSortable().withTitle('<div><i class="fa fa-recycle mr5"></i>{{"COM_LIST_COL_ACTION" | translate}}</div>').withOption('sClass', 'dataTable-pr0  d-flex w300 justify-content-sa').renderWith(function (data, type, full, meta) {
        return '<div class="pr5"><button title= "Nhóm" ng-click="cardMember(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: none;border: none; font-size: 20px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-users"></i></button><p class="fs8 text-underline">{{"CJ_BTN_GROUP" | translate}}</p></div>' +
            '<div class="pr5 text-center"><button title="Phòng ban" ng-click="cardGroupUser(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: none;border: none; font-size: 20px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-door-open"></i></button><p class="fs8 text-underline nowrap">{{"CJ_BTN_DEPARTMENT" | translate}}</p></div>' +
            '<div class="pr5 text-center"><button title="Liên kết" ng-click="cardRelative(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: none;border: none; font-size: 20px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-link"></i></button><p class="fs8 text-underline nowrap">{{"CJ_BTN_LINK" | translate}}</p></div>' +
            '<div class="pr5 text-center"><button title="Copy" ng-click="cardCopy(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: none;border: none; font-size: 20px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-copy"></i></button><p class="fs8 text-underline">{{"CJ_BTN_COPY" | translate}}</p></div>' +
            '<div class="pr5 text-center"><button title="Sửa" ng-click="edit(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: none;border: none; font-size: 20px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-edit"></i></button><p class="fs8 text-underline">{{"CJ_BTN_EDIT" | translate}}</p></div>' +
            '<div class="text-center"><button title="Xoá" ng-click="delete(' + full.CardID + ')" style="width: 25px; height: 25px; padding: 0px;background: none;border: none; font-size: 20px" class1="btn btn-icon-only btn-circle btn-outline red"><i class="fas fa-trash-alt"></i></button><p class="fs8 text-underline">{{"COM_BTN_DELETE" | translate}}</p></div>';
    }));
    vm.reloadData = reloadData;

    vm.dtInstance = {};

    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }

    function callback(json) {

    }

    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }

    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }

    // view help detail
    $scope.viewCmsDetail = function (helpId) {
        //item, bookMark
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderDashBoard + '/viewItem.html',
            controller: 'viewItemHelp',
            backdrop: 'static',
            windowClass: 'message-avoid-header',
            size: '65',
            resolve: {
                para: function () {
                    return {
                        helpId
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    $rootScope.reloadGridCard = function () {
        reloadData(true);
    }

    $scope.cardMember = function (cardCode) {
        dataserviceCardJob.getCardDetail(cardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $rootScope.IsLock = rs.Object.CardDetail.IsLock;
                if (rs.Object.CardDetail.IsLock) {
                    return App.toastrError("Thẻ việc đã khóa");
                }

                dataserviceCardJob.getCardActivityByUser(cardCode, function (rs) {
                    rs = rs.data;
                    $scope.activity = rs;
                    if ($scope.activity.length > 0) {
                        if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                            $rootScope.isAceptCard = true;
                        } else {
                            $rootScope.isAceptCard = false;
                        }
                        if (!$rootScope.isAceptCard) {
                            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
                        }
                        $rootScope.titleModalAssign = 1;
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
                            controller: 'add-group-or-teamCardJob',
                            //windowClass: "message-center",
                            size: '55',
                            resolve: {
                                obj: function () {
                                    return {
                                        CardCode: cardCode,
                                        Type: 1
                                    };
                                }
                            }
                        });
                        modalInstance.result.then(function (d) {
                            dataserviceCardJob.getGroupDepartmentAssign($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.lstGrpAssign = rs.Group
                                $scope.lstDpmAssign = rs.Dpm
                            });
                        }, function () {
                        });
                    }
                });
            }
        });
    };

    $scope.cardGroupUser = function (cardCode) {
        dataserviceCardJob.getCardDetail(cardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $rootScope.IsLock = rs.Object.CardDetail.IsLock;
                if (rs.Object.CardDetail.IsLock) {
                    return App.toastrError("Thẻ việc đã khóa");
                }

                dataserviceCardJob.getCardActivityByUser(cardCode, function (rs) {
                    rs = rs.data;
                    $scope.activity = rs;
                    if ($scope.activity.length > 0) {
                        if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                            $rootScope.isAceptCard = true;
                        } else {
                            $rootScope.isAceptCard = false;
                        }
                        if (!$rootScope.isAceptCard) {
                            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
                        }
                        $rootScope.titleModalAssign = 2;
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
                            controller: 'add-group-or-teamCardJob',
                            //windowClass: "message-center",
                            size: '55',
                            resolve: {
                                obj: function () {
                                    return {
                                        CardCode: cardCode,
                                        Type: 2
                                    };
                                }
                            }
                        });
                        modalInstance.result.then(function (d) {

                        }, function () {
                        });
                    }
                });
            }
        });
    };

    $scope.cardRelative = function (cardCode) {
        dataserviceCardJob.getCardDetail(cardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $rootScope.IsLock = rs.Object.CardDetail.IsLock;
                if (rs.Object.CardDetail.IsLock) {
                    return App.toastrError("Thẻ việc đã khóa");
                }

                dataserviceCardJob.getCardActivityByUser(cardCode, function (rs) {
                    rs = rs.data;
                    $scope.activity = rs;
                    if ($scope.activity.length > 0) {
                        if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                            $rootScope.isAceptCard = true;
                        } else {
                            $rootScope.isAceptCard = false;
                        }
                        if (!$rootScope.isAceptCard) {
                            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
                        }
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: ctxfolderCardJob + '/add-object-relative.html',
                            controller: 'add-object-relativeCardJob',
                            size: '70',
                            backdrop: 'static',
                            keyboard: false,
                            resolve: {
                                cardCode: function () {
                                    return cardCode;
                                }
                            }
                        });
                        modalInstance.result.then(function (d) {

                        }, function () {
                        });
                    }
                });
            }
        });

    };

    $scope.cardProgress = function (cardCode) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/edit-progress.html',
            controller: 'edit-progressCardJob',
            size: '15',
            resolve: {
                para: function () {
                    return {
                        CardCode: cardCode,
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    $scope.delete = function (CardID) {
        dataserviceCardJob.deleteCard(CardID, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                reloadData();
                $rootScope.loadWork(false);
            }
        });
    };

    // view help detail
    $scope.viewCmsDetail = function (helpId) {
        //item, bookMark
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderDashBoard + '/viewItem.html',
            controller: 'viewItemHelp',
            backdrop: 'static',
            windowClass: 'message-avoid-header',
            size: '65',
            resolve: {
                para: function () {
                    return {
                        helpId
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    $scope.edit = function (CardCode) {
        $rootScope.CardCode = CardCode;
        $rootScope.titleModalAssign = 3;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-buffer.html',
            controller: 'edit-cardCardJob',
            backdrop: 'static',
            size: '75',
            keyboard: false,
            resolve: {
                para: function () {
                    return CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            if ($rootScope.isDataChanged) {
                reloadData(false);
                $rootScope.isDataChanged = false;
            }
            $rootScope.reloadWFBoard($rootScope.searchObj.Object);
            updateNotify();
        }, function () {
            if ($rootScope.isDataChanged) {
                reloadData(false);
                $rootScope.isDataChanged = false;
            }
        });
    };

    $scope.cardCopy = function (cardCode) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-buffer.html',
            controller: 'copy-card',
            backdrop: 'static',
            size: '80',
            resolve: {
                para: function () {
                    return cardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            reloadData(false);
            $rootScope.reloadWFBoard($rootScope.searchObj.Object);
        }, function () { });
    }

    function updateNotify() {
        dataserviceCardJob.getCountNotify(function (rs) {
            rs = rs.data;
            document.getElementById("countCardWork").innerText = caption.CJ_LBL_YOU_HAVE + " " + rs.CountWork + " " + caption.CJ_LBL_NEW_WORK;
            document.getElementById("countAllNotifyNew").innerText = rs.All;
            document.getElementById("allNotifyNew").innerText = rs.All + " " + caption.CJ_LBL_NEW_NOTIFY;
        })
    }
});

app.controller('add-boardCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, $timeout, $filter) {
    $scope.model = {
        Avatar: 'fa-solid fa-house',
        BackgroundColor: '',
        BackgroundImage: '',
        BoardType: '',
        BeginTimeView: '',
        DeadLineView: '',
        Department: '',
        Branch: ''
    }
    $scope.listColor = [
        {
            Id: 0,
            Check: true,
            BackgroundColor: '#f1f1f1',
            BackgroundImage: '',
        },
        {
            Id: 1,
            Check: false,
            BackgroundColor: '#179da7',
            BackgroundImage: '',
        }, {
            Id: 2,
            Check: false,
            BackgroundColor: '#17a742',
            BackgroundImage: '',
        }, {
            Id: 3,
            Check: false,
            BackgroundColor: 'rgb(14, 220, 222)',
            BackgroundImage: '',
        }, {
            Id: 4,
            Check: false,
            BackgroundColor: 'rgb(255, 156, 25)',
            BackgroundImage: '',
        }, {
            Id: 5,
            Check: false,
            BackgroundColor: 'rgb(26, 219, 91)',
            BackgroundImage: '',
        }, {
            Id: 6,
            Check: false,
            BackgroundColor: 'rgb(255, 92, 161)',
            BackgroundImage: '',
        }]
    $scope.initData = function () {
        dataserviceCardJob.getBoardsType(function (rs) {
            rs = rs.data;
            $scope.boardType = rs;
            $scope.model.BoardType = rs.length != 0 ? rs[0].Code : '';
        });
        dataserviceCardJob.getDepartment(function (rs) {
            rs = rs.data;
            $scope.listDepartment = rs;
        })
        dataserviceCardJob.getBranch(function (rs) {
            rs = rs.data;
            $scope.listBranch = rs;
        })
    }
    $scope.initData();
    $scope.selectColor = function (id) {
        for (var i = 0; i < $scope.listColor.length; i++) {
            if ($scope.listColor[i].Id == id) {
                if ($scope.listColor[i].Check) {
                    $scope.listColor[i].Check = false;
                } else {
                    $scope.listColor[i].Check = true;
                }
            } else {
                $scope.listColor[i].Check = false;
            }
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    $scope.submit = function () {
        var selectColor = $scope.listColor.find(function (element) {
            if (element.Check == true) return true;
        });
        if (selectColor) {
            $scope.model.BackgroundColor = selectColor.BackgroundColor;
            $scope.model.BackgroundImage = selectColor.BackgroundImage;
        }
        if ($scope.editForm.validate()) {
            dataserviceCardJob.insertBoard($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    function loadDate() {
        //$("#boardStart").datepicker({
        //    inline: false,
        //    autoclose: true,
        //    format: "dd/mm/yyyy",
        //    fontAwesome: true,
        //    todayHighlight: true,
        //}).on('changeDate', function (selected) {
        //    var maxDate = new Date(selected.date.valueOf());
        //    $('#boardDueDate').datepicker('setStartDate', maxDate);
        //});
        //$("#boardDueDate").datepicker({
        //    inline: false,
        //    autoclose: true,
        //    format: "dd/mm/yyyy",
        //    fontAwesome: true,
        //    todayHighlight: true,
        //}).on('changeDate', function (selected) {
        //    var maxDate = new Date(selected.date.valueOf());
        //    $('#boardStart').datepicker('setEndDate', maxDate);
        //});
    }
    setTimeout(function () {
        loadDate();
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('edit-boardCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, $filter, dataserviceCardJob, para) {
    $scope.model = {
        Avatar: 'fa-solid fa-house',
        BackgroundColor: '',
        BackgroundImage: '',
        Visibility: true,
        TeamCode: '',
        BoardType: ''
    }
    $scope.listColor = [
        {
            Id: 0,
            Check: false,
            BackgroundColor: '#f1f1f1',
            BackgroundImage: '',
        }, {
            Id: 1,
            Check: false,
            BackgroundColor: '#179da7',
            BackgroundImage: '',
        }, {
            Id: 2,
            Check: false,
            BackgroundColor: '#17a742',
            BackgroundImage: '',
        }, {
            Id: 3,
            Check: false,
            BackgroundColor: 'rgb(14, 220, 222)',
            BackgroundImage: '',
        }, {
            Id: 4,
            Check: false,
            BackgroundColor: 'rgb(255, 156, 25)',
            BackgroundImage: '',
        }, {
            Id: 5,
            Check: false,
            BackgroundColor: 'rgb(26, 219, 91)',
            BackgroundImage: '',
        }, {
            Id: 6,
            Check: false,
            BackgroundColor: 'rgb(255, 92, 161)',
            BackgroundImage: '',
        }]

    $scope.initData = function () {
        dataserviceCardJob.getBoardDetail(para, "", function (rs) {

            rs = rs.data;
            $scope.model = rs;
            //select color
            var selectColor = $scope.listColor.find(function (element) {
                if (element.BackgroundColor == $scope.model.BackgroundColor) return true;
            });
            if (selectColor) {
                selectColor.Check = true;
            }
        });
        dataserviceCardJob.getBoardsType(function (rs) {
            rs = rs.data;
            $scope.boardType = rs;
        });
        dataserviceCardJob.getDepartment(function (rs) {
            rs = rs.data;
            $scope.listDepartment = rs;
        })
        dataserviceCardJob.getBranch(function (rs) {
            rs = rs.data;
            $scope.listBranch = rs;
        })
    }
    $scope.initData();
    $scope.selectColor = function (id) {
        for (var i = 0; i < $scope.listColor.length; i++) {
            if ($scope.listColor[i].Id == id) {
                if ($scope.listColor[i].Check) {
                    $scope.listColor[i].Check = false;
                } else {
                    $scope.listColor[i].Check = true;
                }
            } else {
                $scope.listColor[i].Check = false;
            }
        }
    }
    $scope.submit = function () {
        var selectColor = $scope.listColor.find(function (element) {
            if (element.Check == true) return true;
        });
        if (selectColor) {
            $scope.model.BackgroundColor = selectColor.BackgroundColor;
            $scope.model.BackgroundImage = selectColor.BackgroundImage;
        }
        if ($scope.editForm.validate()) {
            dataserviceCardJob.updateBoard($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    //function loadDate() {
    //    $("#boardStart").datepicker({
    //        inline: false,
    //        autoclose: true,
    //        format: "dd/mm/yyyy",
    //        fontAwesome: true,
    //        todayHighlight: true,
    //    }).on('changeDate', function (selected) {
    //        var maxDate = new Date(selected.date.valueOf());
    //        $('#boardDueDate').datepicker('setStartDate', maxDate);
    //    });
    //    $("#boardDueDate").datepicker({
    //        inline: false,
    //        autoclose: true,
    //        format: "dd/mm/yyyy",
    //        fontAwesome: true,
    //        todayHighlight: true,
    //    }).on('changeDate', function (selected) {
    //        var maxDate = new Date(selected.date.valueOf());
    //        $('#boardStart').datepicker('setEndDate', maxDate);
    //    });
    //}
    setTimeout(function () {
        //loadDate();
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('add-listCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $confirm, $uibModalInstance, dataserviceCardJob, para) {
    $scope.model = {
        ListName: '',
        BoardCode: para
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    $scope.submit = function () {
        if ($scope.addformlist.validate()) {
            dataserviceCardJob.insertList($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('edit-list-backgroundCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.listColor = [{
        Id: 1,
        Check: false,
        Background: "background-color: rgb(240, 29, 106);background-image: radial-gradient(circle at center 75%, rgb(255, 46, 25) 0%, rgb(146, 0, 255) 50%, rgb(0, 95, 255) 100%);"
    }, {
        Id: 2,
        Check: false,
        Background: "background-image: radial-gradient(circle at center 75%, rgb(0, 229, 255) 0%, rgb(167, 151, 255) 50%, rgb(255, 143, 178) 100%);"
    }, {
        Id: 3,
        Check: false,
        Background: "background-color: rgb(14, 220, 222);background-image: radial-gradient(circle at center 75%, rgb(14, 230, 183) 0%, rgb(0, 230, 210) 50%, rgb(25, 201, 255) 100%);"
    }, {
        Id: 4,
        Check: false,
        Background: "background-color: rgb(255, 156, 25);background-image: radial-gradient(circle at center 75%, rgb(255, 79, 0) 0%, rgb(255, 150, 22) 50%, rgb(255, 220, 45) 100%);"
    }, {
        Id: 5,
        Check: false,
        Background: "background-color: rgb(26, 219, 91);background-image: radial-gradient(circle at center 75%, rgb(0, 223, 187) 0%, rgb(110, 223, 0) 50%, rgb(255, 210, 0) 100%);"
    }, {
        Id: 6,
        Check: false,
        Background: "background-color: rgb(255, 92, 161);"
    }, {
        Id: 7,
        Check: false,
        Background: "background-color: rgb(214, 150, 187);"
    }, {
        Id: 8,
        Check: false,
        Background: "background-color: rgb(19, 207, 19);"
    }, {
        Id: 9,
        Check: false,
        Background: "background-color: rgb(255, 195, 0);"
    }, {
        Id: 10,
        Check: false,
        Background: "background-color: rgb(0, 132, 255);"
    }, {
        Id: 11,
        Check: false,
        Background: "background-color: rgb(118, 70, 255);"
    }, {
        Id: 12,
        Check: false,
        Background: "background-color: rgb(68, 190, 199);"
    }, {
        Id: 13,
        Check: false,
        Background: "background-color: rgb(255, 126, 41);"
    }, {
        Id: 14,
        Check: false,
        Background: "background-color: rgb(250, 60, 76);"
    }, {
        Id: 15,
        Check: false,
        Background: "background: #f3ec1b;"
    }, {
        Id: 16,
        Check: false,
        Background: "background:#f31b1b;"
    }, {
        Id: 17,
        Check: false,
        Background: "background:#a29999;"
    }, {
        Id: 18,
        Check: false,
        Background: "background:#a4a5d8;"
    }]
    $scope.selectColor = function (id) {
        for (var i = 0; i < $scope.listColor.length; i++) {
            if ($scope.listColor[i].Id == id) {
                if ($scope.listColor[i].Check) {
                    $scope.listColor[i].Check = false;
                } else {
                    $scope.listColor[i].Check = true;
                }
            } else {
                $scope.listColor[i].Check = false;
            }
        }
    }
    $scope.submit = function () {
        var selectColor = $scope.listColor.find(function (element) {
            if (element.Check == true) return true;
        });
        if (selectColor) {
            var obj = {
                ListID: para,
                Background: selectColor.Background
            }
            dataserviceCardJob.changeListBackground(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        } else {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_COLOR);
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('edit-list-weight-numCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.model = {
        WeightNum: para.weightNum,
    }
    $scope.submit = function () {

        if ($scope.editForm.validate()) {
            var obj = {
                ListID: para.listId,
                WeightNum: $scope.model.WeightNum
            }
            dataserviceCardJob.changeListWeightNum(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('edit-list-beginTimeCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, $filter, dataserviceCardJob, para) {
    $scope.model = {
        BeginTime: $filter('date')(new Date(para.BeginTime), 'dd/MM/yyyy'),
    }
    $scope.submit = function () {
        var obj = {
            ListID: para.ListId,
            BeginTime: $scope.model.BeginTime
        }
        dataserviceCardJob.changeListBeginTime(obj, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $uibModalInstance.close();
            }
        })
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    function loadDate() {
        $("#BeginTime").datepicker({
            inline: true,
            autoclose: true,
            todayHighlight: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        })
    }
    setTimeout(function () {
        loadDate();
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('edit-list-deadLineCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, $filter, dataserviceCardJob, para) {
    $scope.model = {
        DeadLine: $filter('date')(new Date(para.Deadline), 'dd/MM/yyyy'),
    }
    $scope.submit = function () {
        var obj = {
            ListID: para.ListId,
            DeadLine: $scope.model.DeadLine
        }
        dataserviceCardJob.changeListDeadLine(obj, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $uibModalInstance.close();
            }
        })
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    function loadDate() {
        $("#DeadLine").datepicker({
            inline: true,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
            todayHighlight: true
        })
    }
    setTimeout(function () {
        loadDate();
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('add-card-normalCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.model = {
        BoardCode: '',
        ListCode: '',
        TabBoard: '',
        ListCodeRelative: para,
        CardName: ''
    }
    $scope.boardName = '';
    $scope.listName = '';
    $scope.initload = function () {
        dataserviceCardJob.getBoardListSugges(function (rs) {
            rs = rs.data;
            if (rs != null) {
                $scope.model.BoardCode = rs.BoadCode;
                $scope.model.ListCode = rs.ListCode;
                dataserviceCardJob.getLists($scope.model.BoardCode, function (rs) {
                    rs = rs.data;
                    $scope.lists = rs;
                });
            }
        })
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoard = rs;
        });
    }
    $scope.initload();
    $scope.selectBoard = function (boardCode) {
        dataserviceCardJob.getLists(boardCode, function (rs) {
            rs = rs.data;
            if (rs.length != 0) {
                $scope.lists = rs;
                $scope.model.ListCode = $scope.lists.length != 0 ? $scope.lists[0].ListCode : '';
                $scope.changleSelect('ListCode');
            } else {
                $scope.lists = [];
                $scope.model.ListCode = '';
                App.toastrError(caption.CJ_MSG_NO_LIST_IN_BOARD);
            }
        });
    }
    $scope.changleSelect = function (SelectType) {
        if (SelectType == "BoardCode" && $scope.model.BoardCode != "") {
            $scope.errorBoardCode = false;
        }
        if (SelectType == "ListCode" && $scope.model.ListCode != "") {
            $scope.errorListCode = false;
        }
    }
    $scope.createdBoard = function (boardName) {
        if (boardName == '') {
            App.toastrError(caption.CJ_MSG_ENTER_BOARD_NAME);
        } else {
            var item = {
                BoardName: $scope.boardName
            }

            dataserviceCardJob.checkExistBoardName(item, function (isExist) {

                if (isExist == false) {
                    $scope.create = {
                        BoardName: $scope.boardName
                    }
                    dataserviceCardJob.insertBoard($scope.create, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            $scope.model.BoardCode = rs.Object;
                            App.toastrSuccess(rs.Title);
                            dataserviceCardJob.getListBoard(function (rs) {
                                rs = rs.data;
                                $scope.listBoard = rs;
                                $scope.lists = [];
                                $scope.model.ListCode = '';
                            });
                        }
                    })
                } else {
                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderMessage + '/messageConfirmQuestion.html',
                        windowClass: "message-center",
                        resolve: {
                            boardName: function () {
                                return $scope.boardName;
                            }
                        },
                        controller: function ($scope, $uibModalInstance, boardName) {
                            $scope.message = caption.CJ_MSG_BOARD_EXIST_WANT_CREATE;
                            $scope.ok = function () {
                                $scope.create = {
                                    BoardName: boardName
                                }
                                dataserviceCardJob.insertBoard($scope.create, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    }
                                    else {
                                        App.toastrSuccess(rs.Title);
                                        $uibModalInstance.close(rs.Object);
                                    }
                                })
                            };

                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        },
                        size: '20',
                    });
                    modalInstance.result.then(function (d) {
                        $scope.model.BoardCode = d;
                        dataserviceCardJob.getListBoard(function (rs) {
                            rs = rs.data;
                            $scope.listBoard = rs;
                            $scope.lists = [];
                            $scope.model.ListCode = '';
                        });
                    }, function () {
                    });
                }
            })
        }
    }
    $scope.createdList = function (listName) {
        if (listName == '') {
            App.toastrError(caption.CJ_MSG_ENTER_BOARD_NAME);
        } else {
            var obj = {
                ListName: $scope.listName,
                BoardCode: $scope.model.BoardCode
            }
            dataserviceCardJob.checkExistListNameInBoard(obj, function (isExist) {
                isExist = isExist.data;
                if (isExist == false) {
                    $scope.create = {
                        BoardCode: $scope.model.BoardCode,
                        ListName: $scope.listName
                    }
                    dataserviceCardJob.insertList($scope.create, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            $scope.model.ListCode = rs.Object.ListCode;
                            App.toastrSuccess(rs.Title);
                            dataserviceCardJob.getLists($scope.model.BoardCode, function (rs) {
                                rs = rs.data;
                                if (rs.length != 0) {
                                    $scope.lists = rs;
                                }
                            });
                        }
                    })
                } else {
                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderMessage + '/messageConfirmQuestion.html',
                        windowClass: "message-center",
                        resolve: {
                            obj: function () {
                                return {
                                    BoardCode: $scope.model.BoardCode,
                                    ListName: $scope.listName
                                };
                            }
                        },
                        controller: function ($scope, $uibModalInstance, obj) {
                            $scope.message = caption.CJ_MSG_LIST_EXITS_WANT_CREATE;
                            $scope.ok = function () {
                                $scope.create = {
                                    BoardCode: obj.BoardCode,
                                    ListName: obj.ListName
                                }
                                dataserviceCardJob.insertList($scope.create, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    }
                                    else {
                                        App.toastrSuccess(rs.Title);
                                        $uibModalInstance.close(rs.Object);
                                    }
                                })
                            };

                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        },
                        size: '20',
                    });
                    modalInstance.result.then(function (d) {
                        $scope.model.ListCode = d.ListCode;
                        dataserviceCardJob.getLists($scope.model.BoardCode, function (rs) {
                            rs = rs.data;
                            if (rs.length != 0) {
                                $scope.lists = rs;
                            }
                        });
                    }, function () {
                    });
                }
            })
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.submit = function () {
        if ($rootScope.show.board) {
            $scope.model.TabBoard = 1;
        }
        if ($rootScope.show.groupUser) {
            $scope.model.TabBoard = 2;
        }
        if ($rootScope.show.user) {
            $scope.model.TabBoard = 3;
        }
        if ($rootScope.show.team) {
            $scope.model.TabBoard = 4;
        }
        if ($rootScope.show.project) {
            $scope.model.TabBoard = 5;
        }
        if ($rootScope.show.customer) {
            $scope.model.TabBoard = 6;
        }
        if ($rootScope.show.contract) {
            $scope.model.TabBoard = 7;
        }
        if ($rootScope.show.supplier) {
            $scope.model.TabBoard = 8;
        }
        validationSelect($scope.model);
        if ($scope.addform.validate() && validationSelect($scope.model).Status == false) {
            dataserviceCardJob.insertCard($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    //reload card
                    $rootScope.loadListAndCardWithTab();
                    $rootScope.loadWork(true);
                }
            })
        }
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
    function validationSelect(data) {
        var mess = { Status: false, Title: "" };
        if (data.BoardCode == "") {
            $scope.errorBoardCode = true;
            mess.Status = true;
        } else {
            $scope.errorBoardCode = false;
        }
        if (data.ListCode == "") {
            $scope.errorListCode = true;
            mess.Status = true;
        } else {
            $scope.errorListCode = false;
        }
        return mess;
    };
});

app.controller('add-cardCardJob', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, $filter, dataserviceCardJob, para) {
    $rootScope.isAddedCard = true;
    $rootScope.isAceptCard = true;
    $scope.address = {
        lat: '',
        lng: '',
        text: ''
    };
    $rootScope.CardCode = "";
    var objOld = {
        inherit: '',
        status: '',
        weightNum: '',
        beginTime: '',
        deadline: '',
        endTime: '',
        workType: '',
        cardLevel: '',
        description: ''
    };
    $scope.isCreatedCard = false;
    $scope.obj = {
        Board: '',
        List: '',
        CardCode: ''
    };

    $scope.checkitem = {
        Title: ''
    };
    $scope.comment = {
        Content: ''
    };
    $scope.product = {
        ProductCode: '',
        Quantity: '',
        Activity: ''
    };
    $scope.service = {
        ServiceCode: '',
        Quantity: '',
        Activity: ''
    };
    $scope.modelShift = {}
    $scope.checkList = [];
    $scope.statusItem = [];
    $scope.show = {
        SelectCard: false
    };
    $scope.listAddress = [];
    $scope.listCardProduct = [];
    $scope.objectRelative = [];

    $scope.ProductBuffer = {
        ListProduct: [],
        ListDelProduct: []
    }
    $scope.ServiceBuffer = {
        ListService: [],
        ListDelService: []
    }
    $scope.AddressBuffer = {
        ListAddress: [],
        ListDelAddress: []
    }
    $scope.ListDelSubItem = [];
    $scope.checklists = [];
    $scope.CompletedOld = 0;
    $scope.RoleUser = "";

    $scope.descriptionOld = "";

    //Init for wf
    $scope.ActInstCode = "";
    $scope.modelWF = {
        WorkflowCode: "",
        WfInstCode: "",
        ActInstCode: ""
    }

    //AcceptCard to working
    $scope.isAceptCard = false;

    //Activity
    $scope.disableBoardList = false;

    //Disabled control when user assign to card
    $scope.isAssign = false;

    //Check change in card
    var isChange = false;

    //Check action activity reject, accept
    $scope.TimeSpanActivity = {
        TimeStart: "",
    }

    //Check leader and status closed
    $scope.isNotLeader = true;
    $scope.isClose = false;
    $scope.isDisableStatus = false;
    $scope.isDisableControl = false;

    $scope.initData = function () {
        $scope.CardName = para.Name;
        $scope.model = {
            Currency: $rootScope.currencyData[0].Code
        }
        dataserviceCardJob.getLevels(function (rs) {
            rs = rs.data;
            $scope.CardLevels = rs;
        });
        dataserviceCardJob.getWorkType(function (rs) {
            rs = rs.data;
            $scope.WorkTypes = rs;
        });
        dataserviceCardJob.getStatus(function (rs) {
            rs = rs.data;
            $scope.CardStatus = rs;
        });
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoards = rs;
        });
        dataserviceCardJob.getProduct(function (rs) {
            rs = rs.data;
            $scope.listProduct = rs;
        });
        dataserviceCardJob.getService(function (rs) {
            rs = rs.data;
            $scope.listService = rs;
        })
        dataserviceCardJob.getUnit(function (rs) {
            rs = rs.data;
            $scope.listUnit = rs
        });
        dataserviceCardJob.getActivityService(function (rs) {
            rs = rs.data;
            $scope.listActivityService = rs;
        });
        dataserviceCardJob.getActivityProduct(function (rs) {
            rs = rs.data;
            $scope.listActivityProduct = rs;
        })
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoards = rs;
        });
        dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
            rs = rs.data;
            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                $scope.modelShift.In = inTime;
                $scope.modelShift.Out = outTime;
                if (inDate != outDate && outDate != null) {
                    $scope.modelShift.DateIn = inDate;
                    $scope.modelShift.DateOut = outDate;
                    $scope.isSameDate = false;
                } else {
                    $scope.modelShift.DateInOut = inDate;
                }
            }
        })
        dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
            rs = rs.data;
            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                $scope.modelShift.In = inTime;
                $scope.modelShift.Out = outTime;
                if (inDate != outDate && outDate != null) {
                    $scope.modelShift.DateIn = inDate;
                    $scope.modelShift.DateOut = outDate;
                    $scope.isSameDate = false;
                } else {
                    $scope.modelShift.DateInOut = inDate;
                    $scope.isSameDate = true;
                }
            }
        })
        $scope.showForm = true;
        $scope.acticeDetailDrag = false;
        dataserviceCardJob.hideCost(function (rs) {
            rs = rs.data;
            $scope.isNotVatco = rs;
        })

        dataserviceCardJob.getCurrency(function (rs) {
            rs = rs.data;
            $scope.listCurrency = rs;
        })

        //Workflow
        dataserviceCardJob.getWorkFlow(function (rs) {
            rs = rs.data;
            $scope.listWorkFlow = rs;
        })

        dataserviceCardJob.getUnitAttr(function (rs) {
            rs = rs.data;
            $scope.lstAttrUnit = rs;
        })

        dataserviceCardJob.getAttrDataType(function (rs) {
            rs = rs.data;
            $scope.lstAttrDataType = rs;
        })

        dataserviceCardJob.getAttrGroup(function (rs) {
            rs = rs.data;
            $scope.lstAttrGroup = rs;
        })

    };
    $scope.initData();
    $scope.initAfterCreateCard = function () {
        dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;

                $scope.descriptionOld = angular.copy($scope.model.Description);

                if ($scope.model.Status == "CLOSED") {
                    $scope.isClose = true;
                } else {
                    $scope.isClose = false;
                }
                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {

                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }

                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.TimeSpanActivity.TimeStart = rs.Object.TimeStart;
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                $scope.leader = rs.Object.Leader;
                dataserviceCardJob.roleInCardOfUser($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;
                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                //InitMap
                initMap();
                initDataMap();
                mapReSize();
                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.attachments = rs;
        });
        dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.checklists = rs;
            angular.forEach(rs, function (value, key) {
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $scope.checkList[value.ChkListCode] = result;
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                    rs = rs.data;
                    $scope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.comments = rs;

        });
        dataserviceCardJob.getCardActivityByUser($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {

                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $scope.isAceptCard = true;
                    $scope.disableBoardList = false;
                } else {
                    $scope.isAceptCard = false;
                    $scope.disableBoardList = true;
                }
            }
        });
        dataserviceCardJob.getCardProduct($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.listCardProduct = rs;
        });
        dataserviceCardJob.getCardService($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.listCardService = rs;
        });
        dataserviceCardJob.getObjectRelative($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.listID = [];
            $scope.listObjRelative = rs;
            for (var i = 0; i < $scope.listObjRelative.length; i++) {
                $scope.listID.push($scope.listObjRelative[i].ID);
            }
        });
        dataserviceCardJob.getListWorkItem($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.listItemWork = rs.Object;
        });
        dataserviceCardJob.getCardRelative($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.CardInherit = rs.Inherit;
            $scope.Links = rs.Links;
        })
        dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.GetLisAddressJobCard($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.listAddress = rs;
        });
    }

    $scope.getSafehtml = function (description) {
        var tmp = document.createElement("DIV");
        tmp.innerHTML = description;
        return tmp.textContent || tmp.innerText || "";
    }
    //right
    $scope.boardSelect = function (boardCode) {
        dataserviceCardJob.getLists(boardCode, function (rs) {
            rs = rs.data;
            $scope.Lists = rs;
        });
    };
    $scope.addBoard = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-board.html',
            controller: 'add-boardCardJob',
            backdrop: 'static',
            size: '30'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListBoard(function (rs) {
                rs = rs.data;
                $scope.listBoards = rs;
            });
        }, function () { });
    }
    $scope.listSelect = function (listCode) {
        $scope.addcard = {};
        $scope.addcard.ListCode = listCode;
        $scope.addcard.TabBoard = para.TabBoard;
        $scope.addcard.CardName = para.Name;
        $scope.addcard.ListCodeRelative = [{ Code: para.Code }];
        if ($scope.isCreatedCard == false) {
            dataserviceCardJob.insertCard($scope.addcard, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.isCreatedCard = true;
                    $scope.obj.CardCode = rs.Object.CardCode;
                    $rootScope.CardCode = rs.Object.CardCode;
                    dataserviceCardJob.updateActivity($scope.obj.CardCode, 2, true, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                        }
                        else {
                            $scope.isAceptCard = true;
                            setTimeout(function () {
                                $scope.disableCkEditer(editor);
                            }, 1000);
                        }
                    });
                    $scope.initAfterCreateCard();
                    if ($rootScope.reloadCardJob) {
                        $rootScope.reloadCardJob();
                    }
                }
            });
        }
    };
    $scope.addList = function (board) {
        if (board == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_TABLE_WORKING);
        } else {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/add-list.html',
                controller: 'add-listCardJob',
                backdrop: 'static',
                size: '25',
                resolve: {
                    para: function () {
                        return board;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
            }, function () { });
        }
    }

    $scope.updateCardName = function (id) {
        if ($scope.isAceptCard) {
            var element = $('#card_' + id);
            var newName = element.val();
            var currentName = element.attr('data-currentvalue');
            if (newName != currentName) {
                $scope.model.CardName = newName;
                isChange = true;
            }
            $scope.acticeDetailDrag = false;
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }

    }
    $scope.editingCardetailHeader = function (id) {
        if ($(".modal-dialog").hasClass("ui-draggable-dragging") == false) {
            $scope.acticeDetailDrag = true;
            document.getElementById("card_" + id).focus();
        } else {
            $scope.acticeDetailDrag = false;
        }
    }

    //Object rela
    $scope.initCardRelative = function (cardCode) {
        dataserviceCardJob.getObjectRelative(cardCode, function (rs) {
            rs = rs.data;
            $scope.listID = [];
            $scope.listObjRelative = rs;
            for (var i = 0; i < $scope.listObjRelative.length; i++) {
                $scope.listID.push($scope.listObjRelative[i].ID);
            }
        });
    }
    $scope.addObjectRelative = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/add-object-relative.html',
                    controller: 'add-object-relativeCardJob',
                    size: '70',
                    resolve: {
                        cardCode: function () {
                            return $scope.obj.CardCode;
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    $scope.listObjRelative = $rootScope.Rela.ListRelative;
                    isChange = true;
                }, function () {
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    };
    $scope.deleteObjReletive = function (id) {
        if ($scope.isAceptCard) {
            for (var i = 0; i < $scope.listObjRelative.length; i++) {
                if ($scope.listObjRelative[i].ID == id) {
                    $scope.listObjRelative.splice(i, 1);
                    if (id > 0) {
                        $rootScope.Rela.ListDelRelative.push(id);
                        isChange = true;
                    }
                    break;
                }
            }
            $rootScope.Rela.ListRelative = $scope.listObjRelative;
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    };

    //Address
    var idAddress = -1;
    $scope.saveAddress = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                idAddress--;
                var date = new Date();
                var data = { Id: idAddress, LocationGps: "" + $scope.address.lat + "," + $scope.address.lng, LocationText: $scope.address.text, CreatedBy: userName, CreatedTime: date };
                $scope.listAddress.push(data);
                $scope.AddressBuffer.ListAddress = $scope.listAddress;
                isChange = true;
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }
    $scope.deletedAddress = function (id) {
        if ($scope.isAceptCard) {
            for (var i = 0; i < $scope.listAddress.length; i++) {
                if ($scope.listAddress[i].Id == id) {
                    $scope.listAddress.splice(i, 1);
                    if (id > 0) {
                        $scope.AddressBuffer.ListDelAddress.push(id);
                        isChange = true;
                    }
                    break;
                }
            }
            $scope.AddressBuffer.ListAddress = $scope.listAddress;
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    //Tab product
    var idProd = -1;
    $scope.addProduct = function (productCode, quantity, activity) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                var dateCreateProd = new Date();
                idProd--;
                if (productCode == '' && quantity == '') {
                    App.toastrError(caption.CJ_MSG_SELECT_PRODUCT_QUANTITY);
                } else {
                    if (productCode == '') {
                        App.toastrError(caption.CJ_MSG_SELECT_PRODUCT);
                    } else if (quantity == '' || quantity == null) {
                        App.toastrError(caption.CJ_MSG_SELECT_QUANTITY);
                    } else {
                        if (quantity >= 0) {
                            var prodFilter = $scope.listProduct.find(function (element) {
                                if (element.Code == productCode) return true;
                            });
                            if ($scope.listCardProduct.length > 0) {
                                var isExistProd = false;
                                for (var i = 0; i < $scope.listCardProduct.length; i++) {
                                    if ($scope.listCardProduct[i].ProductCode == productCode) {
                                        var currentQuantity = $scope.listCardProduct[i].Quantity + quantity;
                                        if (currentQuantity <= 65000) {
                                            $scope.listCardProduct[i].Quantity += quantity
                                        }
                                        else {
                                            App.toastrError("Vui lòng nhập số lượng sản phẩm nhỏ hơn hoặc bằng " + (65000 - $scope.listCardProduct[i].Quantity));
                                        }
                                        isExistProd = true;
                                        break
                                    }
                                }
                                if (!isExistProd) {
                                    if (quantity > 65000) {
                                        App.toastrError("Vui lòng nhập số lượng sản phẩm nhỏ hơn 65000");
                                    }
                                    else {
                                        var data = { ID: idProd, CreatedTime: dateCreateProd, CreatedBy: userName, ProductName: prodFilter.Name, ProductCode: productCode, Quantity: quantity, JcAct: activity };
                                        $scope.listCardProduct.push(data);
                                    }
                                }
                            } else {
                                var data = { ID: idProd, CreatedTime: dateCreateProd, CreatedBy: userName, ProductName: prodFilter.Name, ProductCode: productCode, Quantity: quantity, JcAct: activity };
                                $scope.listCardProduct.push(data);
                            }
                            isChange = true;
                            $scope.ProductBuffer.ListProduct = $scope.listCardProduct;
                        } else {
                            App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_QUANTITY))
                        }
                    }
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }
    $scope.deletedProduct = function (id) {
        if ($scope.isAceptCard) {
            for (var i = 0; i < $scope.listCardProduct.length; i++) {
                if ($scope.listCardProduct[i].ID == id) {
                    $scope.listCardProduct.splice(i, 1);
                    if (id > 0) {
                        $scope.ProductBuffer.ListDelProduct.push(id);
                        isChange = true;
                    }
                    break;
                }
            }
            $scope.ProductBuffer.ListProduct = $scope.listCardProduct;
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    //Tab service
    var idSer = -1;
    $scope.addService = function (serviceCode, quantity, activity) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                idSer--;
                var dateCreateSer = new Date();
                if (serviceCode == '' && quantity == '') {
                    App.toastrError(caption.CJ_MSG_SELECT_SERVICE_QUANTITY);
                } else {
                    if (serviceCode == '') {
                        App.toastrError(caption.CJ_MSG_SELECT_SERVICE);
                    } else if (quantity == '' || quantity == null) {
                        App.toastrError(caption.CJ_MSG_SELECT_QUANTITY);
                    } else {
                        if (quantity >= 0) {
                            var serFilter = $scope.listService.find(function (element) {
                                if (element.Code == serviceCode) return true;
                            });
                            if ($scope.listCardService.length > 0) {
                                var isExistSer = false;
                                for (var i = 0; i < $scope.listCardService.length; i++) {
                                    if ($scope.listCardService[i].ServiceCode == serviceCode) {
                                        //$scope.listCardService[i].Quantity += quantity;
                                        //isExistSer = true;
                                        //break

                                        var currentQuantity = $scope.listCardService[i].Quantity + quantity;
                                        if (currentQuantity <= 65000) {
                                            $scope.listCardService[i].Quantity += quantity
                                        }
                                        else {
                                            App.toastrError("Vui lòng nhập số lượng dịch vụ nhỏ hơn hoặc bằng " + (65000 - $scope.listCardService[i].Quantity));
                                        }
                                        isExistSer = true;
                                        break
                                    }
                                }
                                if (!isExistSer) {
                                    var data = { ID: idSer, CreatedTime: dateCreateSer, CreatedBy: userName, ServiceName: serFilter.Name, ServiceCode: serviceCode, Quantity: quantity, JcAct: activity };
                                    $scope.listCardService.push(data);
                                }
                            } else {
                                if (quantity > 65000) {
                                    App.toastrError("Vui lòng nhập số lượng dịch vụ nhỏ hơn 65000");
                                }
                                else {
                                    var data = { ID: idSer, CreatedTime: dateCreateSer, CreatedBy: userName, ServiceName: serFilter.Name, ServiceCode: serviceCode, Quantity: quantity, JcAct: activity };
                                    $scope.listCardService.push(data);
                                }
                            }
                            isChange = true;
                            $scope.ServiceBuffer.ListService = $scope.listCardService;
                        } else {
                            App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_QUANTITY))
                        }
                    }
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }
    $scope.deletedService = function (id) {
        if ($scope.isAceptCard) {
            for (var i = 0; i < $scope.listCardService.length; i++) {
                if ($scope.listCardService[i].ID == id) {
                    $scope.listCardService.splice(i, 1);
                    if (id > 0) {
                        $scope.ServiceBuffer.ListDelService.push(id);
                        isChange = true;
                    }
                    break;
                }
            }
            $scope.ServiceBuffer.ListService = $scope.listCardService;
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    //end right
    //left
    $scope.addMember = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
                    controller: 'add-group-or-teamCardJob',
                    size: '55',
                    resolve: {
                        obj: function () {
                            return {
                                CardCode: $scope.obj.CardCode,
                                Type: 4
                            };
                        }
                    },
                    backdrop: 'static',
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.checklists = rs;
                        angular.forEach(rs, function (value, key) {
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $scope.checkList[value.ChkListCode] = result;
                            })
                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                rs = rs.data;
                                $scope.statusItem[value.ChkListCode] = rs;
                            })
                        })
                    });
                    dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                    dataserviceCardJob.getGroupDepartmentAssign($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.lstGrpAssign = rs.Group
                        $scope.lstDpmAssign = rs.Dpm
                    });
                }, function () {
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    };
    $scope.changeWeightNum = function (weightNum) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if (weightNum != objOld.weightNum) {
                    document.getElementById("weightNum").style.fontWeight = "bold";
                } else {
                    document.getElementById("weightNum").style.fontWeight = "normal";
                }
                isChange = true;
                if (weightNum >= 0) {
                } else {
                    App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_WEIGHT_NUM))
                    $scope.model.WeightNum = 0;
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }

    $scope.changeWorkType = function (type) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if (type != objOld.workType) {
                    document.getElementById("workType").style.fontWeight = "bold";
                    isChange = true;
                } else {
                    document.getElementById("workType").style.fontWeight = "normal";
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    };

    $scope.changeCardStatus = function (status) {
        isChange = true;
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if (status != objOld.status) {
                    document.getElementById("status").style.fontWeight = "bold";
                    isChange = true;
                } else {
                    document.getElementById("status").style.fontWeight = "normal";
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    };

    $scope.changeCardLevel = function (level) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if (level != objOld.cardLevel) {
                    document.getElementById("cardLevel").style.fontWeight = "bold";
                    isChange = true;
                } else {
                    document.getElementById("cardLevel").style.fontWeight = "normal";
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    };

    $scope.changeCost = function (cost) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if (cost >= 0) {
                var obj = {
                    CardCode: $scope.obj.CardCode,
                    Cost: cost
                }
                dataserviceCardJob.updateCost(obj, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        if (rs.Title != '') {
                            App.toastrSuccess(rs.Title);
                        }
                    }
                });
            } else {
                App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_COST))
            }
        }
    };
    $scope.changeCardCurrency = function (currency) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            var obj = {
                CardCode: $scope.obj.CardCode,
                Currency: currency
            }
            dataserviceCardJob.updateCurrency(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                }
            });
        }
    }
    $scope.updateActivity = function (value, isCheck) {
        if (isCheck) {
            var activity = $scope.activity.find(function (element) {
                if (element.Value != value && element.Value != 0) return true;
            });
            if (activity) {
                activity.IsCheck = false;
            }
            if (value == 2 && isCheck) {
                $scope.isAceptCard = true;
                $scope.disableBoardList = false;
            }
            else {
                $scope.isAceptCard = false;
                $scope.disableBoardList = true;
            }
            $scope.disableCkEditer(editor);
        }
        dataserviceCardJob.updateActivity($scope.obj.CardCode, value, isCheck, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                var activity = $scope.activity.find(function (element) {
                    if (element.Value == value) return true;
                });
                if (activity) {
                    activity.Date = rs.Object.Date;
                    activity.Time = rs.Object.Time;
                }
                App.toastrSuccess(rs.Title);
                isChange = true;
                dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.ActivityData = rs;
                    if ($rootScope.ActivityData.length > 0) {
                        for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                            if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                            }
                        }
                    }
                });
                dataserviceCardJob.getCardActivityByUser($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.activity = rs;
                    if ($scope.activity.length > 0) {

                        if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                            $scope.isAceptCard = true;
                            $scope.disableBoardList = false;
                        } else {
                            $scope.isAceptCard = false;
                            $scope.disableBoardList = true;
                        }
                    }
                });
            }
        });
    }
    $scope.editDescription = function () {
        if ($scope.isAceptCard) {
            if ($scope.model.Description === "" || $scope.model.Description == null || $scope.model.Description == undefined) {
                return;
            }
            var obj = {
                CardCode: $scope.obj.CardCode,
                Description: $scope.model.Description
            }
            //bôi đậm khi chỉnh sửa
            if ($scope.model.Description != objOld.description) {
                document.getElementById("description").style.fontWeight = "bold";
                isChange = true;
            } else {
                document.getElementById("description").style.fontWeight = "normal";
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    };
    $scope.cardChangeBeginTime = function (beginTime) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if (beginTime != objOld.beginTime) {
                    document.getElementById("beginTime").style.fontWeight = "bold";
                    isChange = true;
                } else {
                    document.getElementById("beginTime").style.fontWeight = "normal";
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }
    $scope.cardChangeEndTime = function (endTime) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if (endTime != objOld.endTime) {
                    document.getElementById("endTime").style.fontWeight = "bold";
                    isChange = true;
                } else {
                    document.getElementById("endTime").style.fontWeight = "normal";
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }
    $scope.cardQuantitative = function (quantitative) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if (quantitative >= 0) {
                dataserviceCardJob.updateQuantitative($scope.obj.CardCode, quantitative, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        if (rs.Title != '') {
                            App.toastrSuccess(rs.Title);
                        }
                    }
                })
            } else {
                App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_QUANTITATIVE))
            }
        }
    }
    $scope.cardUnit = function (unit) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            dataserviceCardJob.updateUnit($scope.obj.CardCode, unit, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                }
            })
        }
    }

    //File
    $scope.addLabel = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/label.html',
                controller: 'labelCardJob',
                size: '35',
                resolve: {
                    cardCode: function () {
                        return $scope.obj.CardCode;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.model = rs.Object.CardDetail;
                    $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                    $scope.model.EndTime = $scope.model.EndTime != '' ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : '';
                    $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';

                    $scope.completeBoard = rs.Object.BoardCompleted;
                    $scope.completeList = rs.Object.ListCompleted;
                });
            }, function () {
            });
        }
    }
    $scope.addAttachment = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                $("#fileAttachment").trigger("click");
                isChange = true;
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }
    $scope.loadAttachment = function (event) {
        var file = event.target.files[0];
        if (file != undefined) {
            var data = new FormData();
            data.append("FileUpload", file);
            dataserviceCardJob.uploadAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var fileName = $('#fileAttachment').val();
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                    var file = fileName.split('\\');
                    $scope.fileAttachment = {
                        FileName: file[file.length - 1],
                        FileUrl: '/uploads/files/' + rs.Object,
                        CardCode: $scope.obj.CardCode
                    }
                    $('#fileAttachment').replaceWith($('#fileAttachment').val('').clone(true));

                    dataserviceCardJob.addAttachment($scope.fileAttachment, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $scope.attachments = rs;
                            });
                            dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.ActivityData = rs;
                                if ($rootScope.ActivityData.length > 0) {
                                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                        }
                                    }
                                }
                            });
                        }
                    })
                }
            });
        }
    }
    $scope.deleteAttachment = function (fileCode, type) {
        if ($scope.isAceptCard) {
            var data = {
                Type: type,
                FileCode: fileCode,
                CardCode: $scope.obj.CardCode
            };
            dataserviceCardJob.deleteAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    var obj = { IdObject: "FILE", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                    if ($rootScope.settingNotification == "NO") {
                        $rootScope.listNotification.push(obj);

                    } else {
                        $rootScope.listNotification.push(obj);
                        var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                        dataserviceCardJob.sendNotification(data, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            } else {
                                App.toastrSuccess(rs.Title);
                            }
                        })
                    }
                    App.toastrSuccess(rs.Title);
                    isChange = true;
                    dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.attachments = rs;
                    });
                    dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                }
            });
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }
    $scope.assignUserToFile = function (id, memberId) {

        if ($scope.isAceptCard) {
            if ($scope.RoleUser == "ROLE_LEADER" || userName == $scope.model.CreatedBy || userName == memberId) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/assign-user-to-file.html',
                    controller: 'assign-user-to-file',
                    size: '40',
                    backdrop: 'static',
                    resolve: {
                        cardCodeAssign: function () {
                            return {
                                CardCode: $scope.cardCode,
                                Id: id
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    isChange = true;
                });
            } else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }
    $scope.downloadAttach = function (url, fileCode, type) {
        if (type == 1) {
            window.target = "_blank";
            location.href = url;
        }
        else if (type == 2) {
            dataserviceCardJob.isFileEdms(fileCode, url, function (rs) {
                rs = rs.data;
                if (rs) {
                    location.href = "/Admin/CardJob/Download?"
                        + "fileCode=" + fileCode + "&url=" + url;
                }
                else {
                    window.target = "_blank";
                    location.href = url;
                }
            })
        }
        //dataserviceCardJob.getListUserFile(id, function (rs) {
        //    rs = rs.data;
        //    var isExist = false;
        //    $scope.listUserFile = rs.Object;
        //    for (var i = 0; i < $scope.listUserFile.length; i++) {
        //        if ($scope.listUserFile[i].UserName == userName) {
        //            isExist = true;
        //            break;
        //        }
        //    }

        //    if (isExist || memberId === userName) {
        //        if (!isEdms) {
        //            window.target = "_blank";
        //            location.href = url;
        //        }
        //        else {
        //            location.href = "/Admin/CardJob/Download?"
        //                + "Id=" + idMapping;
        //        }

        //    } else {
        //        App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
        //    }

        //})
    }

    $scope.viewFile = function (fileCode, url) {
        var data = {
            CardCode: $scope.obj.CardCode,
            FileCode: fileCode,
            Url: url
        };

        var extension = url.substr(url.lastIndexOf('.') + 1);
        var word = ['DOCX', 'DOC'];
        var pdf = ['PDF'];
        var excel = ['XLS', 'XLSX'];
        if (word.indexOf(extension.toUpperCase()) !== -1) {
            dataserviceCardJob.viewFileOnline(data, function (rs) {
                window.open('/Admin/Docman#', '_blank');
                dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.attachments = rs;
                });
            });
        }
        else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
            dataserviceCardJob.viewFileOnline(data, function (rs) {
                window.open('/Admin/PDF#', '_blank');
                dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.attachments = rs;
                });
            });
        }
        else if (excel.indexOf(extension.toUpperCase()) !== -1) {
            dataserviceCardJob.viewFileOnline(data, function (rs) {
                window.open('/Admin/Excel#', '_blank');
                dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.attachments = rs;
                });
            });
        }
        else {
            window.open(url, '_blank');
            dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                rs = rs.data;
                $scope.attachments = rs;
            });
        }
    }

    //File item check
    var chkCode = "";

    $scope.addAttachmentItem = function (itemCode) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {

                    dataserviceCardJob.checkFileItem(itemCode, function (rs) {
                        rs = rs.data;
                        if (rs) {
                            App.toastrError(caption.CJ_MSG_ITEM_CHECK_EXIST_FILE);
                        }
                        else {
                            chkCode = itemCode;
                            $("#fileAttachmentItem").trigger("click");
                            isChange = true;
                        }
                    })
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + para);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }

    $scope.loadAttachmentItem = function (event) {
        var file = event.target.files[0];
        if (file != undefined) {
            var data = new FormData();
            data.append("FileUpload", file);
            dataserviceCardJob.uploadAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var fileName = $('#fileAttachmentItem').val();
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                    var file = fileName.split('\\');
                    $scope.fileAttachment = {
                        FileName: file[file.length - 1],
                        FileUrl: '/uploads/files/' + rs.Object,
                        CardCode: $scope.obj.CardCode,
                        ChkListCode: chkCode
                    }
                    $('#fileAttachmentItem').replaceWith($('#fileAttachmentItem').val('').clone(true));
                    dataserviceCardJob.addAttachment($scope.fileAttachment, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            chkCode = "";
                            dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $scope.attachments = rs;
                            });
                            dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.ActivityData = rs;
                                if ($rootScope.ActivityData.length > 0) {
                                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                        }
                                    }
                                }
                            });
                            dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;

                                $rootScope.ItemCheck = rs;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                })
                            });
                        }
                    })
                }
            });
        }
    }

    //Workflow
    $scope.IsCreateWF = false;

    $scope.changeWorkFlow = function () {
        isChange = true;
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmQuestion.html',
            windowClass: "message-center",
            resolve: {
                params: function () {
                    return {
                        CardCode: $scope.obj.CardCode,
                        WfCode: $scope.modelWF.WorkflowCode
                    };
                }
            },
            controller: function ($scope, $uibModalInstance, params) {
                $scope.message = caption.CJ_MSG_QUESTION_CREATE_WF;
                $scope.ok = function () {
                    dataserviceCardJob.createInstanceWF(params.WfCode, params.CardCode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);

                            $rootScope.wfInstance = rs.Object.WfInstCode;
                            $uibModalInstance.close();
                            dataserviceCardJob.insertInstRunning(rs.Object.WfInstCode, rs.Object.WorkflowCode, function (rs) { })
                        }
                    })
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.modelWF.WfInstCode = $rootScope.wfInstance;
            dataserviceCardJob.getActInstCard($rootScope.wfInstance, $scope.obj.CardCode, function (rs) {
                rs = rs.data;
                $scope.lstActInstance = rs;
            })
            dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                rs = rs.data;
                $scope.attachments = rs;
            });
            dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                rs = rs.data;
                $scope.checklists = rs;
                $rootScope.ItemCheck = rs;
                angular.forEach(rs, function (value, key) {
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $scope.checkList[value.ChkListCode] = result;
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            $scope.IsCreateWF = false;
            dataserviceCardJob.getAllWfInstance(function (rs) {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }, function () {
        });
    }

    $scope.checkCreateWF = function () {

        if ($scope.IsCreateWF) {
            dataserviceCardJob.checkWfInstCard($scope.obj.CardCode, function (rs) {
                rs = rs.data;
                if (rs) {
                    $scope.IsCreateWF = false;
                    return App.toastrError(caption.CJ_MSG_CARD_HAS_WF);
                }
                dataserviceCardJob.getWorkFlow(function (rs) {
                    rs = rs.data;
                    $scope.listWorkFlow = rs;
                })
            })
        }
        else {
            dataserviceCardJob.getWfInst($scope.obj.CardCode, function () {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }
    }

    $scope.changeActInst = function () {
        var data = {
            ActInstCode: $scope.modelWF.ActInstCode,
            WfInstCode: $scope.modelWF.WfInstCode,
            ObjectInst: $scope.obj.CardCode,
            ObjectType: "CARD_JOB",
        };
        dataserviceCardJob.insertObjectProcess(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, $scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.lstActInstance = rs;
                })
            }
        })
    }

    //End workflow

    //Check list
    $scope.modelCheckList = {
        Title: '',
        WeightNum: '',
    }

    $scope.isUpdateCheckList = false;

    $scope.addCheckList = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if ($scope.model.WorkflowCode == null || $scope.model.WorkflowCode == "" || $scope.model.WorkflowCode == undefined) {
                    if ($scope.checklist.validate()) {
                        var chkCode = "CHECK_LIST_" + generateUUID();
                        var obj = {
                            CardCode: $scope.obj.CardCode,
                            CheckTitle: $scope.modelCheckList.Title,
                            WeightNum: $scope.modelCheckList.WeightNum,
                            ChkListCode: chkCode
                        }
                        dataserviceCardJob.addCheckList(obj, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                isChange = true;
                                dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                            rs = rs.data;
                                            $scope.statusItem[value.ChkListCode] = rs;
                                        })
                                    })
                                });
                                dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                                    rs = rs.data;
                                    if (!rs.Error) {
                                        $scope.completeBoard = rs.Object.BoardCompleted;
                                        $scope.completeList = rs.Object.ListCompleted;
                                        $scope.leader = rs.Object.Leader;
                                        setTimeout(function () {
                                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                        }, 100);
                                    }
                                });
                                $scope.modelCheckList.Title = '';
                                $scope.modelCheckList.WeightNum = '';
                            }
                        })
                    }
                }
                else {
                    App.toastrError(caption.CJ_MSG_CARD_BELONG_WORK_FLOW);
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }

    $scope.deleteCheckList = function (CheckCode) {
        if ($scope.isAceptCard) {
            if ($scope.model.WorkflowCode == null || $scope.model.WorkflowCode == "" || $scope.model.WorkflowCode == undefined) {
                dataserviceCardJob.deleteCheckList(CheckCode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var obj = { IdObject: "ITEMCHECK", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                        if ($rootScope.settingNotification == "NO") {
                            $rootScope.listNotification.push(obj);

                        } else {
                            $rootScope.listNotification.push(obj);
                            var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                            dataserviceCardJob.sendNotification(data, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                }
                            })
                        }
                        App.toastrSuccess(rs.Title);
                        isChange = true;
                        dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.checklists = rs;

                            //$rootScope.ItemCheck = $scope.checklists;
                            angular.forEach(rs, function (value, key) {
                                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                    result = result.data;
                                    $scope.checkList[value.ChkListCode] = result;
                                })
                            })
                        });
                        dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            if (!rs.Error) {
                                $scope.completeBoard = rs.Object.BoardCompleted;
                                $scope.completeList = rs.Object.ListCompleted;
                                $scope.leader = rs.Object.Leader;
                                setTimeout(function () {
                                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                }, 100);
                            }
                        });
                        $scope.model.Completed = rs.Object.PercentCard;
                        $scope.completeList = rs.Object.PercentList;
                        $scope.completeBoard = rs.Object.PercentBoard;
                    }
                })
            }
            else {
                App.toastrError(caption.CJ_MSG_CARD_FLOW_NOT_DEL_ITEM);
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.assignUserToItem = function (chkListCode) {
        if ($scope.isAceptCard) {
            if ($scope.RoleUser == "ROLE_LEADER" || userName == $scope.model.CreatedBy || userName == memberId) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/assign-user-item-check.html',
                    controller: 'assign-user-item-check',
                    size: '50',
                    resolve: {
                        cardCodeAssign: function () {
                            return {
                                ChkListCode: chkListCode,
                                CardCode: $scope.obj.CardCode
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    //$scope.checklists = $rootScope.ItemCheck;
                    isChange = true;
                    dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.checklists = rs;
                        angular.forEach(rs, function (value, key) {
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $scope.checkList[value.ChkListCode] = result;
                            })
                        })
                    });
                });
            } else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }

        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.getCheckList = function (code, title, weightNum) {
        $scope.modelCheckList.ChkListCode = code;
        $scope.modelCheckList.Title = title;
        $scope.modelCheckList.WeightNum = weightNum;
        $scope.isUpdateCheckList = true;
    }

    //updateCheckList
    $scope.updateCheckList = function () {
        if ($scope.isAceptCard) {
            if ($scope.model.WorkflowCode == null || $scope.model.WorkflowCode == "" || $scope.model.WorkflowCode == undefined) {
                if ($scope.checklist.validate()) {
                    var obj = {
                        CardCode: $scope.obj.CardCode,
                        CheckTitle: $scope.modelCheckList.Title,
                        WeightNum: $scope.modelCheckList.WeightNum,
                        ChkListCode: $scope.modelCheckList.ChkListCode
                    }
                    dataserviceCardJob.updateCheckList(obj, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);
                            isChange = true;
                            dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                })
                            });
                            dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.completeBoard = rs.Object.BoardCompleted;
                                    $scope.completeList = rs.Object.ListCompleted;
                                    $scope.leader = rs.Object.Leader;
                                    setTimeout(function () {
                                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                    }, 100);
                                }
                            });
                            $scope.modelCheckList.ChkListCode = "";
                            $scope.modelCheckList.Title = "";
                            $scope.modelCheckList.WeightNum = "";
                            $scope.isUpdateCheckList = false;
                            $scope.model.Completed = rs.Object.PercentCard;
                            $scope.completeList = rs.Object.PercentList;
                            $scope.completeBoard = rs.Object.PercentBoard;
                        }
                    })
                }

            }
            else {
                App.toastrError(caption.CJ_MSG_CARD_FLOW_NOT_UPDATE);
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.validationOptionsCheckList = {
        rules: {
            Title: {
                required: true,
                maxlength: 255,
            },
            WeightNumCheckList: {
                required: true,
                min: 0,
                max: 100,
            }
        },
        messages: {
            Title: {
                required: caption.COM_ERR_REQUIRED.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE),//'Nhập tiêu đề!',
                maxlength: caption.COM_ERR_EXCEED_CHARACTERS.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE).replace("{1}", "255")//'Cho phép tối đa 255 ký tự!'
            },
            WeightNumCheckList: {
                required: caption.CJ_VALIDATE_ENTER_WEIGHTNUM,
                min: caption.CJ_VALIDATE_WEIGHT_NUM_GREATER_THAN_0,
                max: caption.CJ_VALIDATE_WEIGHT_NUM_SMALLER_THAN_100
            }
        }
    }

    //Sub item
    $scope.deleteCheckItem = function (id) {
        if ($scope.isAceptCard) {
            dataserviceCardJob.deleteCheckItem(id, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    isChange = true;
                    dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.checklists = rs;
                        angular.forEach(rs, function (value, key) {
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $scope.checkList[value.ChkListCode] = result;
                            })
                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                rs = rs.data;
                                $scope.statusItem[value.ChkListCode] = rs;
                            })
                        })
                    });
                    dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        if (!rs.Error) {
                            $scope.completeBoard = rs.Object.BoardCompleted;
                            $scope.completeList = rs.Object.ListCompleted;
                            $scope.leader = rs.Object.Leader;
                            setTimeout(function () {
                                validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                            }, 100);
                        }
                    });
                    $scope.model.Completed = rs.Object.PercentCard;
                    $scope.completeList = rs.Object.PercentList;
                    $scope.completeBoard = rs.Object.PercentBoard;
                }
            })
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.checkItemClick = function (itemId, checkListId) {
        if ($scope.isAceptCard) {
            dataserviceCardJob.changeChkItemStatus(itemId, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    isChange = true;
                    dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                    if (rs.Object) {
                        dataserviceCardJob.checkCardSuccess($scope.obj.CardCode, function (result) {
                            result = result.data;
                            if (result == true) {
                                $scope.model.Status = "DONE";
                                dataserviceCardJob.changeCardStatus($scope.obj.CardCode, $scope.model.Status, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    }
                                    else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                });
                            } else if ($scope.model.Status == "DONE") {
                                $scope.model.Status = "START";
                                dataserviceCardJob.changeCardStatus($scope.obj.CardCode, $scope.model.Status, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    }
                                    else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                })
                            }
                        })
                        $scope.model.Completed = rs.Object.PercentCard;
                        $scope.completeList = rs.Object.PercentList;
                        $scope.completeBoard = rs.Object.PercentBoard;
                        var checkList = $scope.checklists.find(function (element) {
                            if (element.Id == checkListId) return true;
                        });
                        if (checkList) {
                            checkList.Completed = rs.Object.PercentCheckList;
                        }
                    }
                }
            });
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.addCheckItem = function (checkCode) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                var obj = {
                    ChkListCode: checkCode,
                    Title: $scope.checkitem.Title
                }
                if ($scope.checkitem.Title != '') {
                    dataserviceCardJob.addCheckItem(obj, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            isChange = true;
                            $scope.checkitem.Title = '';
                            dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;

                                //$rootScope.ItemCheck = $scope.checklists;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                        rs = rs.data;
                                        $scope.statusItem[value.ChkListCode] = rs;
                                    })
                                })
                            });
                            dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.completeBoard = rs.Object.BoardCompleted;
                                    $scope.completeList = rs.Object.ListCompleted;
                                    $scope.leader = rs.Object.Leader;
                                    setTimeout(function () {
                                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                    }, 100);
                                }
                            });
                            $scope.show.addCheckItem[checkCode] = false;
                            $scope.model.Completed = rs.Object.PercentCard;
                            $scope.completeList = rs.Object.PercentList;
                            $scope.completeBoard = rs.Object.PercentBoard;
                        }
                    })
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    };

    $scope.editCheckItemTitle = function (e) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var itemTitle = e.target.value;
                    var itemId = e.target.getAttribute("itemid");
                    $scope.show.editCheckItem[e.target.getAttribute('itemid')] = false;
                    if (itemTitle != "" && itemTitle != null && itemTitle != undefined) {
                        var obj = {
                            Id: itemId,
                            Title: itemTitle
                        }
                        dataserviceCardJob.changeChkItemTitle(obj, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                                            rs = rs.data;
                                            $scope.statusItem[value.ChkListCode] = rs;
                                        })
                                    })
                                });
                                $rootScope.getLogActivity();
                            }
                        })
                    } else {
                        App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + $scope.obj.CardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }

    $scope.assignUserToSubItem = function (checkitemId, checkListCode) {

        if ($scope.isAceptCard) {
            if ($scope.RoleUser == "ROLE_LEADER" || userName == $scope.model.CreatedBy || userName == memberId) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/assign-user-sub-item-check.html',
                    controller: 'assign-user-sub-item-check',
                    size: '50',
                    resolve: {
                        item: function () {
                            return {
                                CheckitemId: checkitemId,
                                CheckListCode: checkListCode,
                                CardCode: $scope.obj.CardCode
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    isChange = true;
                    dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.checklists = rs;
                        angular.forEach(rs, function (value, key) {
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $scope.checkList[value.ChkListCode] = result;
                            })
                        })
                    });
                });
            } else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }

        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    //Comment
    $scope.addComment = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                if ($scope.comment.Content == "") {
                    return;
                }
                var obj = {
                    CardCode: $scope.obj.CardCode,
                    CmtContent: $scope.comment.Content
                }
                dataserviceCardJob.addComment(obj, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var obj = { IdObject: "CMT", Action: "ADD", UserAction: $scope.currentUser, CreatedTime: new Date() }
                        if ($rootScope.settingNotification == "NO") {
                            $rootScope.listNotification.push(obj);

                        } else {
                            $rootScope.listNotification.push(obj);
                            var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                            dataserviceCardJob.sendNotification(data, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                }
                            })
                        }
                        isChange = true;
                        App.toastrSuccess(rs.Title);
                        $scope.comment.Content = '';
                        dataserviceCardJob.getComment($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.comments = rs;
                        });
                    }
                })
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }

    $scope.deleteComment = function (CmtId) {
        if ($scope.isAceptCard) {
            dataserviceCardJob.deleteComment(CmtId, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    var obj = { IdObject: "CMT", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                    if ($rootScope.settingNotification == "NO") {
                        $rootScope.listNotification.push(obj);

                    } else {
                        $rootScope.listNotification.push(obj);
                        var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                        dataserviceCardJob.sendNotification(data, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            } else {
                                App.toastrSuccess(rs.Title);
                            }
                        })
                    }
                    App.toastrSuccess(rs.Title);
                    isChange = true;
                    dataserviceCardJob.getComment($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.comments = rs;
                    });
                }
            });
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.updateComment = function (e) {
        if ($scope.isAceptCard) {
            console.log(e.target.getAttribute('cmtid'));
            $scope.show.editComment[e.target.getAttribute('cmtid')] = false;
            var obj = {
                Id: e.target.getAttribute('cmtid'),
                CmtContent: e.target.value
            }
            dataserviceCardJob.updateComment(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    var obj = { IdObject: "CMT", Action: "UPDATE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                    if ($rootScope.settingNotification == "NO") {
                        $rootScope.listNotification.push(obj);

                    } else {
                        $rootScope.listNotification.push(obj);
                        var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                        dataserviceCardJob.sendNotification(data, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            } else {
                                App.toastrSuccess(rs.Title);
                            }
                        })
                    }
                    App.toastrSuccess(rs.Title);
                    isChange = true;
                    dataserviceCardJob.getComment($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.comments = rs;
                    });
                }
            });
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    };

    // Report progress
    $scope.itemWork = {
        checkItem: false
    };
    $scope.addItemWork = function (code, title) {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                $rootScope.isDisabled = false;
                if ($scope.model.Status == "CREATED") {
                    dataserviceCardJob.changeCardStatus($scope.obj.CardCode, "START", function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                        }
                        else {
                            dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.completeBoard = rs.Object.BoardCompleted;
                                    $scope.completeList = rs.Object.ListCompleted;
                                    $scope.leader = rs.Object.Leader;
                                    setTimeout(function () {
                                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                    }, 100);
                                }
                            });
                        }
                    });
                }

                dataserviceCardJob.checkConstraintSuccess(code, function (rs) {
                    rs = rs.data;
                    if (rs) {
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: ctxfolderCardJob + '/item-work.html',
                            controller: 'add-item-work',
                            size: '50',
                            resolve: {
                                paraItemWork: function () {
                                    return {
                                        CardCode: $scope.obj.CardCode,
                                        ChkListCode: code,
                                        CheckTitle: title
                                    }
                                }
                            }
                        });
                        modalInstance.result.then(function (d) {
                            var obj = { IdObject: "ITEMWORK", Action: "ADD", UserAction: $scope.currentUser, CreatedTime: new Date() }
                            if ($rootScope.settingNotification == "NO") {
                                $rootScope.listNotification.push(obj);

                            }
                            else {
                                $rootScope.listNotification.push(obj);
                                var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                                dataserviceCardJob.sendNotification(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    } else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                })
                            }
                            isChange = true;
                            dataserviceCardJob.getListWorkItem($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $scope.listItemWork = rs.Object;
                            });
                            dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.ActivityData = rs;
                                if ($rootScope.ActivityData.length > 0) {
                                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                        }
                                    }
                                }
                            });
                            dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                        rs = rs.data;
                                        $scope.statusItem[value.ChkListCode] = rs;
                                    })
                                })
                            });
                            dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.completeBoard = rs.Object.BoardCompleted;
                                    $scope.completeList = rs.Object.ListCompleted;
                                    $scope.leader = rs.Object.Leader;
                                    setTimeout(function () {
                                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                    }, 100);
                                }
                            });
                        });
                    } else {
                        App.toastrError(caption.CJ_MSG_CONSTRAINT_ITEM_NO_SUCCESS);
                    }
                })
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }
    }

    $scope.editItemWork = function (id) {

        if (!$scope.isNotLeader) {
            if ($scope.isAceptCard) {
                if (userName == createdBy || $scope.RoleUser == "ROLE_LEADER") {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/item-work.html',
                        controller: 'edit-item-work',
                        size: '50',
                        resolve: {
                            idItemWork: function () {
                                return {
                                    Id: id,
                                    CardCode: $scope.obj.CardCode,
                                    CheckTitle: title
                                };
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        var obj = { IdObject: "ITEMWORK", Action: "UPDATE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                        if ($rootScope.settingNotification == "NO") {
                            $rootScope.listNotification.push(obj);

                        } else {
                            $rootScope.listNotification.push(obj);
                            var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                            dataserviceCardJob.sendNotification(data, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                }
                            })
                        }
                        isChange = true;
                        dataserviceCardJob.getListWorkItem($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.listItemWork = rs.Object;
                        });
                        dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                        dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.checklists = rs;
                            angular.forEach(rs, function (value, key) {
                                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                    result = result.data;
                                    $scope.checkList[value.ChkListCode] = result;
                                })
                            })
                        });
                        dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            if (!rs.Error) {
                                $scope.completeBoard = rs.Object.BoardCompleted;
                                $scope.completeList = rs.Object.ListCompleted;
                                $scope.leader = rs.Object.Leader;
                                setTimeout(function () {
                                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                }, 100);
                            }
                        });
                    });
                } else {
                    App.toastrError(CJ_MSG_CANNOT_UPDATE_CMT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
        }
    }

    $scope.deleteItemWork = function (id) {
        if ($scope.isAceptCard) {
            dataserviceCardJob.deleteWorkItemActivity(id, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    var obj = { IdObject: "ITEMWORK", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                    if ($rootScope.settingNotification == "NO") {
                        $rootScope.listNotification.push(obj);

                    } else {
                        $rootScope.listNotification.push(obj);
                        var data = { CardCode: $scope.obj.CardCode, List: $rootScope.listNotification };
                        dataserviceCardJob.sendNotification(data, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            } else {
                                App.toastrSuccess(rs.Title);
                            }
                        })
                    }
                    isChange = true;
                    App.toastrSuccess(rs.Title);
                    dataserviceCardJob.getListWorkItem($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.listItemWork = rs.Object;
                    });
                }
            });
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.approve = function (code, title) {
        if (!$scope.isDisableControl) {
            if (!$scope.isNotLeader) {
                if ($scope.isAceptCard) {
                    dataserviceCardJob.checkConstraintSuccess(code, function (rs) {
                        rs = rs.data;
                        if (rs) {
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: ctxfolderCardJob + '/approve-item-work.html',
                                controller: 'approve-item-work',
                                backdrop: 'static',
                                resolve: {
                                    para: function () {
                                        return {
                                            ChkListCode: code,
                                            Title: title
                                        };
                                    }
                                },
                                size: '50',
                            });
                            modalInstance.result.then(function (d) {
                                dataserviceCardJob.getCheckList($scope.obj.CardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;

                                    $rootScope.ItemCheck = rs;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                            rs = rs.data;
                                            $scope.statusItem[value.ChkListCode] = rs;
                                        })
                                    })
                                });
                            });
                        } else {
                            App.toastrError(caption.CJ_MSG_CONSTRAINT_ITEM_NO_SUCCESS);
                        }
                    })
                }
                else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            }
            else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }
        }
        else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }

    //add-card-inherit, card-link
    $scope.addInheritLink = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/add-card-link.html',
                        controller: 'add-card-link',
                        windowClass: "message-center",
                        size: '35',
                        backdrop: 'static',
                        resolve: {
                            cardJob: function () {
                                return {
                                    cardCode: $scope.obj.CardCode,
                                    cardName: $scope.model.CardName,
                                    Inherit: $scope.model.Inherit
                                };
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        isChange = true;
                        $scope.Links = $rootScope.CardLink.ListCardLink;
                        $scope.model.Inherit = $rootScope.CardInherit.Code;
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + para);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }

    //end left
    $scope.isHideMap = false;

    $scope.hideMap = function (index) {
        if (index == 0) {
            $scope.isHideMap = false;
        } else {
            $scope.isHideMap = true;
        }
    }

    $scope.addCheckInOut = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-check-in-out.html',
            controller: 'add-check-in-out',
            size: '50'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
                rs = rs.data;
                $scope.listShift = rs;
                if ($scope.listShift.length > 0) {
                    $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                    var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                    var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                    var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                    var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                    $scope.modelShift.In = inTime;
                    $scope.modelShift.Out = outTime;
                    if (inDate != outDate && outDate != null) {
                        $scope.modelShift.DateIn = inDate;
                        $scope.modelShift.DateOut = outDate;
                        $scope.isSameDate = false;
                    } else {
                        $scope.modelShift.DateInOut = inDate;
                        $scope.isSameDate = true;
                    }
                }
            })
        });
    }

    $scope.viewFileOnl = function (source, isEdms, id, memberId, idMapping) {
        var isExist = false;
        dataserviceCardJob.getListUserFile(id, function (rs) {
            rs = rs.data;
            $scope.listUserFile = rs.Object;
            for (var i = 0; i < $scope.listUserFile.length; i++) {
                if ($scope.listUserFile[i].UserName == userName) {
                    isExist = true;
                    break;
                }
            }
            if (isExist || memberId === userName) {
                if (!isEdms) {
                    dataserviceCardJob.getFilePath(source, $scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        if (!rs.Error) {
                            isChange = true;
                            var extension = source.substr(source.lastIndexOf('.') + 1);
                            var word = ['DOCX', 'DOC'];
                            var pdf = ['PDF'];
                            var excel = ['XLS', 'XLSX'];
                            if (word.indexOf(extension.toUpperCase()) !== -1) {
                                window.open('/Admin/Docman/Index', '_blank')
                            } else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
                                window.open('/Admin/PDF/Index', '_blank')
                            } else if (excel.indexOf(extension.toUpperCase()) !== -1) {
                                window.open('/Admin/Excel', '_blank')
                            } else {
                                window.open(source, '_blank')
                            }
                        } else {
                            if (rs.ID === -1) {
                                App.toastrError(rs.Title);
                                setTimeout(function () {
                                    var extension = source.substr(source.lastIndexOf('.') + 1);
                                    var word = ['DOCX', 'DOC'];
                                    var pdf = ['PDF'];
                                    var excel = ['XLS', 'XLSX'];
                                    if (word.indexOf(extension.toUpperCase()) !== -1) {
                                        window.open('/Admin/Docman/Index', '_blank')
                                    } else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
                                        window.open('/Admin/PDF/Index', '_blank')
                                    } else if (excel.indexOf(extension.toUpperCase()) !== -1) {
                                        window.open('/Admin/Excel', '_blank')
                                    } else {
                                        window.open(source, '_blank')
                                    }
                                }, 2000);
                            } else {
                                App.toastrError(caption.CJ_MSG_FILE_IS_EDITING);
                            }
                        }
                    });
                }
                else {
                    var extension = source.substr(source.lastIndexOf('.') + 1);
                    var word = ['DOCX', 'DOC'];
                    var pdf = ['PDF'];
                    var excel = ['XLS', 'XLSX'];
                    if (word.indexOf(extension.toUpperCase()) !== -1) {
                        dataserviceCardJob.getItemFile(idMapping, true, 2, id, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                if (rs.ID === -1) {
                                    App.toastrError(rs.Title);
                                    setTimeout(function () {
                                        window.open('/Admin/Docman#', '_blank');
                                    }, 2000);
                                    dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.attachments = rs;
                                    });
                                } else {
                                    App.toastrError(rs.Title);
                                }
                                return null;
                            } else {
                                window.open('/Admin/Docman#', '_blank');
                                dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.attachments = rs;
                                });
                            }

                        });
                    }
                    else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
                        dataserviceCardJob.getItemFile(idMapping, true, 2, id, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                if (rs.ID === -1) {
                                    App.toastrError(rs.Title);
                                    setTimeout(function () {
                                        window.open('/Admin/PDF#', '_blank');
                                    }, 2000);
                                    dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.attachments = rs;
                                    });
                                } else {
                                    App.toastrError(rs.Title);
                                }
                                return null;
                            } else {
                                window.open('/Admin/PDF#', '_blank');
                                dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.attachments = rs;
                                });
                            }
                        });
                    }
                    else if (excel.indexOf(extension.toUpperCase()) !== -1) {
                        dataserviceCardJob.getItemFile(idMapping, true, 2, id, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                if (rs.ID === -1) {
                                    App.toastrError(rs.Title);
                                    setTimeout(function () {
                                        window.open('/Admin/Excel#', '_blank');
                                    }, 2000);
                                    dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.attachments = rs;
                                    });
                                } else {
                                    App.toastrError(rs.Title);
                                }
                                return null;
                            } else {
                                window.open('/Admin/Excel#', '_blank');
                                dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.attachments = rs;
                                });

                            }

                        });
                    }
                    else {
                        window.open(source, '_blank');
                        dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.attachments = rs;
                        });
                    }
                }
            }
            else {
                App.toastrError(caption.CJ_MSG_U_NOT_PERMISSION_UPDATE_FILE);
            }
        })
    }

    $scope.addCheckInOut = function () {
        if ($scope.isAceptCard) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/add-check-in-out.html',
                controller: 'add-check-in-out',
                size: '50'
            });
            modalInstance.result.then(function (d) {
                dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {

                    rs = rs.data;
                    $scope.listShift = rs;
                    if ($scope.listShift.length > 0) {
                        $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                        var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                        var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                        var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                        var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                        $scope.modelShift.In = inTime;
                        $scope.modelShift.Out = outTime;
                        if (inDate != outDate && outDate != null) {
                            $scope.modelShift.DateIn = inDate;
                            $scope.modelShift.DateOut = outDate;
                            $scope.isSameDate = false;
                        } else {
                            $scope.modelShift.DateInOut = inDate;
                            $scope.isSameDate = true;
                        }
                    }
                })
            });
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }

    }

    //Save buffer
    $scope.cancel = function () {
        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
            if ($scope.descriptionOld != $scope.model.Description && $scope.descriptionOld != null && $scope.model.Description != "") {
                isChange = true;
            }
        }
        if ($scope.model.CardName == undefined) {
            $uibModalInstance.close();
        }
        else if ($scope.model.CardName.trim() == "" || $scope.model.CardName == null || $scope.model.CardName == undefined) {
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
                resolve: {
                    para: function () {
                        return $scope.model.CardCode;
                    }
                },
                windowClass: "message-center",
                controller: function ($scope, $uibModalInstance, para) {
                    $scope.message = caption.CJ_MSG_CARD_NO_TITLE_DEL;
                    $scope.ok = function () {
                        dataserviceCardJob.delCardNoTitle(para, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                                $uibModalInstance.close('cancel');
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                $uibModalInstance.close('cancel');
                            }
                        })
                    };
                    $scope.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                size: '25',
            });
            modalInstance.result.then(function (d) {
                $uibModalInstance.close();
            }, function () {
            });
        }
        else if (isChange) {
            if ($scope.model.ListCode == "" || $scope.model.ListCode == null || $scope.model.ListCode == undefined) {
                return App.toastrError(caption.CJ_MSG_SELECT_LIST)
            }
            //if ($scope.model.CardName == "" || $scope.model.CardName == null || $scope.model.CardName == undefined) {
            //    return App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
            //}

            if ($scope.model.WeightNum == "" || $scope.model.WeightNum == null || $scope.model.WeightNum == undefined) {
                $scope.model.WeightNum = 0;
            }
            var cardBufferData = {
                CardJob: $scope.model, JcRelative: $rootScope.Rela, CardLink: $rootScope.CardLink,
                ProductBuffer: $scope.ProductBuffer, ServiceBuffer: $scope.ServiceBuffer, AddressBuffer: $scope.AddressBuffer,
                CheckListItemBuffer: $rootScope.ItemCheck, TimeSpanActivity: $scope.TimeSpanActivity
            };
            for (var i = 0; i < $rootScope.ItemCheck.length; i++) {
                $rootScope.ItemCheck[i].CardCode = $scope.obj.CardCode;
            }
            var ItemProgress = {
                ItemWork: $rootScope.ItemWork,
                ItemCheck: $rootScope.ItemCheck,
                CompleteOld: $scope.CompletedOld,
                TimeSpanActivity: $scope.TimeSpanActivity
            }
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderMessage + '/messageConfirmUpdateCard.html',
                resolve: {
                    paramBuffer: function () {
                        return {
                            cardBufferData: cardBufferData,
                            ItemWorkCheck: ItemProgress
                        };
                    }
                },
                windowClass: "message-center",
                controller: function ($scope, $uibModalInstance, paramBuffer) {
                    $scope.message = caption.COM_MSG_QUESTION_SAVE;
                    $scope.ok = function () {
                        dataserviceCardJob.updateCardByBufferData(paramBuffer.cardBufferData, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                                $uibModalInstance.dismiss('cancel');
                            } else {
                                $rootScope.Assign = {
                                    ListObj: [],
                                    ListDeletedObj: [],
                                    Listmember: [],
                                    ListDeleteMember: []
                                }
                                App.toastrSuccess(rs.Title);
                                $uibModalInstance.close('cancel');
                            }
                        })
                    };
                    $scope.cancel = function () {

                        if (paramBuffer.ItemWorkCheck != null) {
                            dataserviceCardJob.rollbackDataBuffer(paramBuffer.ItemWorkCheck, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    $rootScope.Assign = {
                                        ListObj: [],
                                        ListDeletedObj: [],
                                        Listmember: [],
                                        ListDeleteMember: []
                                    }
                                    $uibModalInstance.close('cancel');
                                }
                            })
                        } else {
                            $uibModalInstance.close('cancel');
                        }
                    };
                },
                size: '25',
            });
            modalInstance.result.then(function (d) {
                $uibModalInstance.close();
                $rootScope.ListDelItemCheck = [];
            }, function () {
            });
        }
        else {
            $uibModalInstance.close('cancel');
        }
    };

    $scope.saveBuffer = function () {
        if ($scope.model.ListCode == "" || $scope.model.ListCode == null || $scope.model.ListCode == undefined) {
            return App.toastrError(caption.CJ_MSG_SELECT_LIST)
        }
        if ($scope.model.CardName.trim() == "" || $scope.model.CardName == null || $scope.model.CardName == undefined) {
            return App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
        }
        //if ($scope.model.CardName == "" || $scope.model.CardName == null || $scope.model.CardName == undefined) {
        //    return App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
        //}
        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
            if ($scope.descriptionOld != $scope.model.Description && $scope.descriptionOld != null && $scope.model.Description != "") {
                isChange = true;
            }

        }
        if (isChange) {
            var cardBufferData = {
                CardJob: $scope.model, JcRelative: $rootScope.Rela, CardLink: $rootScope.CardLink,
                Assign: $rootScope.Assign, ProductBuffer: $scope.ProductBuffer, ServiceBuffer: $scope.ServiceBuffer, AddressBuffer: $scope.AddressBuffer,
                CheckListItemBuffer: $rootScope.ItemCheck, TimeSpanActivity: $scope.TimeSpanActivity
            };
            dataserviceCardJob.updateCardByBufferData(cardBufferData, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    isChange = false;
                    $scope.initAfterCreateCard();
                    $scope.model.Completed = rs.Object.PercentCard;
                    $scope.completeList = rs.Object.PercentList;
                    $scope.completeBoard = rs.Object.PercentBoard;
                }
            })
        } else {
            App.toastrError(caption.CJ_MSG_NO_CHANGE_CONTENT);
        }
    }

    $scope.showLogActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-user-activity.html',
            controller: 'log-user-activity',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $scope.obj.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {

        });
    }

    $scope.idxViewTab = 1;

    $scope.viewTab = function (index) {
        $scope.idxViewTab = index;
    }

    //Send notifi
    $scope.sendNotifi = function () {
        if (!$scope.isAssign) {
            if ($scope.isAceptCard) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/send-notifi-card.html',
                    controller: 'send-notifi-card',
                    size: '30',
                    resolve: {
                        cardCode: function () {
                            return $scope.obj.CardCode;
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + para);
        }
    }

    //Del card
    $scope.pushTrash = function () {
        dataserviceCardJob.changeCardStatus($scope.obj.CardCode, "TRASH", function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(caption.COM_DELETE_SUCCESS);
                $uibModalInstance.close();
                //clearInterval($scope.interval);
                $rootScope.reloadGridCard();
            }
        });
    }

    //Change currency, cost
    $scope.changeCurrency = function () {
        isChange = true;
    }

    $scope.changeCost = function () {
        isChange = true;
    }

    //Workflow

    $scope.changeActInst = function (item) {
        $rootScope.ActInstCode = item.Code;
        $rootScope.ActCode = item.ActCode;
        $scope.WfInstCode = item.WfInstCode;
        dataserviceCardJob.changeActIns(item.Code, $scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.model.IsMainObj = rs.ObjEntry;
        })
    }

    $scope.changeObjEntry = function (ischeck) {

        dataserviceCardJob.changeObjEntry($rootScope.ActInstCode, $scope.obj.CardCode, ischeck, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                $scope.model.IsMainObj = false;
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
            }
        })
    }

    //File edms
    $scope.fileManage = function () {
        if ($scope.obj.CardCode == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_BOARD_LIST)
        } else {
            if ($scope.isAceptCard) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/fileManage.html',
                    controller: 'fileManage',
                    backdrop: 'static',
                    size: '60',
                    resolve: {
                        cardCode: function () {
                            return $scope.obj.CardCode;
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getAttachment($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.attachments = rs;
                    });
                    dataserviceCardJob.getActivityAssign($scope.obj.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                }, function () {
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        }


    }

    $scope.viewLogStatus = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-status-log.html',
            controller: 'log-status',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $scope.obj.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }

    //Log activity workflow
    $scope.viewLogWF = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-activity-wf.html',
            controller: 'log-activity-wf',
            backdrop: 'static',
            size: '50',
            resolve: {
                para: function () {
                    var obj = { WfInstCode: $scope.modelWF.WfInstCode, CardCode: $scope.obj.CardCode };
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    }

    //Lock card
    $scope.lockCard = function () {
        var value = false;
        if (!$scope.model.IsLock) {
            value = true;
        }
        dataserviceCardJob.lockCard($scope.obj.CardCode, value, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardDetail($scope.obj.CardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.model = rs.Object.CardDetail;
                        $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                        $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                        $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                        setTimeout(function () {
                            ckEditer();
                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                        }, 500);
                    }
                });
            }
        })
    }

    // Data logger card
    $scope.isSelectChkList = false;
    $scope.chkListSelect = [];
    $scope.modelAttr = {
        ID: "",
        DtCode: "",
        DtTitle: "",
        DtValue: "",
        DtUnit: "",
        DtValueType: "",
        DtGroup: "",
        ShiftCode: ""
    };
    $scope.fileAttr = {};
    $scope.modelListAttr = [];
    $scope.listAttrTemp = [];
    $scope.lstLoggerDataCard = [];
    $scope.lstLoggerDataCardDetail = [];
    $scope.tabTypeLogger = 0;

    $scope.changeAttrGroup = function () {
        $scope.lstLoggerDataCard = [];

        if ($scope.model.IsLock) {
            return App.toastrError(caption.CJ_MSG_CARD_LOCKED);
        }
        dataserviceCardJob.getAttrByGroup($scope.modelAttr.DtGroup, function (rs) {
            rs = rs.data;
            $scope.listAttrTemp = rs;

            if ($scope.cardLogger.validate()) {
                $scope.modelAttr.JobcardCode = $scope.obj.CardCode;
                var chkList = [];
                if (!$scope.isSelectChkList) {
                    for (var i = 0; i < $scope.checklists.length; i++) {
                        var obj = {
                            Code: $scope.checklists[i].ChkListCode,
                            Title: $scope.checklists[i].CheckTitle,
                        };
                        chkList.push(obj);
                    }
                }
                else {
                    for (var i = 0; i < $scope.chkListSelect.length; i++) {
                        var obj = {
                            Code: $scope.chkListSelect[i].ChkListCode,
                            Title: $scope.chkListSelect[i].Title,
                        };
                        chkList.push(obj);
                    }
                }

                $scope.modelAttr.ItemList = JSON.stringify(chkList);
                $scope.modelAttr.ShiftCode = $scope.attrShiftCode;

                if ($scope.model.ActInstCode === "" || $scope.model.ActInstCode === undefined) {
                    return App.toastrWarning(caption.CJ_MSG_PLS_SELECT_ACT);
                }

                $scope.modelAttr.WfInstCode = $scope.WfInstCode;
                $scope.modelAttr.ActInstCode = $scope.model.ActInstCode;

                if ($scope.modelAttr.DtValueType === "ATTR_DATA_TYPE_FILE") {
                    $scope.modelAttr.DtValue = JSON.stringify($scope.fileAttr);
                }

                for (var j = 0; j < $scope.listAttrTemp.length; j++) {

                    var objAttr = {
                        ID: $scope.listAttrTemp[j].ID,
                        Code: $scope.listAttrTemp[j].Code,
                        Title: $scope.listAttrTemp[j].Name,
                        Value: $scope.modelAttr.DtValue,
                        Unit: $scope.listAttrTemp[j].Unit,
                        Type: $scope.listAttrTemp[j].Type,
                        Shift: $scope.attrShiftCode,
                        CreatedBy: $scope.listAttrTemp[j].CreatedBy,
                        CreatedTime: $scope.listAttrTemp[j].CreatedTime,
                        WfInstCode: $scope.WfInstCode,
                        ActInstCode: $rootScope.ActInstCode,
                        ItemList: JSON.stringify(chkList),
                        JobcardCode: $scope.modelAttr.JobcardCode,
                        DtGroup: $scope.listAttrTemp[j].DtGroup
                    };

                    $scope.lstLoggerDataCard.push(objAttr);
                };
            }
        });
    };

    $scope.viewDataLogger = function () {
        dataserviceCardJob.getDataLoggerCard($scope.obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.listData = rs;
            $scope.tabTypeLogger = 1;
        });
    };

    $scope.submitAttr = function () {
        if ($scope.tabTypeLogger === 1) {
            $scope.tabTypeLogger = 0;
        } else {
            $scope.modelListAttr = [];

            if ($scope.lstLoggerDataCard.length === 0) {
                app.toastrError(caption.CJ_MSG_GROUP_TEMP_NO_ATTR);
                return;
            };

            for (var j = 0; j < $scope.lstLoggerDataCard.length; j++) {
                var objAttr = {
                    ID: $scope.lstLoggerDataCard[j].ID,
                    DtCode: $scope.lstLoggerDataCard[j].Code,
                    DtTitle: $scope.lstLoggerDataCard[j].Title,
                    DtValue: $scope.lstLoggerDataCard[j].Value,
                    DtUnit: $scope.lstLoggerDataCard[j].Unit,
                    DtValueType: $scope.lstLoggerDataCard[j].Type,
                    DtGroup: $scope.lstLoggerDataCard[j].DtGroup,
                    ShiftCode: $scope.lstLoggerDataCard[j].Shift,
                    WfInstCode: $scope.modelAttr.WfInstCode,
                    ActInstCode: $scope.modelAttr.ActInstCode,
                    ItemList: $scope.modelAttr.ItemList,
                    JobcardCode: $scope.lstLoggerDataCard[j].JobcardCode,
                };

                $scope.modelListAttr.push(objAttr);
            };

            dataserviceCardJob.insertDataLogger($scope.modelListAttr, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.lstLoggerDataCard = [];
                    $scope.modelAttr.DtGroup = '';
                    $rootScope.getLogActivity();
                }
            });
        }
    };

    $scope.deleteDataLogger = function (sessionId) {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            resolve: {
                para: function () {
                    return sessionId;
                }
            },
            controller: function ($scope, $uibModalInstance, para) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteDataLogger(para, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            $uibModalInstance.dismiss('cancel');
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '30',
        });
        modalInstance.result.then(function (d) {

        }, function () {

        });
    };

    $scope.uploadFileAttr = function () {
        $("#fileAttr").trigger("click");
    };

    $scope.loadFileAttr = function (event) {
        var file = event.target.files[0];
        if (file != undefined) {
            var data = new FormData();
            data.append("FileUpload", file);
            data.append("CardCode", $scope.obj.CardCode)
            dataserviceCardJob.uploadAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var fileName = $('#fileAttr').val();
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                    var file = fileName.split('\\');
                    $scope.fileAttr = {
                        FileName: file[file.length - 1],
                        FileUrl: '/uploads/repository/CARDJOB/' + rs.Object,
                        CardCode: $scope.obj.CardCode
                    }
                    $('#fileAttr').replaceWith($('#fileAttr').val('').clone(true));
                    App.toastrSuccess(caption.COM_MSG_DOWLOAD_SUCCESS);
                    $scope.modelAttr.DtValue = $scope.fileAttr.FileName;
                }
            });
        }
    }

    $scope.selectChkItem = function () {
        if ($scope.model.IsLock) {
            return App.toastrError(caption.CJ_MSG_CARD_LOCKED);
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/select-check-item.html',
            controller: 'select-check-item',
            backdrop: 'static',
            size: '40',
            resolve: {
                para: function () {
                    return $scope.obj.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.chkListSelect = d;
            $scope.isSelectChkList = true;
        }, function () { });
    }

    $scope.viewLogStatus = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-status-log.html',
            controller: 'log-status',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $scope.obj.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    };

    var editor;

    function ckEditer() {
        editor = CKEDITOR.replace('description', {
            cloudServices_tokenUrl: '/MobileApp/Token',
            cloudServices_uploadUrl: '/MobileApp/UploadFile',
            filebrowserBrowseUrl: '',
            filebrowserUploadUrl: '/MobileApp/Upload',
            embed_provider: '/uploader/upload.php'
        });
        setTimeout(function () {
            $scope.disableCkEditer(editor);
        }, 1000);
    }

    $scope.disableCkEditer = function (editor) {

        if (!$scope.isAceptCard) {
            editor.setReadOnly(true);
        } else {
            editor.setReadOnly(false);
        }
    }

    function initMap() {

        fields_vector_source = new ol.source.Vector({});
        var center = ol.proj.transform([$rootScope.lngDefault, $rootScope.latDefault], 'EPSG:4326', 'EPSG:3857');
        map = new ol.Map({
            target: $('#map')[0],

            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM({
                        url: 'https://mt{0-3}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}'
                    })
                }),
                new ol.layer.Vector({
                    source: fields_vector_source
                })
            ],

            view: new ol.View({
                center: center,
                zoom: 15

            }),

            controls: ol.control.defaults({
                attribution: false,
                zoom: false,
            })
        });
        var pathGG = $('#pathGG').html();
        var id = $("#ID").html();
        var aaa = parseInt(id);
        if (pathGG != "" && pathGG != null) {
            pathSourceVector = new ol.source.Vector({
                features: []
            });
            pathLayerMarker = new ol.layer.Vector({
                source: pathSourceVector
            });
            var path = polyline.decode(pathGG);

            pathLayerMarker = renderLinePathLayer(path);
            map.addLayer(pathLayerMarker);

            var styles3 = [

                new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: '#64c936',
                        width: 3
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(100, 201, 54,1)'
                    })
                }),
            ];

            var iconStyleStart = new ol.style.Style({
                image: new ol.style.Icon(({
                    anchor: [0.5, 26],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: 'https://i.imgur.com/pjZYQLJ.png'
                })),
                zIndex: 11
            });
            var iconStyleEnd = new ol.style.Style({
                image: new ol.style.Icon(({
                    anchor: [0.5, 26],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: 'https://i.imgur.com/3g07NhB.png'
                })),
                zIndex: 11
            });

            var pathLenght = path.length - 1;
            var iconFeatureStart = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.transform([parseFloat(path[0][1]), parseFloat(path[0][0])], 'EPSG:4326', 'EPSG:3857')),
                type: "valve"
            });

            iconFeatureStart.setId(1);
            iconFeatureStart.setStyle(iconStyleStart);
            var iconFeatureEnd = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.transform([parseFloat(path[pathLenght][1]), parseFloat(path[pathLenght][0])], 'EPSG:4326', 'EPSG:3857')),
                type: "valve"
            });
            iconFeatureEnd.setId(2);
            iconFeatureEnd.setStyle(iconStyleEnd);
            var vectorIcon = new ol.source.Vector({});
            vectorIcon.addFeature(iconFeatureStart);
            vectorIcon.addFeature(iconFeatureEnd);

            var vectorLayer = new ol.layer.Vector({
                source: vectorIcon,
                style: styles3
            });

            map.addLayer(vectorLayer);


            //pathSource = new ol.source.Vector({});


            pathSource.addFeature(renderLineStringFeature(path))
            var field_location = pathSource.getFeatureById(aaa).getProperties();
            var field_extent = field_location.geometry.getExtent();
            map.getView().fit(field_extent, map.getSize());
            map.getView().setZoom(12);
        }
    }

    function initDataMap() {
        if ($scope.model == null || $scope.model.LocationGps == null) {
            $scope.address.lat = $rootScope.latDefault;
            $scope.address.lng = $rootScope.lngDefault;
            $scope.address.text = $rootScope.addressDefault;
        } else {
            $scope.address.lat = parseFloat($scope.model.LocationGps.split(',')[0]);
            $scope.address.lng = parseFloat($scope.model.LocationGps.split(',')[1]);
            $scope.address.text = $scope.model.LocationText;
        }


        var centerPoint = { lat: $scope.address.lat, lng: $scope.address.lng };
        var infowindow = new google.maps.InfoWindow({
            content: $scope.address.text,
        });
        var maps = new google.maps.Map(
            document.getElementById('map'), { zoom: $rootScope.zoomMapDefault, center: centerPoint });
        var marker = new google.maps.Marker({
            zoom: 12,
            position: centerPoint,
            map: maps,
        });
        var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-33.8902, 151.1759), new google.maps.LatLng(-33.8474, 151.2631));
        var options = {
            bounds: defaultBounds,
            types: ['geocode']
        };


        //Autocomplete
        var input = document.getElementById('searchAddress');
        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);
        var service = new google.maps.places.PlacesService(maps);


        //Map change
        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Không tìm thấy địa chỉ này");
                return;
            }
            if (place.geometry.viewport) {
                maps.fitBounds(place.geometry.viewport);
            } else {
                maps.setCenter(place.geometry.location);
                maps.setZoom(17);
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);
            var html = "<b>" + place.name + "</b> <br/>" + place.formatted_address;
            infowindow.setContent(html);
            infowindow.open(maps, marker);
            $scope.address.text = place.formatted_address;
            $scope.address.lat = place.geometry.location.lat();
            $scope.address.lng = place.geometry.location.lng();
            $scope.$apply();
        });

        maps.addListener('click', function (event) {
            var point = { lat: event.latLng.lat(), lng: event.latLng.lng() }
            $scope.address.lat = point.lat;
            $scope.address.lng = point.lng;
            dataserviceCardJob.getAddress(point.lat, point.lng, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    var html = "<b>Thông tin</b> <br/>" + rs.Object;
                    infowindow.setContent(html);
                    infowindow.open(map, marker, html);
                    $scope.address.text = rs.Object;
                }
            })
            if (marker) {
                marker.setPosition(point);
            }
            else {
                marker = new google.maps.Marker({
                    position: point,
                    map: maps,
                });
            }
            maps.setZoom($rootScope.zoomMapDefault);
        })
        infowindow.open(map, marker);
        //$scope.$apply();
    }

    function mapReSize() {
        setTimeout(function () {
            map.updateSize();
        }, 600);
    }

    function loadDate() {
        $("#startDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            dateFormat: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#deadline').datepicker('setStartDate', maxDate);
            $('#endDate').datepicker('setStartDate', maxDate);
        });
        $("#endDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.Deadline != "") {
                const [day, month, year] = $scope.model.Deadline.split("/")
                var deadLine = new Date(year, month - 1, day)
                if (maxDate > deadLine) {
                    $('#startDate').datepicker('setEndDate', deadLine);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
        $("#deadline").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.EndTime != "") {
                const [day, month, year] = $scope.model.EndTime.split("/")
                var endTime = new Date(year, month - 1, day)
                if (maxDate > endTime) {
                    $('#startDate').datepicker('setEndDate', endTime);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
    }

    function validateDefaultDate(startDate, endDate, deadline) {

        setStartDate("#endDate", startDate);
        setStartDate("#deadline", startDate);
        //setEndDate
        const [dayDead, monthDead, yearDeal] = deadline.split("/")
        var deadTime = new Date(yearDeal, monthDead - 1, dayDead)
        if (endDate != "") {
            const [day, month, year] = endDate.split("/")
            var endTime = new Date(year, month - 1, day)
            if (endTime > deadTime) {
                setEndDate("#startDate", deadline)
            }
            else {
                setEndDate("#startDate", endDate)
            }
        }
        else {
            setEndDate("#startDate", deadline)
        }
    }

    setTimeout(function () {
        ckEditer();
        initMap();
        initDataMap();
        mapReSize();
        setModalDraggable(".modal-dialog");
        loadDate();
    }, 400);

    $scope.addCommonSettingWorkType = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'OBJ_WORKTYPE',
                        GroupNote: 'Kiểu công việc',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getWorkType(function (rs) {
                rs = rs.data;
                $scope.WorkTypes = rs;
            });
        }, function () { });
    }

    $scope.addCommonSettingCardLevel = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'LEVEL',
                        GroupNote: 'Độ ưu tiên',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getLevels(function (rs) {
                rs = rs.data;
                $scope.CardLevels = rs;
            });
        }, function () { });
    }

    $scope.addProductActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_PRODUCT',
                        GroupNote: 'Hoạt động sản phẩm',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityProduct(function (rs) {
                rs = rs.data;
                $scope.listActivityProduct = rs;
            })
        }, function () { });
    }

    $scope.addSeriveActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_SERVICE',
                        GroupNote: 'Hoạt động dịch vụ',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityService(function (rs) {
                rs = rs.data;
                $scope.listActivityService = rs;
            });
        }, function () { });
    }
});

app.controller('edit-cardCardJob', function ($scope, $http, $rootScope, $compile, $timeout, $uibModal, $uibModalInstance, dataserviceCardJob, $filter, para) {
    $scope.cancel = function () {
        CKEDITOR.removeAllListeners();
        CKEDITOR.instances['description'].removeAllListeners();
        if (!$rootScope.isAddedCard) {
            $rootScope.checkList = [];
            //clearInterval($scope.interval);
            setTimeout(function () {
                $uibModalInstance.close('cancel');
            }, 200);
        }
        else {
            //clearInterval($scope.interval);
            $rootScope.checkList = [];
            setTimeout(function () {
                $uibModalInstance.close('cancel');
            }, 200);
        }
    }

    //Declare model angular
    $scope.modelShift = {
        In: '',
        Out: '',
        DateIn: '',
        DateOut: '',
        DateInOut: ''
    };

    $scope.obj = {
        Board: '',
        List: ''
    };

    $scope.model = {
        CardName: '',
        BeginTime: '',
        Deadline: '',
        EndTime: '',
        Status: '',
        CardLevel: '',
        WorkType: '',
        WeightNum: 0,
        Cost: 0,
        Currency: 'VND',
        ListCode: '',
        Description: '',
        Cycle: ''
    };

    if ($scope.isLockWf != true) {
        $scope.modelWF = {
            WorkflowCode: '',
            WfInstCode: '',
            ActInstCode: ''
        };
    }
    //End declare model angualar

    //Declare variable
    $scope.isHideMap = false;

    $rootScope.isAddedCard = true;

    $rootScope.isAceptCard = true;

    $rootScope.IsLock = false;

    $rootScope.isUpdate = false;

    $scope.isSave = true;

    $rootScope.statusItem = [];

    $scope.lstGrpAssign = [];

    $scope.lstDpmAssign = [];

    $rootScope.isViewLog = false;

    var editor;

    $rootScope.isShowPercentItem = true;
    //End declare variable

    //Declare for rollback card
    $scope.rollBack = {
        ListChkItemRollback: [],
        Comment: [],
        ObjectRela: [],
        Products: [],
        Services: [],
        AddressCard: [],
        CardLinks: []
    }

    $scope.ListChkItemRollback = [];

    $scope.rollbackComment = [];

    $scope.rollbackObject = [];

    $scope.rollbackProduct = [];

    $scope.rollbackService = [];

    $scope.rollbackAddress = [];

    $scope.rollbackLinks = [];

    //End declare for rollback card

    //Show hide content
    $scope.showPanelRight = true;
    $scope.showInfoHeader = true;
    //if ($scope.isLockWf != true) {
    //    $scope.showInfoHeader = false;
    //}

    $scope.showPanel = function () {
        if ($scope.showPanelRight)
            $scope.showPanelRight = false;
        else
            $scope.showPanelRight = true;
    }

    $scope.showInfo = function () {
        if ($scope.showInfoHeader)
            $scope.showInfoHeader = false;
        else
            $scope.showInfoHeader = true;
    }

    //End show hide content

    //Card title
    $scope.editingCardetailHeaderAuto = function () {
        if ($(".modal-dialog").hasClass("ui-draggable-dragging") == false) {
            $scope.acticeDetailDrag = true;
            var title = document.getElementById("card_000000");
            if (title != null && title != undefined) {
                title.focus()
            }
        } else {
            $scope.acticeDetailDrag = false;
        }
    }
    //End card title

    $scope.initData = function () {
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                if (editor) {
                    editor.setData($scope.model.Description);
                }
                $scope.cardCode = $scope.model.CardCode;
                $scope.cardName = $scope.model.CardName;
                $rootScope.Inherit = $scope.model.Inherit;
                $scope.obj.Board = rs.Object.Board;
                debugger
                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;

                $rootScope.IsLock = $scope.model.IsLock;
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
                $scope.obj.List = rs.Object.List;
                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                dataserviceCardJob.getAllWfInstance(function (rs) {
                    rs = rs.data;
                    $scope.lstWfInst = rs;
                })

                dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.modelWF.WfInstCode = rs;
                    dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                        rs = rs.data;
                        $scope.lstActInstance = rs;
                    })
                })

                //Copy data using to rollback
                $scope.rollBack.CardHeader = angular.copy($scope.model);
                //End copy data using to rollback

                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        $rootScope.timeUpdate = moment().format("DD/MM/YYYY HH:mm");
        $scope.listCycle = [
            {
                Code: 'CYCLE_NONE', Name: caption.CJ_CYCLE_NONE
            },
            {
                Code: 'CYCLE_HOUR', Name: caption.CJ_CYCLE_HOUR
            },
            {
                Code: 'CYCLE_DAY', Name: caption.CJ_CYCLE_DAY
            },
            {
                Code: 'CYCLE_WEEK', Name: caption.CJ_CYCLE_WEEK
            },
            {
                Code: 'CYCLE_MONTH', Name: caption.CJ_CYCLE_MONTH
            },
            {
                Code: 'CYCLE_YEAR', Name: caption.CJ_CYCLE_YEAR
            },
        ];
        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $rootScope.isAceptCard = true;
                } else {
                    $rootScope.isAceptCard = false;
                }
            }
        });
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    //if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                    //    //$rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);

                    //}
                    $rootScope.ActivityData[i].ChangeDetails = window.decodeHTML($rootScope.ActivityData[i].ChangeDetails);
                }
                console.log($rootScope.ActivityData);
            }
        });
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            $scope.ListChkItemRollback = angular.copy($rootScope.checklists);
            angular.forEach(rs, function (value, key) {
                value.CheckTitle = decodeHTML(value.CheckTitle);
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                        iterator.Title = decodeHTML(iterator.Title);
                    }
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.comments = rs;
            $scope.rollbackComment = angular.copy($rootScope.comments);
        });
        dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listAddress = rs;
            $scope.rollbackAddress = angular.copy($rootScope.listAddress);
        });
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
            $scope.rollbackObject = angular.copy($rootScope.listID);
        });
        dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardProduct = rs;
            $scope.rollbackProduct = angular.copy($rootScope.listCardProduct);
        });
        dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardService = rs;
            $scope.rollbackService = angular.copy($rootScope.listCardService);
        });
        dataserviceCardJob.permissionHeaderCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.permissionHeaderCard = rs;
        })
        dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (rs.Responsibility === "ROLE_LEADER") {
                $rootScope.isApprove = true;
            }
            else {
                $rootScope.isApprove = false;
            }
        })
        dataserviceCardJob.getGroupDepartmentAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.lstGrpAssign = rs.Group
            $scope.lstDpmAssign = rs.Dpm
        });
        var data = {
            cardCode: $rootScope.CardCode,
        }

        dataserviceCardJob.getListLinkCardJob(data, function (rs) {
            rs = rs.data;
            $rootScope.listCardJobLink = rs;
            $scope.rollbackLinks = angular.copy($rootScope.listCardJobLink);
        })

        dataserviceCardJob.insertListUserView($rootScope.CardCode, function (rs) { })
        dataserviceCardJob.autoUpdateLockShareJson($rootScope.CardCode, function (rs) { })

        $scope.acticeDetailDrag = false;
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoards = rs;
        });
        dataserviceCardJob.getLevels(function (rs) {
            rs = rs.data;
            $scope.CardLevels = rs;
        });
        dataserviceCardJob.getWorkType(function (rs) {
            rs = rs.data;
            $scope.WorkTypes = rs;
        });
        dataserviceCardJob.getStatus(function (rs) {
            rs = rs.data;
            $scope.CardStatus = rs;
        });
        dataserviceCardJob.getCurrency(function (rs) {
            rs = rs.data;
            $scope.listCurrency = rs;
        })
        dataserviceCardJob.getProduct(function (rs) {
            rs = rs.data;
            $scope.listProduct = rs;
        });
        dataserviceCardJob.getService(function (rs) {
            rs = rs.data;
            $scope.listService = rs;
        })
        dataserviceCardJob.getUnit(function (rs) { rs = rs.data; $scope.listUnit = rs });
        dataserviceCardJob.getActivityService(function (rs) {
            rs = rs.data;
            $scope.listActivityService = rs;
        });
        dataserviceCardJob.getActivityProduct(function (rs) {
            rs = rs.data;
            $scope.listActivityProduct = rs;
        });
        dataserviceCardJob.hideCost(function (rs) {
            rs = rs.data;
            $scope.isNotVatco = rs;
        })
        dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
            rs = rs.data;
            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')
                var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                $scope.modelShift.In = inTime;
                $scope.modelShift.Out = outTime;

                $scope.timeCheckIn = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss dd/MM/yyyy');
                $scope.timeCheckOut = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss dd/MM/yyyy');

                if (inDate != outDate && outDate != null) {
                    $scope.modelShift.DateIn = inDate;
                    $scope.modelShift.DateOut = outDate;
                    $scope.isSameDate = false;
                } else {
                    $scope.modelShift.DateInOut = inDate;
                    $scope.isSameDate = true;
                }
            }
        })
        //$scope.interval = setInterval(sessionCard, 60000);
        setTimeout(function () {
            $scope.editingCardetailHeaderAuto();
        }, 200)
    }

    $scope.initData();

    //Rollback info card and more
    $scope.rollbackCard = function () {
        debugger
        //$scope.rollBack.CardHeader = $scope.model;
        $scope.rollBack.ListChkItemRollback = $scope.ListChkItemRollback;
        $scope.rollBack.Comment = $scope.rollbackComment;
        $scope.rollBack.ObjectRela = $scope.rollbackObject;
        $scope.rollBack.Products = $scope.rollbackProduct;
        $scope.rollBack.Services = $scope.rollbackService;
        $scope.rollBack.AddressCard = $scope.rollbackAddress;
        $scope.rollBack.CardLinks = $scope.rollbackLinks;
        dataserviceCardJob.rollbackInfoCard($scope.rollBack, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                loadNewData();
            }
        })
    }
    //End rollback info card and more

    //Board, list select 
    $scope.boardSelect = function (boardCode) {
        if ($scope.obj.Board == "") {
            $scope.errorBoard = true;
        }
        else {
            $scope.errorBoard = false;
        }
        $scope.obj.List = "";
        $scope.model.ListCode = "";
        dataserviceCardJob.getLists(boardCode, function (rs) {
            rs = rs.data;
            $scope.Lists = rs;
        });
    };

    $scope.listSelect = function (listCode) {
        if ($scope.obj.List == "") {
            $scope.errorList = true;
        }
        else {
            $scope.errorList = false;
            $scope.model.ListCode = listCode;
            dataserviceCardJob.updateListReal($rootScope.CardCode, $scope.model.ListCode, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    $scope.model.ListCode = "";
                    $scope.obj.List = "";
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.completeBoard = rs.Object.PercentBoard;
                    $scope.completeList = rs.Object.PercentList;
                }
            })
        }
    };
    //End select board, list

    //Insert card
    $scope.saveBuffer = function () {
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
        }
        $scope.acticeDetailDrag = false;

        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
        }

        validationSelect($scope.model);
        if ($scope.addform.validate() && !validationSelect($scope.model).Status) {
            if ($scope.model.CardName.trim() == "" && $scope.model.ListCode == "") {
                return App.toastrError(caption.CJ_CURD_TXT_SEARCH_PLS__CJ_NAME_AND_WK);
            }
            else if ($scope.model.CardName.trim() == "") {
                return App.toastrError(caption.CJ_CURD_TXT_SEARCH_PLS__CJ_NAME);
            }
            else if ($scope.model.ListCode == "") {
                return App.toastrError(caption.CJ_CURD_TXT_SEARCH_PLS__CATE_NAME);
            }

            if (!$scope.isSave) {
                return;
            }
            else if ($rootScope.IsLock) {
                return App.toastrError("Thẻ việc đã khóa");
            }
            else if (!$rootScope.isAceptCard) {
                return App.toastrError("Bạn đã từ chối thực hiện công việc");
            }
            $scope.model.IsApprove = $rootScope.isApprove;

            dataserviceCardJob.checkSessionCard($rootScope.CardCode, function (rs) {
                rs = rs.data;
                if (rs) {
                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderMessage + '/messageConfirmUpdate.html',
                        windowClass: "message-center",
                        controller: function ($scope, $uibModalInstance) {
                            $scope.message = "Thẻ việc đang được cập nhật trên nhiều thiết bị, bạn có muốn lưu lại thay đổi?";
                            $scope.ok = function () {
                                $uibModalInstance.close(true);
                            };
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss();
                            };
                        },
                        size: '25',
                        backdrop: 'static',
                        keyboard: false
                    });
                    modalInstance.result.then(function (d) {
                        dataserviceCardJob.updateCardNew($scope.model, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                $rootScope.isUpdate = true;
                                $rootScope.getLogActivity();
                                $scope.isSave = false;
                                //clearInterval($scope.interval);
                            }
                        })
                    }, function () {

                    });
                }
                else {
                    dataserviceCardJob.updateCardNew($scope.model, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            $rootScope.isUpdate = true;
                            $rootScope.getLogActivity();
                            $scope.isSave = false;
                            //clearInterval($scope.interval);
                        }
                    })
                }
            })
        }
    }

    $scope.update = function () {
        if (!$rootScope.isUpdate) {
            return;
        }
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                editor.setData($scope.model.Description);

                if ($scope.model.CreatedBy == userName) {
                    $scope.isAssign = false;
                }
                else if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                        App.toastrError("Bạn đã bị xóa khỏi thẻ việc");
                        return $uibModalInstance.close();
                    }
                }
                if (!$scope.isAssign) {
                    $scope.cardCode = $scope.model.CardCode;
                    $scope.cardName = $scope.model.CardName;
                    $scope.obj.Board = rs.Object.Board;
                    $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                    $rootScope.IsLock = $scope.model.IsLock;
                    dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                        rs = rs.data;
                        $scope.Lists = rs;
                    });
                    $scope.obj.List = rs.Object.List;

                    $scope.CompletedOld = $scope.model.Completed;

                    $rootScope.settingNotification = rs.Object.Notification;
                    $scope.currentUser = rs.Object.CurrenUser;
                    $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                    $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                    $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                    $scope.completeBoard = rs.Object.BoardCompleted;
                    $scope.completeList = rs.Object.ListCompleted;
                    dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.RoleUser = rs.Responsibility;

                        if ($scope.RoleUser == "ROLE_LEADER") {
                            $scope.isNotLeader = false;
                        }
                        if ($scope.isNotLeader && $scope.isClose) {
                            $scope.isDisableStatus = true;
                            $scope.isDisableControl = true;
                        } else if (!$scope.isNotLeader && $scope.isClose) {
                            $scope.isDisableStatus = false;
                            $scope.isDisableControl = true;
                        } else {
                            $scope.isDisableStatus = false;
                            $scope.isDisableControl = false;
                        }
                    })
                    dataserviceCardJob.getAllWfInstance(function (rs) {
                        rs = rs.data;
                        $scope.lstWfInst = rs;
                    })

                    dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.modelWF.WfInstCode = rs;
                        dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                            rs = rs.data;
                            $scope.lstActInstance = rs;
                        })
                    })

                    dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.activity = rs;
                        if ($scope.activity.length > 0) {
                            if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                $rootScope.isAceptCard = true;
                            } else {
                                $rootScope.isAceptCard = false;
                            }
                        }
                    });
                    dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                    dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.checklists = rs;
                        angular.forEach(rs, function (value, key) {
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $rootScope.checkList[value.ChkListCode] = result;
                            })
                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.statusItem[value.ChkListCode] = rs;
                            })
                        })
                    });
                    dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.comments = rs;
                    });
                    dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.listAddress = rs;
                    });
                    dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.listID = [];
                        $rootScope.listObjRelative = rs;
                        for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                            $rootScope.listID.push($scope.listObjRelative[i].ID);
                        }
                    });
                    dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.listCardProduct = rs;
                    });
                    dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.listCardService = rs;
                    });
                    //$rootScope.reloadFile();

                    setTimeout(function () {
                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                    }, 100);
                }
            }
        });
    }

    function sessionCard() {
        //dataserviceCardJob.isUpdateNewData($rootScope.CardCode, $rootScope.timeUpdate, function (rs) {
        //    rs = rs.data;
        //    if (rs) {
        //        loadNewData();
        //        $rootScope.timeUpdate = moment().add(1, 'minute').format("DD/MM/YYYY HH:mm");
        //    }
        //})
    }

    function loadNewData() {
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                $scope.cardCode = $scope.model.CardCode;
                $rootScope.Inherit = $scope.model.Inherit;
                editor.setData($scope.model.Description);
                $scope.cardName = $scope.model.CardName;
                $scope.obj.Board = rs.Object.Board;
                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                $rootScope.IsLock = $scope.model.IsLock;
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
                $scope.obj.List = rs.Object.List;
                var element = document.getElementById("card_000000");
                element.setAttribute('data-currentvalue', $scope.cardName);
                element.setAttribute('value', $scope.cardName);
                element.value = $scope.cardName;

                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                dataserviceCardJob.getAllWfInstance(function (rs) {
                    rs = rs.data;
                    $scope.lstWfInst = rs;
                })

                dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.modelWF.WfInstCode = rs;
                    dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                        rs = rs.data;
                        $scope.lstActInstance = rs;
                    })
                })

                setTimeout(function () {
                    $scope.disableCkEditer(editor);
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $rootScope.isAceptCard = true;
                } else {
                    $rootScope.isAceptCard = false;
                }
            }
        });
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            angular.forEach(rs, function (value, key) {
                value.CheckTitle = decodeHTML(value.CheckTitle);
                setTimeout(function () {
                    $scope.$apply();
                })
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                        iterator.Title = decodeHTML(iterator.Title);
                    }
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.comments = rs;
        });
        dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listAddress = rs;
        });
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
        });
        dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardProduct = rs;
        });
        dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardService = rs;
        });
        dataserviceCardJob.permissionHeaderCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.permissionHeaderCard = rs;
        })
        dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (rs.Responsibility === "ROLE_LEADER") {
                $rootScope.isApprove = true;
            }
            else {
                $rootScope.isApprove = false;
            }
        })
        dataserviceCardJob.getCardRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;

            $scope.CardInherit = rs.Inherit;
            $scope.Links = rs.Links;
        })
        dataserviceCardJob.insertListUserView($rootScope.CardCode, function (rs) { })
        dataserviceCardJob.getDataLoggerCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listData = rs;
        });
        dataserviceCardJob.getGroupDepartmentAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.lstGrpAssign = rs.Group
            $scope.lstDpmAssign = rs.Dpm
        });

        var data = {
            cardCode: $rootScope.CardCode,
        }
        dataserviceCardJob.getListLinkCardJob(data, function (rs) {
            rs = rs.data;
            $rootScope.listCardJobLink = rs;
            $scope.rollbackLinks = angular.copy($rootScope.listCardJobLink);
        })
        //$rootScope.reloadFile();
        $rootScope.getLogActivity();
    }
    //End
    //Editor

    function ckEditer() {
        editor = CKEDITOR.replace('description', {
            cloudServices_tokenUrl: '/MobileApp/Token',
            cloudServices_uploadUrl: '/MobileApp/UploadFile',
            filebrowserBrowseUrl: '',
            filebrowserUploadUrl: '/MobileApp/Upload',
            embed_provider: '/uploader/upload.php'
        });
        CKEDITOR.instances['description'].config.height = 360;
        // config height
    }

    $scope.disableCkEditer = function (editor) {

        if (!$rootScope.isAceptCard || $rootScope.IsLock) {
            editor.setReadOnly(true);
        } else {
            editor.setReadOnly(false);
        }
    }
    //End editor

    //View tab
    $scope.idxViewTab = 1;
    $scope.viewTab = function (index) {
        if (!$rootScope.isAddedCard && index != 0) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        $scope.idxViewTab = index;
        if ($scope.idxViewTab == 7) {
            $rootScope.$broadcast('reloadItemWork', {});
        }
    }
    //Edn view tab

    //Add member
    $scope.addMember = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        $rootScope.titleModalAssign = 3;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
            controller: 'add-group-or-teamCardJob',
            size: '55',
            resolve: {
                obj: function () {
                    return {
                        CardCode: $rootScope.CardCode,
                        Type: 4
                    };
                }
            },
            backdrop: 'static',
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;

                $rootScope.ItemCheck = rs;
                angular.forEach(rs, function (value, key) {
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.ActivityData = rs;
                if ($rootScope.ActivityData.length > 0) {
                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                        }
                    }
                }
            });
            dataserviceCardJob.getGroupDepartmentAssign($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $scope.lstGrpAssign = rs.Group
                $scope.lstDpmAssign = rs.Dpm
            });
        }, function () {
        });
    };
    //End add member

    //Send notifi
    $scope.sendNotifi = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/send-notifi-card.html',
            controller: 'send-notifi-card',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End send notification

    //Log status
    $scope.viewLogStatus = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-status-log.html',
            controller: 'log-status',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End log status

    //Log workflow
    $scope.viewLogWF = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-activity-wf.html',
            controller: 'log-activity-wf',
            backdrop: 'static',
            size: '50',
            resolve: {
                para: function () {
                    var obj = { WfInstCode: $scope.modelWF.WfInstCode, CardCode: $rootScope.CardCode };
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    }
    //End

    //Show log accept, reject
    $scope.showLogActivity = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-user-activity.html',
            controller: 'log-user-activity',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End

    //Update activity
    $scope.updateActivity = function (value, isCheck) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        if (isCheck) {
            var activity = $scope.activity.find(function (element) {
                if (element.Value != value && element.Value != 0) return true;
            });
            if (activity) {
                activity.IsCheck = false;
            }
            if (value == 2 && isCheck) {
                $rootScope.isAceptCard = true;
                dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var activity = $scope.activity.find(function (element) {
                            if (element.Value == value) return true;
                        });
                        if (activity) {
                            activity.Date = rs.Object.Date;
                            activity.Time = rs.Object.Time;
                        }
                        App.toastrSuccess(rs.Title);
                        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.activity = rs;
                            if ($scope.activity.length > 0) {
                                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                    $rootScope.isAceptCard = true;
                                } else {
                                    $rootScope.isAceptCard = false;
                                }
                            }
                        });
                        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }
                });
            }
            else if (value == 1 && isCheck) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/add-reason-reject.html',
                    controller: 'add-reason-reject',
                    backdrop: 'static',
                    size: '25',
                    keyboard: false,
                    windowClass: "modal-position",
                    resolve: {
                        para: function () {
                            return {
                                Value: value,
                                CardCode: $rootScope.CardCode
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.activity = rs;
                        if ($scope.activity.length > 0) {
                            if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                $rootScope.isAceptCard = true;
                            } else {
                                $rootScope.isAceptCard = false;
                            }
                        }
                    });
                    $rootScope.getLogActivity();
                }, function () { });
            }
            else {
                $rootScope.isAceptCard = false;
                dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var activity = $scope.activity.find(function (element) {
                            if (element.Value == value) return true;
                        });
                        if (activity) {
                            activity.Date = rs.Object.Date;
                            activity.Time = rs.Object.Time;
                        }
                        App.toastrSuccess(rs.Title);
                        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.activity = rs;
                            if ($scope.activity.length > 0) {
                                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                    $rootScope.isAceptCard = true;
                                } else {
                                    $rootScope.isAceptCard = false;
                                }
                            }
                        });
                        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }
                });
            }
            $scope.disableCkEditer(editor);
        }
        else {
            $rootScope.isAceptCard = false;
            dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    var activity = $scope.activity.find(function (element) {
                        if (element.Value == value) return true;
                    });
                    if (activity) {
                        activity.Date = rs.Object.Date;
                        activity.Time = rs.Object.Time;
                    }
                    App.toastrSuccess(rs.Title);
                    dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.activity = rs;
                        if ($scope.activity.length > 0) {
                            if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                $rootScope.isAceptCard = true;
                            } else {
                                $rootScope.isAceptCard = false;
                            }
                        }
                    });
                    dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                }
            });
        }
    }
    //end

    //Start validate
    $scope.changeSelect = function (selectType, item) {
        if (selectType === "Status") {
            if ($scope.model.Status == "") {
                $scope.errorStatus = true;
            }
            else {
                $scope.errorStatus = false;
            }
        }
    }

    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.Status == "") {
            $scope.errorStatus = true;
            mess.Status = true;
        } else {
            $scope.errorStatus = false;
        }

        if (data.WfType == "") {
            $scope.errorWfType = true;
            mess.Status = true;
        } else {
            $scope.errorWfType = false;
        }

        return mess;
    };
    //End validate

    //Lock card
    $scope.lockCard = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        else if (!$scope.permissionHeaderCard) {
            return App.toastrError("Bạn không có quyền thực hiện chức năng này");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        var value = false;
        if (!$scope.model.IsLock) {
            value = true;
        }
        dataserviceCardJob.lockCard($rootScope.CardCode, value, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.model = rs.Object.CardDetail;
                        $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                        $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                        $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                        //$scope.updateCardName("card_000000");
                        setTimeout(function () {
                            $scope.disableCkEditer(editor);
                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                        }, 500);
                    }
                });
                if (value) {
                    $rootScope.IsLock = true;
                }
                else {
                    $rootScope.IsLock = false;
                }
            }
        })
    }
    //End

    //Workflow
    if ($scope.isLockWf != true) {
        $scope.IsCreateWF = false;
    }

    $scope.changeWfInst = function (code) {
        $rootScope.wfInstance = code;
        $scope.modelWF = { WfInstCode: $rootScope.wfInstance };
        dataserviceCardJob.getActInstCard($rootScope.wfInstance, "", function (rs) {
            rs = rs.data;
            $scope.lstActInstance = rs;
        })
    }

    $scope.changeWorkFlow = function () {
        isChange = true;
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmQuestion.html',
            windowClass: "message-center",
            resolve: {
                params: function () {
                    return {
                        CardCode: $rootScope.CardCode,
                        WfCode: $scope.modelWF.WorkflowCode
                    };
                }
            },
            controller: function ($scope, $uibModalInstance, params) {
                $scope.message = caption.CJ_MSG_QUESTION_CREATE_WF;
                $scope.ok = function () {
                    dataserviceCardJob.createInstanceWF(params.WfCode, params.CardCode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);

                            $rootScope.wfInstance = rs.Object.WfInstCode;
                            $uibModalInstance.close();
                            dataserviceCardJob.insertInstRunning(rs.Object.WfInstCode, rs.Object.WorkflowCode, function (rs) { })
                        }
                    })
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.modelWF.WfInstCode = $rootScope.wfInstance;
            dataserviceCardJob.getActInstCard($rootScope.wfInstance, $rootScope.CardCode, function (rs) {
                rs = rs.data;
                $scope.lstActInstance = rs;
            })
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;
                $rootScope.ItemCheck = rs;
                angular.forEach(rs, function (value, key) {
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            $scope.IsCreateWF = false;
            dataserviceCardJob.getAllWfInstance(function (rs) {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }, function () {
        });
    }

    $scope.checkCreateWF = function () {
        if (!$rootScope.isAddedCard) {
            $scope.IsCreateWF = false;
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        if ($scope.IsCreateWF) {
            dataserviceCardJob.checkWfInstCard($rootScope.CardCode, function (rs) {
                rs = rs.data;
                if (rs) {
                    $scope.IsCreateWF = false;
                    return App.toastrError(caption.CJ_MSG_CARD_HAS_WF);
                }
                dataserviceCardJob.getWorkFlow(function (rs) {
                    rs = rs.data;
                    $scope.listWorkFlow = rs;
                })
            })
        }
        else {
            dataserviceCardJob.getWfInst($rootScope.CardCode, function () {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }
    }

    $scope.changeActInst = function () {
        var data = {
            ActInstCode: $scope.modelWF.ActInstCode,
            WfInstCode: $scope.modelWF.WfInstCode,
            ObjectInst: $rootScope.CardCode,
            ObjectType: "CARD_JOB",
        };
        dataserviceCardJob.insertObjectProcess(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.lstActInstance = rs;
                })
            }
        })
    }
    //End workflow

    //add-card-inherit, card-link
    $scope.addInheritLink = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-link.html',
            controller: 'add-card-link',
            windowClass: "message-center",
            size: '35',
            backdrop: 'static',
            resolve: {
                cardJob: function () {
                    return {
                        cardCode: $rootScope.CardCode,
                        cardName: $scope.model.CardName,
                        Inherit: $scope.model.Inherit
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.model.Inherit = $rootScope.CardInherit.Code;
            dataserviceCardJob.getCardRelative($rootScope.CardCode, function (rs) {
                rs = rs.data;

                $scope.CardInherit = rs.Inherit;
                $scope.Links = rs.Links;
            })
        });
    }
    //End

    //Add list/board
    $scope.addBoard = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-board.html',
            controller: 'add-boardCardJob',
            size: '30',
            backdrop: 'static'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListBoard(function (rs) {
                rs = rs.data;
                $scope.listBoards = rs;
            });
        }, function () { });
    };

    $scope.addList = function (board) {
        if (board == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_TABLE_WORKING);
        } else {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/add-list.html',
                controller: 'add-listCardJob',
                backdrop: 'static',
                size: '25',
                resolve: {
                    para: function () {
                        return board;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
            }, function () { });
        }
    }
    //End

    //Push trash
    $scope.pushTrash = function () {
        dataserviceCardJob.changeCardStatus($rootScope.CardCode, "TRASH", function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(caption.COM_DELETE_SUCCESS);
                //clearInterval($scope.interval);
                $uibModalInstance.close();
                $rootScope.reloadGridCard();
            }
        });
    }
    //End

    //Update directly
    $scope.changeData = function (selectType, value) {
        if (!$rootScope.isAceptCard) {
            return;
        }
        else if ($rootScope.IsLock) {
            return;
        }
        if (selectType == "BeginTime") {
            updateBeginTime();
        }
        else if (selectType == "CardName") {
            updateCardName();
        }
        else if (selectType == "Deadline") {
            updateDeadline();
        }
        else if (selectType == "EndTime") {
            updateEndTime();
        }
        else if (selectType == "Status") {
            updateStatus();
        }
        else if (selectType == "CardLevel") {
            updateCardLevel();
        }
        else if (selectType == "WorkType") {
            updateWorkType();
        }
        else if (selectType == "WeightNum") {
            updateWeightNum();
        }
        else if (selectType == "Cost") {

        }
        else if (selectType == "Currency") {

        }
        else if (selectType == "Cycle") {
            updateCardCycle();
        }
    }

    function updateCardName() {
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
            if ($scope.model.CardName.trim() == "" || $scope.model.CardName == undefined || $scope.model.CardName == null) {
                return;
            }
            dataserviceCardJob.updateCardNameReal($rootScope.CardCode, $scope.model.CardName, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title)
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $rootScope.getLogActivity();
                    $rootScope.isDataChanged = true;
                }
            })
        }
    }

    function updateBeginTime() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardBegintimeReal($rootScope.CardCode, $scope.model.BeginTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    function updateDeadline() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardDeadlineReal($rootScope.CardCode, $scope.model.Deadline, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    function updateEndTime() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardEndtimeReal($rootScope.CardCode, $scope.model.EndTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    function updateStatus() {
        dataserviceCardJob.updateCardStatusReal($rootScope.CardCode, $scope.model.Status, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    function updateCardLevel() {
        dataserviceCardJob.updateCardLevelReal($rootScope.CardCode, $scope.model.CardLevel, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    function updateWorkType() {
        dataserviceCardJob.updateCardWorkTypeReal($rootScope.CardCode, $scope.model.WorkType, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    function updateWeightNum() {
        dataserviceCardJob.updateWeightNumReal($rootScope.CardCode, $scope.model.WeightNum, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.completeBoard = rs.Object.PercentBoard;
                $scope.completeList = rs.Object.PercentList;
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    function updateDescription() {
        debugger
        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            if (!$scope.model.Description) {
                $scope.model.Description = "";
            }
            if ($scope.model.Description.localeCompare(data) != 0) {
                $scope.model.Description = data;
                var data = { CardCode: $rootScope.CardCode, Description: $scope.model.Description };

                dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title)
                    }
                    else {
                        App.toastrSuccess(rs.Title);
                        $rootScope.getLogActivity();
                        $rootScope.isDataChanged = true;
                    }
                })
            }
        }

    }

    function updateCardCycle() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardCycleReal($rootScope.CardCode, $scope.model.Cycle, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    CKEDITOR.on('instanceReady', function (evt) {
        var editor = evt.editor,
            body = CKEDITOR.document.getBody();
        $scope.ckEditor = editor;
        editor.on('focus', function () {
        });
        var myListener = function () {
            updateDescription();
        };

        editor.on('blur', myListener);

        //editor.on('destroy', function () {
        //    CKEDITOR.instances['description'].removeAllListeners();
        //});
    });
    //End update directly


    //End show, hide header card
    function loadDate() {
        $("#startDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            dateFormat: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#deadline').datepicker('setStartDate', maxDate);
            $('#endDate').datepicker('setStartDate', maxDate);
        });
        $("#endDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.Deadline != "") {
                const [day, month, year] = $scope.model.Deadline.split("/")
                var deadLine = new Date(year, month - 1, day)
                if (maxDate > deadLine) {
                    $('#startDate').datepicker('setEndDate', deadLine);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
        $("#deadline").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.EndTime != "") {
                const [day, month, year] = $scope.model.EndTime.split("/")
                var endTime = new Date(year, month - 1, day)
                if (maxDate > endTime) {
                    $('#startDate').datepicker('setEndDate', endTime);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
    }

    function validateDefaultDate(startDate, endDate, deadline) {
        setStartDate("#endDate", startDate);
        setStartDate("#deadline", startDate);
        //setEndDate
        const [dayDead, monthDead, yearDeal] = deadline.split("/")
        var deadTime = new Date(yearDeal, monthDead - 1, dayDead)
        if (endDate != "") {
            const [day, month, year] = endDate.split("/")
            var endTime = new Date(year, month - 1, day)
            if (endTime > deadTime) {
                setEndDate("#startDate", deadline)
            }
            else {
                setEndDate("#startDate", endDate)
            }
        }
        else {
            setEndDate("#startDate", deadline)
        }
    }

    setTimeout(function () {
        ckEditer();
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);

    $scope.getSafehtml = function (description) {
        var tmp = document.createElement("DIV");
        tmp.innerHTML = description;
        return tmp.textContent || tmp.innerText || "";
    }

    $scope.addCommonSettingWorkType = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'OBJ_WORKTYPE',
                        GroupNote: 'Kiểu công việc',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getWorkType(function (rs) {
                rs = rs.data;
                $scope.WorkTypes = rs;
            });
        }, function () { });
    }

    $scope.addCommonSettingCardLevel = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'LEVEL',
                        GroupNote: 'Độ ưu tiên',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getLevels(function (rs) {
                rs = rs.data;
                $scope.CardLevels = rs;
            });
        }, function () { });
    }

    $scope.addProductActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_PRODUCT',
                        GroupNote: 'Hoạt động sản phẩm',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityProduct(function (rs) {
                rs = rs.data;
                $scope.listActivityProduct = rs;
            })
        }, function () { });
    }

    $scope.addSeriveActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_SERVICE',
                        GroupNote: 'Hoạt động dịch vụ',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityService(function (rs) {
                rs = rs.data;
                $scope.listActivityService = rs;
            });
        }, function () { });
    }

    function updateNotify() {
        dataserviceCardJob.getCountNotify(function (rs) {
            rs = rs.data;
            document.getElementById("countCardWork").innerText = "Bạn có " + rs.CountWork + " công việc mới.";
            document.getElementById("countAllNotifyNew").innerText = rs.All;
            document.getElementById("allNotifyNew").innerText = rs.All + " mới";
        })
    }
});

app.controller('add-object-relativeCardJob', function ($scope, $rootScope, $cookies, $cookieStore, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, cardCode) {
    var dataSet = [];
    var listDeletedDependency = [];
    $scope.listRelaive = [];
    $scope.setting = {
        Id: -1,
        ObjTypeCode: '',
        ObjCode: '',
        Relative: '',
        Member: '',
        Team: '',
        setting: '',
        Weight: '',
        ItemCode: ''
    };
    $scope.useDefaultSetting = function () {
        var DfSetting = $cookies.getObject('DefaultCardSetting');
        if (DfSetting !== undefined) {

            dataSet = [];
            $scope.cardMember.listTeam = DfSetting.Team;
            $scope.cardMember.listMember = DfSetting.Member;
            angular.forEach(DfSetting.ListDependency, function (value, key) {
                var obj = [];
                obj.push(value.Dependency);
                obj.push(value.ObjCode);
                obj.push(value.Relative);
                dataSet.push(obj);
            });

            refrestTable();
        }
    };

    $scope.initData = function () {
        dataserviceCardJob.getObjTypeJC(function (rs) {
            rs = rs.data;
            $scope.objTypeJC = rs;
        })
        dataserviceCardJob.getObjectRelative(cardCode, function (rs) {
            rs = rs.data;
            angular.forEach(rs, function (value, key) {
                var obj = [];
                obj.push(value.ObjTypeCode);
                obj.push(value.ObjTypeName);
                obj.push(value.ObjID);
                obj.push(value.ObjName);
                obj.push(value.RelativeCode);
                obj.push(value.RelativeName);
                obj.push(value.ItemCode);
                obj.push(value.ItemName);
                obj.push(value.Weight);
                obj.push('<button title="Xoá" ng-click="deleteObjReletive(' + value.ID + ')" style="width: 25px; height: 25px; padding: 0px;-webkit-box-shadow: 0 2px 5px 0 rgba(230,60,95,0.45)" class="btn btn-icon-only btn-circle btn-outline red"><i style="color:red" class="fa fa-trash"></i></button>');
                obj.push(value.ID);
                obj.push(value.IdObjTemp);
                dataSet.push(obj);
            });

            setTimeout(function () {
                refrestTable();
            }, 100);
        });

        dataserviceCardJob.getRelative(function (rs) {
            rs = rs.data;
            $scope.relative = rs;
        })
        dataserviceCardJob.getItemChk(cardCode, function (rs) {
            rs = rs.data;
            $scope.listItemChecks = rs;
            $scope.listItemChecks.forEach(x => x.Name = window.decodeHTML(x.Name));
        })
    };

    $scope.initData();

    $scope.objTypeChange = function (code) {
        $scope.setting.ObjCode = '';
        dataserviceCardJob.getObjTypeCode(code, function (rs) {
            rs = rs.data;
            $scope.listObjWithType = rs;
        });
    };

    $scope.addDependency = function () {
        $scope.setting.Id--;
        var id = $scope.setting.Id;
        if ($scope.setting.ObjTypeCode === "" || $scope.setting.ObjCode === "" || $scope.setting.Relative === "") {
            App.toastrError(caption.CJ_CURD_MSG_CHOOSE_INFO);
            return;
        }
        var objDependency = $scope.objTypeJC.find(function (element) {
            if (element.Code == $scope.setting.ObjTypeCode) return true;
        });
        var objRelative = $scope.listObjWithType.find(function (element) {
            if (element.Code == $scope.setting.ObjCode) return true;
        });
        debugger
        var itemChk = $scope.listItemChecks.find(function (element) {
            if (element.Code == $scope.setting.ItemCode) return true;
        });

        var relative = $scope.relative.find(function (element) {
            if (element.Code == $scope.setting.Relative) return true;
        });
        var WeightTotal = 0;
        for (var i = 0; i < dataSet.length; i++) {
            WeightTotal = WeightTotal + parseFloat(dataSet[i][6]);
            for (var j = 0; j < dataSet[i].length; j++) {
                if (dataSet[i][j] === $scope.setting.ObjCode) {
                    App.toastrError(caption.CJ_CURD_MSG_OBJ_CODE_EXITED);
                    return;
                }
            }
        }
        var WeightNumber = 0;
        if ($scope.setting.Weight == null) {
        }
        else if ($scope.setting.Weight == "") {
        }
        else {
            WeightNumber = parseFloat($scope.setting.Weight);
        }
        dataserviceCardJob.checkWeightNumber({ ObjTypeCode: objDependency.Code, ObjID: objRelative.Code, WeightNum: WeightNumber }, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                var obj = [];
                obj.push(objDependency.Code);
                obj.push(objDependency.Name);
                obj.push(objRelative.Code);
                obj.push(objRelative.Name);
                obj.push(relative.Code);
                obj.push(relative.Name);
                obj.push(itemChk != undefined ? itemChk.Code : "");
                obj.push(itemChk != undefined ? itemChk.Name : "");
                obj.push(WeightNumber);
                obj.push('<button title="Xoá" ng-click="deleteObjReletive(' + id + ')" style="width: 25px; height: 25px; padding: 0px;-webkit-box-shadow: 0 2px 5px 0 rgba(230,60,95,0.45)" class="btn btn-icon-only btn-circle btn-outline red"><i style="color:red" class="fa fa-trash"></i></button>');
                obj.push(id);
                dataSet.push(obj);
                $scope.submit();
            }
        });
    };

    $scope.deleteObjReletive = function (id) {
        dataserviceCardJob.deleteCardDependency(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataSet = [];
                dataserviceCardJob.getObjectRelative(cardCode, function (rs) {
                    rs = rs.data;
                    angular.forEach(rs, function (value, key) {
                        var obj = [];
                        obj.push(value.ObjTypeCode);
                        obj.push(value.ObjTypeName);
                        obj.push(value.ObjID);
                        obj.push(value.ObjName);
                        obj.push(value.RelativeCode);
                        obj.push(value.RelativeName);
                        obj.push(value.ItemCode);
                        obj.push(value.ItemName);
                        obj.push(value.Weight);
                        obj.push('<button title="Xoá" ng-click="deleteObjReletive(' + value.ID + ')" style="width: 25px; height: 25px; padding: 0px;-webkit-box-shadow: 0 2px 5px 0 rgba(230,60,95,0.45)" class="btn btn-icon-only btn-circle btn-outline red"><i style="color:red" class="fa fa-trash"></i></button>');
                        obj.push(value.ID);
                        obj.push(value.IdObjTemp);
                        dataSet.push(obj);
                    });

                    setTimeout(function () {
                        refrestTable();
                    }, 100);
                });
            }
        });
    };

    $scope.cancel = function () {
        $uibModalInstance.close('cancle');
    };

    $scope.submit = function () {
        listDependency = [];
        for (var i = 0; i < dataSet.length; i++) {
            debugger
            var data = {
                ID: dataSet[i][10], ObjTypeCode: dataSet[i][0], ObjCode: dataSet[i][2],
                Relative: dataSet[i][4], Weight: dataSet[i][8], ItemCode: dataSet[i][6]
            };
            listDependency.push(data);
        }
        dataserviceCardJob.insertJcObjectIdRelative({ CardCode: cardCode, ListDependency: listDependency, ListDeletedDependency: listDeletedDependency }, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataSet = [];
                dataserviceCardJob.getObjectRelative(cardCode, function (rs) {
                    rs = rs.data;
                    angular.forEach(rs, function (value, key) {
                        var obj = [];
                        obj.push(value.ObjTypeCode);
                        obj.push(value.ObjTypeName);
                        obj.push(value.ObjID);
                        obj.push(value.ObjName);
                        obj.push(value.RelativeCode);
                        obj.push(value.RelativeName);
                        obj.push(value.ItemCode);
                        obj.push(value.ItemName);
                        obj.push(value.Weight);
                        obj.push('<a title="Xoá" ng-click="deleteObjReletive(' + value.ID + ')" type="button"><i style="color:red" class="fas fa-trash-alt fs25"></i></a>');
                        obj.push(value.ID);
                        obj.push(value.IdObjTemp);
                        dataSet.push(obj);
                    });

                    setTimeout(function () {
                        refrestTable();
                        $rootScope.getLogActivity();
                    }, 100);
                });
            }
        });
    };

    $scope.addObject = function (objType) {
        if (objType != '') {
            switch (objType) {
                case "PROJECT":
                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderProject + '/add.html',
                        controller: 'addProject',
                        size: '60',
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () {
                    });
                    break;
                case "CONTRACT":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderContract + '/add.html',
                        controller: 'contractAdd',
                        backdrop: 'static',
                        size: '70'
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () { });
                    break;
                case "CUSTOMER":
                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderCustomer + '/add.html',
                        controller: 'addCustomer',
                        size: '70',
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () {
                    });
                    break;
                case "SUPPLIER":

                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderCardJob + '/addSupplier.html',
                        controller: 'addSupplier',
                        size: '70',
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () {
                    });
                    break;
                case "REQUEST_PRICE":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderRQPrice + '/add.html',
                        controller: 'addRQPrice',
                        backdrop: 'static',
                        size: '60'
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () { });
                    break;
                case "CONTRACT_PO":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderContractPO + '/add.html',
                        controller: 'add',
                        backdrop: 'static',
                        size: '60'
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () { });
                    break;
                case "ORDER_REQUEST":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/addOrderRQ.html',
                        controller: 'addOrderRQ',
                        size: '50'
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () { });
                    break

                case "SERVICECAT":
                    $rootScope.ServiceCode == '';
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/addService.html',
                        controller: 'addService',
                        backdrop: 'static',
                        size: '50',
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () {
                    });
                    break;

                case "PRODUCT":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/addMaterialProduct.html',
                        controller: 'addMaterialProduct',
                        backdrop: 'static',
                        size: '60',
                        resolve: {
                            para: function () {
                                return null;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        $scope.objTypeChange(objType);
                    }, function () {
                    });
                    break;
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_OBJ_TYPE);
        }

    }

    function refrestTable() {
        var datatable = $('#obj-data-table').DataTable({
            columns: [
                { title: '<i class="fa fa-info-circle mr5 fs12"></i>' + caption.CJ_BTN_TYPE_OBJ },
                { title: '<i class="fa fa-info-circle mr5 fs12"></i>' + caption.CJ_BTN_TYPE_OBJ },
                { title: '<i class="fa fa-code mr5 fs12"></i>' + caption.CJ_BTN_CODE_OBJ },
                { title: '<i class="fa fa-code mr5 fs12"></i>' + caption.CJ_BTN_NAME_OBJ },
                { title: '<i class="fa fa-thumbtack mr5 fs12"></i>' + caption.CJ_BTN_CODE_RALATIONSHIP },
                { title: '<i class="fa fa-thumbtack mr5 fs12"></i>' + caption.CJ_BTN_RALATIONSHIP },
                { title: '<i class="fa fa-thumbtack mr5 fs12"></i>' + caption.CJ_BTN_WORK_ITEM_CODE },
                { title: '<i class="fa fa-thumbtack mr5 fs12"></i>' + caption.CJ_BTN_WORK_ITEM },
                { title: '<i class="fa fa-thumbtack mr5 fs12"></i>' + caption.CJ_BTN_WEIGHT },
                { title: '<span class="text-center fluid-width pull-left">' + '<i class="fa fa-location-arrow mr5 fs12"></i>' + caption.CJ_BTN_MANIPULATION + '</span>' }
            ],
            "createdRow": function (row, data, dataIndex) {
                //$compile(angular.element(row).contents())($scope);
                const contextScope = $scope.$new(true);
                contextScope.data = data;
                contextScope.contextMenu = $scope.contextMenu;
                $compile(angular.element(row))($scope);
                $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
                $(row).find('td:not(:has(label.mt-checkbox))').on('dblclick', function (evt) {
                    if (evt.target.localName == 'input' && evt.target.type == 'checkbox') {

                    } else {
                        var id = data[9];
                        var objType = data[0];
                        $scope.clickObj(id, objType);
                    }
                });
                $(row).find('td').last().addClass('text-center');
            },
            "searching": false,
            "lengthChange": false,
            "stripeClasses": [],
            "ordering": false,
            "bPaginate": false,
            "info": false,
            "aoColumnDefs": [{ "bVisible": false, "aTargets": [0, 2, 4, 6] }]
        });
        datatable.clear();
        datatable.rows.add(dataSet);
        datatable.draw();
    }

    $scope.clickObj = function (id, objType) {

        if (id != undefined) {
            switch (objType) {
                case "PROJECT":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderProject + '/edit.html',
                        controller: 'editProject',
                        backdrop: 'static',
                        size: '60',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    break;
                case "CONTRACT_PO":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderContractPO + '/edit.html',
                        controller: 'edit',
                        backdrop: 'static',
                        size: '60',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () { });
                    break;
                case "CUSTOMER":
                    $rootScope.ObjectCustomer.CustomerId = id;
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCustomer + '/edit.html',
                        controller: 'editCustomer',
                        backdrop: 'static',
                        size: '70',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () { });
                    break;
                case "REQUEST_PRICE":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderRQPrice + '/edit.html',
                        controller: 'editRQPrice',
                        backdrop: 'static',
                        size: '50',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () { });
                    break;
                case "ORDER_REQUEST":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/editOrderRQ.html',
                        controller: 'editOrderRQ',
                        backdrop: 'static',
                        size: '50',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () { });
                    break;
                case "SERVICECAT":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/editService.html',
                        controller: 'editService',
                        backdrop: 'static',
                        size: '50',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () {
                    });
                    break;
                case "PRODUCT":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/editMaterial.html',
                        controller: 'editMaterial',
                        backdrop: 'static',
                        size: '60',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () {
                    });
                    break;
                case "SUPPLIER":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/editSupplier.html',
                        controller: 'editSupplier',
                        backdrop: 'static',
                        size: '70',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () { });
                    break;
                case "CONTRACT":
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderContract + '/edit.html',
                        controller: 'contractEdit',
                        backdrop: 'static',
                        size: '70',
                        resolve: {
                            para: function () {
                                return id;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                    }, function () { });
                    break;
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_CLICK_SAVE_FIRST);
        }

    }

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
        refrestTable();
    }, 100);
});

app.controller('add-group-or-teamCardJob', function ($scope, $rootScope, $cookies, $compile, $uibModal, $uibModalInstance, $filter, dataserviceCardJob, obj) {
    $scope.model = {
        Object: {
            Type: 0,
            Name: ''
        },
        ClassObject: {
            Type: 0,
            Name: ''
        },
        Branch: 'b_HN'
    };

    var id = 0;
    $scope.departmentAssignCode = "";
    $scope.groupAssignCode = "";

    $scope.cardMember = {
        listTeamAssign: [],
        listDepartmentAssign: [],
        listMember: []
    };

    $scope.lstAssign = [];

    $scope.lstDelAssign = [];

    $scope.lstGroup = [];

    $scope.isChangeAssign = false;

    $scope.RoleUser = "";

    $scope.cardCode = obj.CardCode;

    $scope.listGroupUserAndDepartment = [];

    $scope.listDeleteObj = [];

    $scope.RoleData = [];

    $scope.listDeleteMember = [];

    //Keep data

    $scope.groupAssign = [];

    $scope.departmentAssign = [];

    //Member multi-select
    $scope.listUser = [];
    $scope.memberAssign = [];
    $scope.stringSettings = { displayProp: 'GivenName', idProperty: 'UserId', enableSearch: true };
    $scope.modelMember = [];
    $scope.eventMember = {
        onClose: function () {
            $scope.isChangeAssign = true;
            $scope.lstAssign = [];
            for (var item of $scope.memberAssign) {
                if (item.Id != '' && item.Id != null && item.Id != undefined) {
                    var isExits = false;
                    for (var i = 0; i < $scope.lstAssign.length; i++) {
                        if ($scope.lstAssign[i].UserId == item.UserId) {
                            isExits = true;
                            break;
                        }
                    }
                    if (!isExits) {
                        $scope.lstAssign.push(item);
                    }
                }
                else {
                    var object = "";
                    if ($scope.model.Object.Type == 2) {
                        object = $scope.model.Object.Code;
                    }
                    //check userIsLeader
                    (function (item) {
                        dataserviceCardJob.checkLeader(item.UserId, $scope.model.Branch, object, function (rs) {
                            rs = rs.data;
                            if (rs.IsLeader) {
                                if ($scope.lstAssign.length > 0) {
                                    var isExits = false;
                                    for (var i = 0; i < $scope.lstAssign.length; i++) {
                                        if ($scope.lstAssign[i].UserId == item.UserId) {
                                            isExits = true;
                                            break;
                                        }
                                    }
                                    if (!isExits) {
                                        id = id - 1;
                                        var assign = {
                                            Id: id,
                                            UserId: item.UserId,
                                            Role: "ROLE_STAFF",
                                            Group: $scope.groupAssignCode,
                                            DepartmentName: item.DepartmentName,
                                            GivenName: item.GivenName,
                                            CardCode: obj.CardCode,
                                            Approve: true,
                                            RoleSys: item.RoleSys,
                                            Depart: $scope.departmentAssignCode,
                                            Branch: item.Branch,
                                            CreatedBy: userName,
                                            IsInteract: false,
                                            Status: "ASSIGN_STATUS_WORK"
                                        }
                                        $scope.lstAssign.unshift(assign);
                                    }
                                    //else {
                                    //    App.toastrError("Nhân viên đã được thêm vào thẻ việc");
                                    //}
                                }
                                else {
                                    id = id - 1;
                                    var assign = {
                                        Id: id,
                                        UserId: item.UserId,
                                        Role: "ROLE_STAFF",
                                        Group: $scope.groupAssignCode,
                                        Depart: $scope.departmentAssignCode,
                                        DepartmentName: item.DepartmentName,
                                        GivenName: item.GivenName,
                                        CardCode: obj.CardCode,
                                        Approve: true,
                                        RoleSys: item.RoleSys,
                                        Branch: item.Branch,
                                        CreatedBy: userName,
                                        IsInteract: false,
                                        Status: "ASSIGN_STATUS_WORK"
                                    }
                                    $scope.lstAssign.unshift(assign);
                                }
                            }
                            else {
                                var isExist = false;
                                var isExistLeader = false;
                                if ($scope.lstAssign.length > 0) {
                                    for (var i = 0; i < $scope.lstAssign.length; i++) {
                                        if ($scope.lstAssign[i].UserId == item.UserId) {
                                            isExist = true;
                                        }
                                        if (rs.User != null) {
                                            if ($scope.lstAssign[i].UserId == rs.User.Id) {
                                                isExistLeader = true;
                                            }
                                        }
                                    }

                                    if (!isExist) {
                                        id = id - 1;
                                        var assign = {
                                            Id: id,
                                            UserId: item.UserId,
                                            Role: "ROLE_STAFF",
                                            Group: $scope.groupAssignCode,
                                            Depart: $scope.departmentAssignCode,
                                            DepartmentName: item.DepartmentName,
                                            CardCode: obj.CardCode,
                                            GivenName: item.GivenName,
                                            Approve: true,
                                            RoleSys: item.RoleSys,
                                            Branch: item.Branch,
                                            CreatedBy: userName,
                                            IsInteract: false,
                                            Status: "ASSIGN_STATUS_WORK"
                                        }
                                        $scope.lstAssign.unshift(assign);
                                    }
                                    //else {
                                    //    App.toastrError("Nhân viên đã được thêm vào thẻ việc");
                                    //}

                                    if (!isExistLeader && rs.User != null) {
                                        id = id - 1;
                                        var assignLeader = {
                                            Id: id,
                                            UserId: rs.User.Id,
                                            Role: "ROLE_LEADER_ACCEPTED",
                                            Group: $scope.groupAssignCode,
                                            Depart: $scope.departmentAssignCode,
                                            DepartmentName: rs.User.DepartmentId,
                                            CardCode: obj.CardCode,
                                            GivenName: rs.User.GivenName,
                                            Approve: true,
                                            RoleSys: "Trưởng phòng",
                                            Branch: rs.User.Branch,
                                            CreatedBy: userName,
                                            IsInteract: false,
                                            Status: "ASSIGN_STATUS_WORK"
                                        }
                                        $scope.lstAssign.unshift(assignLeader);
                                        $scope.memberAssign.unshift(assignLeader);
                                    }
                                }
                                else {
                                    id = id - 1;
                                    var assign = {
                                        Id: id,
                                        UserId: item.UserId,
                                        Role: "ROLE_STAFF",
                                        Group: $scope.groupAssignCode,
                                        Depart: $scope.departmentAssignCode,
                                        DepartmentName: item.DepartmentName,
                                        GivenName: item.GivenName,
                                        CardCode: obj.CardCode,
                                        Approve: true,
                                        RoleSys: item.RoleSys,
                                        Branch: item.Branch,
                                        CreatedBy: userName,
                                        IsInteract: false,
                                        Status: "ASSIGN_STATUS_WORK"
                                    }
                                    $scope.lstAssign.unshift(assign);
                                    id = id - 1;
                                    if (rs.User != null) {
                                        var assignLeader = {
                                            Id: id,
                                            UserId: rs.User.Id,
                                            Role: "ROLE_LEADER_ACCEPTED",
                                            Group: $scope.groupAssignCode,
                                            Depart: $scope.departmentAssignCode,
                                            DepartmentName: rs.User.DepartmentId,
                                            GivenName: rs.User.GivenName,
                                            CardCode: obj.CardCode,
                                            Approve: true,
                                            RoleSys: "Trưởng phòng",
                                            Branch: rs.User.Branch,
                                            CreatedBy: userName,
                                            IsInteract: false,
                                            Status: "ASSIGN_STATUS_WORK"
                                        }
                                        $scope.lstAssign.unshift(assignLeader);
                                        $scope.memberAssign.unshift(assignLeader);
                                    }
                                }
                            }
                        });
                    })(item);
                }
            }
        }
    };
    $scope.translateMember = {
        buttonDefaultText: caption.CJ_CURD_BTN_MEMBER,
        checkAll: caption.CJ_CURD_TXT_SEARCH_TIME_ALL,
        uncheckAll: caption.CJ_CURD_TXT_SEARCH_TIME_NONE,
        dynamicButtonTextSuffix: caption.CJ_CURD_TXT_SEARCH_TIME_CHECK,
        searchPlaceholder: caption.COM_MULTI_SELECT_SEARCH_PLC_HOLDER
    };
    // end multi-select

    $scope.cancel = function () {
        if ($scope.isChangeAssign) {

            console.log($scope.lstAssign);
            var data = { LstAssign: $scope.lstAssign, LstDelAssign: $scope.lstDelAssign, CardCode: $scope.cardCode };
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderMessage + '/messageConfirmUpdateCard.html',
                resolve: {
                    para: function () {
                        return data;
                    }
                },
                windowClass: "message-center",
                controller: function ($scope, $uibModalInstance, para) {
                    $scope.message = caption.COM_MSG_QUESTION_SAVE;
                    $scope.ok = function () {
                        App.blockUI({
                            target: "#message-confirm",
                            boxed: true,
                            message: 'loading...'
                        });
                        dataserviceCardJob.assignGroupOrTeam(para, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                                App.unblockUI("#message-confirm");
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                $uibModalInstance.close('cancel');
                                App.unblockUI("#message-confirm");
                            }
                        });
                    };
                    $scope.cancel = function () {
                        $uibModalInstance.close('cancel');
                    };
                },
                size: '25',
            });
            modalInstance.result.then(function (d) {
                $uibModalInstance.close();
            }, function () {
            });
        }
        else {
            $uibModalInstance.dismiss();
        }
    };

    $scope.initData = function () {
        dataserviceCardJob.getMemberAssign(obj.CardCode, function (rs) {
            rs = rs.data;
            $scope.lstAssign = rs;
            for (var i = 0; i < $scope.lstAssign.length; i++) {
                if ($scope.lstAssign[i].UserId == userId) {

                    if (!$scope.lstAssign[i].IsInteract) {
                        $scope.isInteract = false;
                    }
                    else if ($scope.lstAssign[i].IsManager) {
                        $scope.isInteract = false;
                    }
                    else if ($scope.lstAssign[i].Role == "ROLE_LEADER_ACCEPTED" || $scope.lstAssign[i].Role == "ROLE_LEADER") {
                        $scope.isInteract = false;
                    }
                    else {
                        $scope.isInteract = true;
                    }
                    break;
                }
            }
            angular.copy($scope.lstAssign, $scope.memberAssign);
        });

        dataserviceCardJob.getListRoleAssign(function (rs) {
            rs = rs.data;
            $scope.RoleData = rs;
        });

        dataserviceCardJob.getBranch(function (rs) {
            rs = rs.data;
            $scope.listBranch = rs;
            $scope.branchSelect($scope.model.Branch);
        });

        dataserviceCardJob.getStatusAssign(function (rs) {
            rs = rs.data;
            $scope.lstStatusAssign = rs;
        });

        dataserviceCardJob.roleChangeStatusAssign(function (rs) {
            rs = rs.data;
            $scope.isChangeStatus = rs;
        })

        dataserviceCardJob.getListUser(function (rs) {
            rs = rs.data;
            $scope.listUser = rs;
            //$scope.countUser = $scope.listUser.length;
        })
    };

    $scope.initData();

    var allMember = {
        UserId: "ALL",
        GivenName: "Tất cả",
        UserName: "All",
        RoleSys: "",
        Branch: "",
        DepartmentName: ""
    }

    $scope.departmentOrGroupSelect = function (obj) {
        $scope.listUser = [];
        $scope.departmentAssignCode = "";
        $scope.groupAssignCode = "";
        if (obj.Type == 1) {
            $scope.groupAssignCode = obj.Code;
            dataserviceCardJob.getMemberInGroupUser(obj.Code, $scope.model.Branch, function (rs) {
                rs = rs.data;
                $scope.listUser = rs;
                $scope.countUser = rs.length;
                $scope.listUser.unshift(allMember);
            });
        }
        else if (obj.Type == 2) {
            $scope.departmentAssignCode = obj.Code;
            dataserviceCardJob.getListUserInDepartment(obj.Code, $scope.model.Branch, function (rs) {
                rs = rs.data;
                $scope.listUser = rs;
                $scope.countUser = rs.length;
                $scope.listUser.unshift(allMember);
            });
        } else {
            dataserviceCardJob.getListUserOfBranch($scope.model.Branch, function (rs) {
                rs = rs.data;
                $scope.listUser = rs;
                $scope.countUser = rs.length;
                $scope.listUser.unshift(allMember);
            });
        }
        $scope.isCheckAll = false;
    };

    $scope.departmentOrGroupSelectAll = function (isCheck, obj) {
        if ($scope.model.Object == null || $scope.model.Object == "" || $scope.model.Object == undefined) {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_GROUP_DEPARTMENT);
            return "";
        }
        if (isCheck) {

            if (obj.Type == 2) {
                $scope.departmentAssignCode = obj.Code;
            }
            else if (obj.Type == 1) {
                $scope.groupAssignCode = obj.Code;
            }

        } else {
            $scope.departmentAssignCode = "";
            $scope.groupAssignCode = "";
        }
    };

    $scope.branchSelect = function (code) {
        $scope.listGroupUserAndDepartment = [];
        $scope.listUser = [];
        dataserviceCardJob.getDepartmentInBranch(code, function (department) {
            department = department.data;
            dataserviceCardJob.getListGroupUser(code, function (groupUser) {
                groupUser = groupUser.data;
                $scope.lstGroup = groupUser;
                dataserviceCardJob.getListUserOfBranch($scope.model.Branch, function (rs) {
                    rs = rs.data;
                    $scope.countAllUser = rs.length;
                    var all = {
                        Code: 'All',
                        Name: 'Tất cả người dùng',
                        Type: 3,
                        Group: 'Người dùng',
                        CountUser: $scope.countAllUser
                    }
                    $scope.listGroupUserAndDepartment.push(all);
                    var listGroupUserAndDepartment = [];
                    if (obj.Type == 4) {
                        listGroupUserAndDepartment = department.concat($scope.lstGroup);
                    } else {
                        var listGroupUserAndDepartment = obj.Type == 1 ? $scope.lstGroup : department;
                    }
                    for (var i = 0; i < listGroupUserAndDepartment.length; i++) {
                        $scope.listGroupUserAndDepartment.push(listGroupUserAndDepartment[i]);
                    }
                });
            });
        })
    };

    $scope.memberSelect = function (item) {
        $scope.isChangeAssign = true;
        if (item.UserId == "ALL") {
            if ($scope.listUser.length > 0) {
                if ($scope.lstAssign.length > 0) {
                    for (var i = 0; i < $scope.listUser.length; i++) {
                        var isExits = false;
                        for (var j = 0; j < $scope.lstAssign.length; j++) {
                            if ($scope.listUser[i].UserId == $scope.lstAssign[j].UserId && $scope.listUser[i].UserId != "ALL") {
                                isExits = true;
                                break;
                            }
                        }
                        if (!isExits) {
                            id = id - 1;
                            if ($scope.listUser[i].UserId != "ALL") {
                                var assign = {
                                    Id: id,
                                    UserId: $scope.listUser[i].UserId,
                                    Role: "ROLE_STAFF",
                                    Group: $scope.groupAssignCode,
                                    Depart: $scope.departmentAssignCode,
                                    GivenName: $scope.listUser[i].GivenName,
                                    CardCode: obj.CardCode,
                                    Approve: true,
                                    RoleSys: $scope.listUser[i].RoleSys,
                                    DepartmentName: $scope.listUser[i].DepartmentName,
                                    Branch: $scope.listUser[i].Branch,
                                    CreatedBy: userName,
                                    IsInteract: false,
                                    Status: "ASSIGN_STATUS_WORK"
                                }
                                $scope.lstAssign.unshift(assign);
                            }
                        }
                    }
                }
                else {
                    for (var i = 0; i < $scope.listUser.length; i++) {
                        id = id - 1;
                        if ($scope.listUser[i].UserId != "ALL") {
                            var assign = {
                                Id: id,
                                UserId: $scope.listUser[i].UserId,
                                Role: "ROLE_STAFF",
                                Group: $scope.groupAssignCode,
                                Depart: $scope.departmentAssignCode,
                                GivenName: $scope.listUser[i].GivenName,
                                CardCode: obj.CardCode,
                                Approve: true,
                                RoleSys: $scope.listUser[i].RoleSys,
                                DepartmentName: $scope.listUser[i].DepartmentName,
                                Branch: $scope.listUser[i].Branch,
                                CreatedBy: userName,
                                IsInteract: false,
                                Status: "ASSIGN_STATUS_WORK"
                            }
                            $scope.lstAssign.unshift(assign);
                        }
                    }
                }
            }
        }
        else {
            var object = "";
            if ($scope.model.Object.Type == 2) {
                object = $scope.model.Object.Code;
            }
            //check userIsLeader
            dataserviceCardJob.checkLeader(item.UserId, $scope.model.Branch, object, function (rs) {
                rs = rs.data;
                if (rs.IsLeader) {
                    if ($scope.lstAssign.length > 0) {
                        var isExits = false;
                        for (var i = 0; i < $scope.lstAssign.length; i++) {
                            if ($scope.lstAssign[i].UserId == item.UserId) {
                                isExits = true;
                                break;
                            }
                        }
                        if (!isExits) {
                            id = id - 1;
                            var assign = {
                                Id: id,
                                UserId: item.UserId,
                                Role: "ROLE_STAFF",
                                Group: $scope.groupAssignCode,
                                DepartmentName: item.DepartmentName,
                                GivenName: item.GivenName,
                                CardCode: obj.CardCode,
                                Approve: true,
                                RoleSys: item.RoleSys,
                                Depart: $scope.departmentAssignCode,
                                Branch: item.Branch,
                                CreatedBy: userName,
                                IsInteract: false,
                                Status: "ASSIGN_STATUS_WORK"
                            }
                            $scope.lstAssign.unshift(assign);
                        }
                        else {
                            App.toastrError("Nhân viên đã được thêm vào thẻ việc");
                        }
                    }
                    else {
                        id = id - 1;
                        var assign = {
                            Id: id,
                            UserId: item.UserId,
                            Role: "ROLE_STAFF",
                            Group: $scope.groupAssignCode,
                            Depart: $scope.departmentAssignCode,
                            DepartmentName: item.DepartmentName,
                            GivenName: item.GivenName,
                            CardCode: obj.CardCode,
                            Approve: true,
                            RoleSys: item.RoleSys,
                            Branch: item.Branch,
                            CreatedBy: userName,
                            IsInteract: false,
                            Status: "ASSIGN_STATUS_WORK"
                        }
                        $scope.lstAssign.unshift(assign);
                    }
                }
                else {
                    var isExist = false;
                    var isExistLeader = false;
                    if ($scope.lstAssign.length > 0) {
                        for (var i = 0; i < $scope.lstAssign.length; i++) {
                            if ($scope.lstAssign[i].UserId == item.UserId) {
                                isExist = true;
                            }
                            if (rs.User != null) {
                                if ($scope.lstAssign[i].UserId == rs.User.Id) {
                                    isExistLeader = true;
                                }
                            }
                        }

                        if (!isExist) {
                            id = id - 1;
                            var assign = {
                                Id: id,
                                UserId: item.UserId,
                                Role: "ROLE_STAFF",
                                Group: $scope.groupAssignCode,
                                Depart: $scope.departmentAssignCode,
                                DepartmentName: item.DepartmentName,
                                CardCode: obj.CardCode,
                                GivenName: item.GivenName,
                                Approve: true,
                                RoleSys: item.RoleSys,
                                Branch: item.Branch,
                                CreatedBy: userName,
                                IsInteract: false,
                                Status: "ASSIGN_STATUS_WORK"
                            }
                            $scope.lstAssign.unshift(assign);
                        }
                        else {
                            App.toastrError("Nhân viên đã được thêm vào thẻ việc");
                        }

                        if (!isExistLeader && rs.User != null) {
                            id = id - 1;
                            var assignLeader = {
                                Id: id,
                                UserId: rs.User.Id,
                                Role: "ROLE_LEADER_ACCEPTED",
                                Group: $scope.groupAssignCode,
                                Depart: $scope.departmentAssignCode,
                                DepartmentName: rs.User.DepartmentId,
                                CardCode: obj.CardCode,
                                GivenName: rs.User.GivenName,
                                Approve: true,
                                RoleSys: "Trưởng phòng",
                                Branch: rs.User.Branch,
                                CreatedBy: userName,
                                IsInteract: false,
                                Status: "ASSIGN_STATUS_WORK"
                            }
                            $scope.lstAssign.unshift(assignLeader);
                        }
                    }
                    else {
                        id = id - 1;
                        var assign = {
                            Id: id,
                            UserId: item.UserId,
                            Role: "ROLE_STAFF",
                            Group: $scope.groupAssignCode,
                            Depart: $scope.departmentAssignCode,
                            DepartmentName: item.DepartmentName,
                            GivenName: item.GivenName,
                            CardCode: obj.CardCode,
                            Approve: true,
                            RoleSys: item.RoleSys,
                            Branch: item.Branch,
                            CreatedBy: userName,
                            IsInteract: false,
                            Status: "ASSIGN_STATUS_WORK"
                        }
                        $scope.lstAssign.unshift(assign);
                        id = id - 1;
                        if (rs.User != null) {
                            var assignLeader = {
                                Id: id,
                                UserId: rs.User.Id,
                                Role: "ROLE_LEADER_ACCEPTED",
                                Group: $scope.groupAssignCode,
                                Depart: $scope.departmentAssignCode,
                                DepartmentName: rs.User.DepartmentId,
                                GivenName: rs.User.GivenName,
                                CardCode: obj.CardCode,
                                Approve: true,
                                RoleSys: "Trưởng phòng",
                                Branch: rs.User.Branch,
                                CreatedBy: userName,
                                IsInteract: false,
                                Status: "ASSIGN_STATUS_WORK"
                            }
                            $scope.lstAssign.unshift(assignLeader);
                        }
                    }
                }
            });
        }
    };

    $scope.removeMember = function (userId, id, givenName) {

        var departmentDel = "";
        var isExist = false;
        for (var i = 0; i < $scope.lstAssign.length; i++) {
            if ($scope.lstAssign[i].UserId == userId) {
                departmentDel = $scope.lstAssign[i].Department
                $scope.lstAssign.splice(i, 1);
                $scope.isChangeAssign = true;
                if (id > 0) {
                    var obj = {
                        Id: id,
                        GivenName: givenName
                    };
                    $scope.lstDelAssign.push(obj);
                }
                break;
            }
        }
        for (var i = 0; i < $scope.lstAssign.length; i++) {
            if (departmentDel != "" && $scope.lstAssign[i].Department == departmentDel && $scope.lstAssign[i].UserId != userId
                && $scope.lstAssign[i].Role != "ROLE_LEADER_ACCEPTED") {
                isExist = true;
                break;
            }
        }
        if (!isExist) {
            for (var i = 0; i < $scope.lstAssign.length; i++) {
                if ($scope.lstAssign[i].Department == departmentDel && $scope.lstAssign[i].Role == "ROLE_LEADER_ACCEPTED") {
                    if (id > 0) {
                        var obj = {
                            Id: $scope.lstAssign[i].Id,
                            GivenName: $scope.lstAssign[i].GivenName
                        };
                        $scope.lstDelAssign.push(obj);
                    }
                    $scope.lstAssign.splice(i, 1);
                }
            }
        }
    };

    $scope.submit = function () {
        dataserviceCardJob.changeCardStatus(obj.CardCode, "START", function (rs) {
            rs = rs.data;
            if (rs.Error) {
            }
            else {
                //$scope.initData();
            }
        });
        var data = { LstAssign: $scope.lstAssign };

        dataserviceCardJob.assignGroupOrTeam(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.cancel();
            }
        });
    };

    $scope.approveEmployee = function (id, isCheck, value) {
        for (var i = 0; i < $scope.lstAssign.length; i++) {
            if ($scope.lstAssign[i].Id == id) {
                $scope.isChangeAssign = true;

                if (value == 1) {
                    if (isCheck) {
                        $scope.lstAssign[i].IsAccept = true;
                        $scope.lstAssign[i].IsReject = false;
                        $scope.lstAssign[i].Approve = true;
                    }
                    else {
                        $scope.lstAssign[i].IsAccept = false;
                        $scope.lstAssign[i].Approve = false;
                    }
                }
                else if (value == 0) {
                    if (isCheck) {
                        $scope.lstAssign[i].IsAccept = false;
                        $scope.lstAssign[i].IsReject = true;
                        if (id > 0) {
                            var obj = {
                                Id: id,
                                GivenName: $scope.lstAssign[i].GivenName
                            };
                            $scope.lstDelAssign.push(obj);
                        }
                        $scope.lstAssign.splice(i, 1);

                        break;
                    }
                }
            }
        }
    }

    $scope.addRoleAssign = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'CARD_ROLE',
                        GroupNote: 'Vai trò thẻ việc',
                        AssetCode: 'CARD_ROLE_ASSIGN'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListRoleAssign(function (rs) {
                rs = rs.data;
                $scope.RoleData = rs;
            });
        }, function () { });
    };

    $scope.assignStatus = function (id, value) {
        dataserviceCardJob.assignStatus(id, value, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
            }
        })
    }

    $scope.statusSelect = function () {
        $scope.isChangeAssign = true;
    }

    $scope.roleSelectMember = function () {
        $scope.isChangeAssign = true;
    }

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('edit-progressCardJob', function ($scope, $rootScope, $cookies, $compile, $uibModal, $uibModalInstance, $filter, dataserviceCardJob, para) {
    $scope.model = {
        Progress: 0,
    };
    $scope.init = function () {
        dataserviceCardJob.getCardProgress(para.CardCode, function (rs) {
            rs = rs.data;
            $scope.model.Progress = rs.Object.Progress;
        })
    }
    $scope.init();
    $scope.cancel = function () {
        $uibModalInstance.dismiss("cancel");
    };
    $scope.submit = function () {
        var obj = {
            CardCode: para.CardCode,
            Progress: $scope.model.Progress
        }
        if ($scope.addform.validate()) {
            dataserviceCardJob.updateProgress(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }

    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('add-checklistCardJob', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, cardCode) {
    $scope.model = {
        WeightNum: '',
        Title: ''
    };
    //var idChkItem = -1;
    $scope.maxWeightNum = 0;
    $scope.validationOptions = {
        rules: {
            Title: {
                required: true,
                maxlength: 255,
            },
            WeightNum: {
                required: true,
                min: 0,
                max: 100,
            },
            DeadLine: {
                required: true,
            }
        },
        messages: {
            Title: {
                required: caption.COM_ERR_REQUIRED.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE),//'Nhập tiêu đề!',
                maxlength: caption.COM_ERR_EXCEED_CHARACTERS.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE).replace("{1}", "255")//'Cho phép tối đa 255 ký tự!'
            },
            WeightNum: {
                min: caption.CJ_VALIDATE_WEIGHT_NUM_GREATER_THAN_0,
                max: caption.CJ_VALIDATE_WEIGHT_NUM_SMALLER_THAN_100
            },
            DeadLine: {
                required: caption.CJ_VALIDATE_DEADLINE_REQUIRE,
            },
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }
    $scope.initData = function () {
        //if ($rootScope.ItemCheck.length > 0) {
        //    var weightUse = 0
        //    for (var i = 0; i < $rootScope.ItemCheck.length; i++) {
        //        weightUse += $rootScope.ItemCheck[i].WeightNum;
        //    }
        //    $scope.maxWeightNum = 100 - weightUse;
        //} else {
        //    $scope.maxWeightNum = 100
        //}
        dataserviceCardJob.getMaxWeightNumCheckList(cardCode, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                $scope.maxWeightNum = rs.Object;
            }
        });
    }
    $scope.initData();
    $scope.submit = function () {
        if ($scope.checklist.validate()) {
            var chkCode = "CHECK_LIST_" + generateUUID();
            var obj = {
                CardCode: cardCode,
                CheckTitle: $scope.model.Title,
                WeightNum: $scope.model.WeightNum,
                ChkListCode: chkCode
            }
            dataserviceCardJob.addCheckList(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    function loadDate() {
        $("#CheckListStart").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
            todayHighlight: true
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#CheckListDeadLine').datepicker('setStartDate', maxDate);
        });
        $("#CheckListDeadLine").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
            todayHighlight: true
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#CheckListStart').datepicker('setEndDate', maxDate);
        });
    }
    setTimeout(function () {
        loadDate();
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('labelCardJob', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, cardCode) {
    $scope.model = {

    };
    $scope.validationOptions = {
        rules: {

        },
        messages: {

        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }

    $scope.initData = function () {

    }
    $scope.initData();



    $scope.submit = function () {
        var label = '';
        var element = $('.label-checkbox:checked');
        angular.forEach(element, function (value, key) {
            label += value.value + ';';
        })
        label = label.substring(0, label.length - 1);
        console.log(label);
        if (label != '') {
            var obj = {
                CardCode: cardCode,
                Labels: label
            }
            dataserviceCardJob.updateCardLabel(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
        else {
            App.toastrError(caption.CJ_CURD_MSG_CHOOSE_LABEL);//Chọn nhãn!
        }
    }
});

app.controller('add-item-work', function ($scope, $rootScope, $compile, $uibModal, $filter/*, $uibModalInstance*/, dataserviceCardJob, dataserviceSupplier, DTOptionsBuilder, DTColumnBuilder, $translate/*, paraItemWork*/) {
    var paraItemWork = {
        CardCode: $rootScope.CardCode
    };
    $scope.cancel = function () {
        //$uibModalInstance.close('cancel');
    }

    $scope.model = {
        Desc: ''
    };

    $scope.listShift = [
        {
            Code: "CA_1",
            Name: "Ca 1"
        },
        {
            Code: "CA_2",
            Name: "Ca 2"

        },
        {
            Code: "CA_3",
            Name: "Ca 3"
        }
    ]

    $scope.listItemActivity = [];

    $scope.initData = function () {
        paraItemWork.CardCode = $rootScope.CardCode;
        var today = new Date();
        $scope.sessionTime = $filter('date')(today, 'dd/MM/yyyy');
        $scope.shiftCode = "CA_1";
        dataserviceCardJob.getItemCheckRpt(paraItemWork.CardCode, function (rs) {
            rs = rs.data;
            $scope.listReportItem = rs;
            for (var i = 0; i < $scope.listReportItem.length; i++) {
                $scope.listReportItem[i].Name = decodeHTML($scope.listReportItem[i].Name);
            }
        })
        dataserviceCardJob.autoGenerateWorkSession(function (rs) {
            rs = rs.data;
            $scope.sessionNumber = rs;
            var arrDate = $scope.sessionTime.split("/");
            var dateStr = arrDate[0] + arrDate[1] + arrDate[2];
            $scope.shift = dateStr + "_" + $scope.shiftCode + "_" + $scope.sessionNumber
        })
        dataserviceCardJob.getReportSession(paraItemWork.CardCode, function (rs) {
            rs = rs.data;
            $scope.listItemActivity = rs;
        })
    }
    $scope.initSubscribe = function () {
        var reloadItemWork = $rootScope.$on('reloadItemWork', function (event) {
            $scope.initData();
        });
        $scope.$on('$destroy', reloadItemWork);
    }

    $scope.initData();
    $scope.initSubscribe();

    $scope.changeData = function (type, code) {
        $scope.shift = "";
        var arrDate = $scope.sessionTime.split("/");
        var dateStr = arrDate[0] + arrDate[1] + arrDate[2];
        if (type === "sessionTime") {

            $scope.shift = dateStr + "_" + $scope.shiftCode + "_" + $scope.sessionNumber
        }
        else if (type === "shiftCode") {
            $scope.shift = dateStr + "_" + code + "_" + $scope.sessionNumber
        }
    }

    $scope.submit = function () {
        var data = {
            ListReportItem: $scope.listReportItem,
            Desc: $scope.model.Desc,
            WorkSession: $scope.shift,
            CardCode: paraItemWork.CardCode
        }
        dataserviceCardJob.inserReportSession(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.autoGenerateWorkSession(function (rs) {
                    rs = rs.data;
                    $scope.sessionNumber = rs;
                    var arrDate = $scope.sessionTime.split("/");
                    var dateStr = arrDate[0] + arrDate[1] + arrDate[2];
                    $scope.shift = dateStr + "_" + $scope.shiftCode + "_" + $scope.sessionNumber
                })
                dataserviceCardJob.getReportSession(paraItemWork.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.listItemActivity = rs;
                })
                $rootScope.$broadcast('addItemWork', {});
            }
        })
    }

    $scope.delReportResult = function (id, created) {
        dataserviceCardJob.delReportSession(id, created, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initData();
                $scope.editSessionWork = false;
                $rootScope.$broadcast('addItemWork', {});
            }
        })
    }

    //Update and approve
    $scope.editSessionWork = false;
    $scope.editAllowed = true;
    $scope.getItemSessionWork = function (item) {
        var code = item.Session;
        $scope.shift = code;
        $scope.editSessionWork = true;
        if (item.UserName != userName) {
            $scope.editAllowed = false;
        }
        else {
            $scope.editAllowed = true;
        }
        dataserviceCardJob.getItemSessionWork(code, paraItemWork.CardCode, function (rs) {
            rs = rs.data;
            $scope.listReportItem = rs;
            if ($scope.listReportItem.length > 0) {
                $scope.model.Desc = $scope.listReportItem[0].Desc;
            }
        })
    }

    $scope.approveSessionWork = function () {
        var data = {
            ListReportItem: $scope.listReportItem,
            Desc: $scope.model.Desc,
            WorkSession: $scope.shift,
            CardCode: paraItemWork.CardCode
        }
        dataserviceCardJob.approveSessionWork(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title)
                $scope.initData();
                $scope.editSessionWork = false;
                $rootScope.$broadcast('addItemWork', {});
            }
        })
    }

    $scope.cancelApprove = function () {
        $scope.editSessionWork = false;
        $scope.editAllowed = true;
        $scope.initData();
    }

    $scope.updateReportResult = function (id, createdBy, userAssessor) {
        if (createdBy != userName && !$rootScope.isApprove) {
            return App.toastrError("Bạn không có quyền chỉnh sửa tiến độ của nhân viên khác");
        }
        else if (createdBy === userName && userAssessor != '' && !$rootScope.isApprove) {
            return App.toastrError("Bạn không có quyền chỉnh sửa tiến độ đã được duyệt");
        }

        $scope.isEdit = true;
        $scope.editAllowed = true;
        dataserviceCardJob.getItemReportResult(id, function (rs) {
            rs = rs.data;
            $scope.listReportItem = rs;
        })
    }

    function loadDate() {
        $("#sessionTime").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            dateFormat: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

        });
    }
    setTimeout(function () {
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);

    //File item
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CardJob/JTableFileWorkResult",
            beforeSend: function (jqXHR, settings) {
                //App.blockUI({
                //    target: "#item-work-body",
                //    boxed: true,
                //    message: 'loading...'
                //});
            },
            type: 'POST',
            data: function (d) {
                d.ItemCode = paraItemWork.CardCode;
            },
            complete: function () {
                //App.unblockUI("#item-work-body");
                heightTableManual(335, "#tblDataCustomerFile");
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(5)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row))($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle(titleHtml).notSortable().renderWith(function (data, type, full, meta) {
        $scope.selected[full.Id] = false;
        return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-click="toggleOne(selected)"/><span></span></label>';
    }).withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileName').withTitle("{{'CJ_CURD_LBL_FILE_NAME' | translate}}").renderWith(function (data, type, full) {
        var excel = ['.XLSM', '.XLSX', '.XLS'];
        var document = ['.TXT'];
        var word = ['.DOCX', '.DOC'];
        var pdf = ['.PDF'];
        var powerPoint = ['.PPS', '.PPTX', '.PPT'];
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];
        var icon = "";
        if (excel.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(106,170,89);font-size: 15px;" class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp;';
        } else if (word.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(13,118,206);font-size: 15px;" class="fa fa-file-word-o" aria-hidden="true"></i>&nbsp;';
        } else if (document.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(0,0,0);font-size: 15px;" class="fa fa-file-text-o" aria-hidden="true"></i>&nbsp;';
        } else if (pdf.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-pdf-o" aria-hidden="true"></i>&nbsp;';
        } else if (powerPoint.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-powerpoint-o" aria-hidden="true"></i>&nbsp;';
        } else if (image.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fa fa-picture-o" aria-hidden="true"></i>&nbsp;';
        } else {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fas fa-align-justify" aria-hidden="true"></i>&nbsp;';
        }
        return icon + data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('ReposName').withTitle("{{'CJ_LIST_COL_CAT' | translate}}").renderWith(function (data, type, full) {
        return '<i class="fa fa-folder-open icon-state-warning"></i>&nbsp' + data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileID').withOption('sClass', 'nowrap dataTable-w80 text-center').withTitle("{{'CJ_LIST_COL_VIEW_CONTENT' | translate}}").notSortable().renderWith(function (data, type, full) {
        var excel = ['.XLSM', '.XLSX', '.XLS'];
        var document = ['.TXT'];
        var word = ['.DOCX', '.DOC'];
        var pdf = ['.PDF'];
        var powerPoint = ['.PPS', '.PPTX', '.PPT'];
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];

        var mode = 2;
        if (full.ListUserShare != "" && full.ListUserShare != null && full.ListUserShare != undefined) {
            var lstShare = JSON.parse(full.ListUserShare);
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write) {
                            mode = 0;
                            break;
                        }
                    }
                }
            }
        }

        if (excel.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'excel';
            return '<a ng-click="viewExcel(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-edit fs20"></i></a>';
        } else if (word.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'Syncfusion';
            return '<a ng-click="viewWord(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-edit fs20"></i></a>';
        } else if (pdf.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'pdf';
            return '<a ng-click="viewPDF(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-edit fs20"></i></a>';
        } else if (document.indexOf(full.FileTypePhysic.toUpperCase()) !== -1 || image.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            return '<a ng-click="view(' + full.Id + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-eye fs20"></i></a>';
        } else {
            return '<a ng-click="getObjectFile(0)" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-eye fs20"></i></a>';
        }
    }));
    //vm.dtcolumns.push(dtcolumnbuilder.newcolumn('').withtitle('{{"cj_list_col_des" | translate}}').notsortable().renderwith(function (data, type, full) {
    //    return '<button title="mô tả" ng-click="extension(' + full.fileid + ')" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-info-circle"></i></button>';
    //}));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedTime').withTitle("{{'CJ_COL_CREATE_DATE' | translate}}").renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('action').withTitle($translate('COM_LIST_COL_ACTION')).withOption('sClass', 'nowrap w75').renderWith(function (data, type, full) {
        if (full.TypeFile == "SHARE") {
            return '<a ng-click="download(\'' + full.FileCode + '\')" target="_blank" style="width: 25px; height: 25px; padding: 0px" title="Tải xuống - ' + full.FileName + '" class1="btn btn-icon-only btn-circle btn-outline green " download><i class="fas fa-download fs20"></i></a>';
        } else {
            return '<a ng-click="share(' + full.Id + ')" style="width: 25px; height: 25px; padding: 0px; margin-right: 20px" title="Chia sẻ - ' + full.FileName + '" class1="btn btn-icon-only btn-circle btn-outline blue "><i class="fas fa-share-alt fs20" style="color: #183153"></i></a>' +
                '<a ng-click="download(\'' + full.FileCode + '\')" style="width: 25px; height: 25px; padding: 0px; margin-right: 20px; color: green" title="Tải xuống - ' + full.FileName + '" class1="btn btn-icon-only btn-circle btn-outline green"><i class="fas fa-download fs20"></i></a>' +
                '<a title="Xoá" ng-click="delete(' + full.Id + ')" style="width: 25px; height: 25px; padding: 0px; color: red" class1="btn btn-icon-only btn-circle btn-outline red"><i class="fas fa-trash-alt fs20"></i></button>';
        }
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};

    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }

    function callback(json) {

    }

    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }

    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }

    $scope.reload = function () {
        reloadData(true);
    }

    $rootScope.reloadFile = function () {
        $scope.reload();
    }

    $scope.search = function () {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderCustomer + '/file_search.html',
            windowClass: 'modal-file',
            backdrop: 'static',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '30',
        });
        modalInstance.result.then(function (d) {
            reloadData()
        }, function () { });
    }

    $scope.setItemForFile = function (code) {
        $scope.chkCodeFile = code;
    }

    $scope.add = function () {
        debugger
        if ($scope.file == '' || $scope.file == undefined) {
            App.toastrError(caption.COM_MSG_CHOSE_FILE);
        } else {
            App.blockUI({
                target: "#modal-body",
                boxed: true,
                message: 'loading...'
            });
            var data = new FormData();
            data.append("FileUpload", $scope.file);
            data.append("CardCode", $scope.chkCodeFile);
            data.append("IsMore", false);
            dataserviceCardJob.insertCardJobFileResult(data, function (result) {
                result = result.data;
                if (result.Error) {
                    App.toastrError(result.Title);
                    App.unblockUI("#modal-body");
                } else {
                    App.toastrSuccess(result.Title);
                    defaultShareFile(result.Object);
                    $scope.reload();
                    App.unblockUI("#modal-body");
                    $scope.file = null;
                }
            })
        }
    }

    $scope.delete = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataFileResult').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isDelete = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Delete) {
                            isDelete = false;
                            break;
                        }
                    }
                }
                if (!isDelete) {
                    return App.toastrError("Bạn không có quyền xóa tệp tin");
                }
            }
        }

        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            controller: function ($scope, $uibModalInstance) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteCardFile(id, function (result) {
                        result = result.data;
                        if (result.Error) {
                            App.toastrError(result.Title);
                        } else {
                            App.toastrSuccess(result.Title);
                            $uibModalInstance.close();
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    }

    $scope.share = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderFileShare + '/fileShare.html',
            controller: 'fileShare',
            windowClass: 'modal-center',
            backdrop: 'static',
            size: '60',
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () { });
    }

    $scope.viewFile = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        //dataserviceHrEmployeeCustomer.getByteFile(id, function (rs) {rs=rs.data;
        //    
        //    var blob = new Blob([rs.Object], { type: "application/msword;charset=utf-8" });
        //    var blobUrl = URL.createObjectURL(blob);
        //    var url = window.encodeURIComponent(blobUrl);
        //    window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
        //})
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //
        //var dt = userModel.Url;
        //dt = dt.replace("\/", "\\");
        //var url1 = "upload\\repository" + dt;
        //url1 = "\\uploads\\repository\\3.THÔNG TIN CHUNG\\mail vib.docx";
        //var url = window.encodeURIComponent(url1);
        //window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
    }

    $scope.viewImage = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //toDataUrl(window.location.origin + userModel.Url, function (myBase64) {
        //    var modalInstance = $uibModal.open({
        //        templateUrl: '/views/admin/edmsRepository/imageViewer.html',
        //        controller: 'contractTabFileImageViewer',
        //        backdrop: 'static',
        //        size: '40',
        //        resolve: {
        //            para: function () {
        //                return myBase64;
        //            }
        //        }
        //    });
        //    modalInstance.result.then(function (d) {
        //    }, function () {
        //    });
        //});
    }

    $scope.download = function (fileCode) {
        var userModel = {};
        var listdata = $('#tblDataFileResult').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].FileCode == fileCode) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isDownload = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isDownload = false;
                            break;
                        }
                    }
                }
                if (!isDownload) {
                    return App.toastrError("Bạn không có quyền tải tệp tin");
                }
            }
        }

        location.href = "/Admin/EDMSRepository/DownloadFile?fileCode="
            + fileCode;
    }

    $scope.extend = function () {
        var code = "";
        if ($scope.listReportItem.length > 0) {
            code = $scope.listReportItem[0].Code;
        }
        dataserviceSupplier.getDefaultRepo(code, 'ITEM_RESULT', function (rs) {
            rs = rs.data;
            var data = rs !== null ? rs : { CatCode: '', ObjectCode: code, ObjectType: 'ITEM_RESULT' };
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderSupplier + '/addFile.html',
                controller: 'setupRepoDefault',
                windowClass: 'modal-file',
                backdrop: 'static',
                size: '60',
                resolve: {
                    para: function () {
                        return data;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                debugger
                reloadData();
                for (var i = 1; i < $scope.listReportItem.length; i++) {
                    dataserviceCardJob.setupDefaultRepoObject($scope.listReportItem[i].Code, 'ITEM_RESULT', d, function (rs) {
                    })
                }
            }, function () { });
        })
    }

    var count = 1;

    $scope.loadFileResult = function (event) {
        $scope.file = event.target.files[0];
        if (count == 1) {
            count = count + 1;
            if ($scope.file == '' || $scope.file == undefined) {
                count = 1;
                App.toastrError(caption.COM_MSG_CHOSE_FILE);
            }
            else {
                App.blockUI({
                    target: "#modal-body",
                    boxed: true,
                    message: 'loading...'
                });
                var data = new FormData();
                data.append("FileUpload", $scope.file);
                data.append("CardCode", $scope.chkCodeFile);
                data.append("IsMore", false);
                dataserviceCardJob.insertCardJobFileResult(data, function (result) {
                    result = result.data;
                    if (result.Error) {
                        App.toastrError(result.Title);
                        App.unblockUI("#modal-body");
                        count = 1;
                    } else {
                        App.toastrSuccess(result.Title);
                        defaultShareFile(result.Object);
                        $scope.reload();
                        App.unblockUI("#modal-body");
                        $('#' + $scope.chkCodeFile).replaceWith($('#' + $scope.chkCodeFile).val('').clone(true));
                        count = 1;
                    }
                })
            }
        }
    }

    $scope.getObjectFile = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            dataserviceCardJob.getItemFile(id, true, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return null;
                }
            });
        }
    };

    $scope.viewExcel = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataFileResult').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }
        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            if (userModel.SizeOfFile < 20971520) {
                dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        if (rs.ID === -1) {
                            App.toastrError(rs.Title);
                            setTimeout(function () {
                                window.open('/Admin/Excel#', '_blank');
                            }, 2000);
                        } else {
                            App.toastrError(rs.Title);
                        }
                        return null;
                    } else {
                        window.open('/Admin/Excel#', '_blank');
                    }
                });
            } else {
                App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
            }

        }
    };

    $scope.viewWord = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataFileResult').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            if (userModel.SizeOfFile < 20971520) {
                dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        if (rs.ID === -1) {
                            App.toastrError(rs.Title);
                            setTimeout(function () {
                                window.open('/Admin/Docman#', '_blank');
                            }, 2000);
                        } else {
                            App.toastrError(rs.Title);
                        }
                        return null;
                    } else {
                        window.open('/Admin/Docman#', '_blank');
                    }
                });
            } else {
                App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
            }
        }
    };

    $scope.viewPDF = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataFileResult').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }
        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            if (userModel.SizeOfFile < 20971520) {
                dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        if (rs.ID === -1) {
                            App.toastrError(rs.Title);
                            setTimeout(function () {
                                window.open('/Admin/PDF#', '_blank');
                            }, 2000);
                        } else {
                            App.toastrError(rs.Title);
                        }
                        return null;
                    } else {
                        window.open('/Admin/PDF#', '_blank');
                    }
                });
            } else {
                App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
            }
        }
    };

    $scope.view = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var isImage = false;
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];
        var userModel = {};
        var listdata = $('#tblDataFileResult').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (image.indexOf(userModel.FileTypePhysic.toUpperCase()) !== -1) {
            isImage = true;
        }
        if (userModel.CloudFileId != null && userModel.CloudFileId != "") {
            //SHOW LÊN MÀN HÌNH LUÔN
            // window.open(" https://drive.google.com/file/d/" + userModel.CloudFileId + "/view", "_blank");
            //$scope.openViewer("https://drive.google.com/file/d/"+userModel.CloudFileId + "/view");3
            dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                rs = rs.data;
                rs.Object = encodeURI(rs.Object);
                if (rs.Error == false) {
                    if (isImage == false) {
                        window.open(rs.Object, '_blank')
                        //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                    } else
                        $scope.openViewer(rs.Object, isImage);
                    //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                }
                else {

                }
            });
        }
        else {
            dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                rs = rs.data;
                rs.Object = encodeURI(rs.Object);
                if (rs.Error == false) {
                    if (isImage == false) {
                        var url = window.location.origin + '/' + rs.Object;
                        window.open(url, '_blank')
                        //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                    }
                    else
                        $scope.openViewer(rs.Object, isImage);
                    //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                }
                else {

                }
            });
        }
    }

    $scope.openViewer = function (url, isImage) {
        var data = {};
        data.url = url;
        data.isImage = isImage;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/viewer.html',
            controller: 'viewer',
            backdrop: 'false',
            size: '50',
            resolve: {
                para: function () {
                    return data;
                }
            }
        });
    }

    $scope.extension = function (item) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderRepository + '/extension.html',
            controller: 'extension',
            backdrop: 'static',
            size: '55',
            resolve: {
                para: function () {
                    return {
                        Type: 'LIST',
                        Object: item
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    $scope.share = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        var userModel = {};
        var listdata = $('#tblDataFileResult').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (!$rootScope.isApprove && userModel.CreatedBy != userName) {
            return App.toastrError("Bạn không có quyền thực hiện chức năng này");
        }

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/shareFile.html',
            controller: 'shareFile',
            backdrop: 'static',
            size: '40',
            resolve: {
                para: function () {
                    return {
                        Id: id,
                        CardCode: $rootScope.CardCode
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    };

    $scope.fileManage = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if ($rootScope.isUpdate) {
            return App.toastrError("Vui lòng vào phiên");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/fileManage.html',
            controller: 'fileManage',
            backdrop: 'static',
            size: '50',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    }

    $scope.modelShare = {
        Id: '',
        LstShare: ''
    };

    $scope.permission = {
        Read: true,
        Write: true,
        Delete: true
    };

    function defaultShareFile(id) {
        dataserviceCardJob.getListUserShare($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listUser = rs;
            $scope.lstUserShare = [];
            if ($scope.listUser.length > 0) {
                for (var i = 0; i < $scope.listUser.length; i++) {
                    var item = {
                        Code: $scope.listUser[i].Code,
                        Name: $scope.listUser[i].Name,
                        DepartmentName: $scope.listUser[i].DepartmentName,
                        Permission: $scope.permission
                    }
                    $scope.lstUserShare.push(item);
                }
                $scope.modelShare.Id = id;
                $scope.modelShare.LstShare = JSON.stringify($scope.lstUserShare);
                dataserviceCardJob.autoShareFilePermission($scope.modelShare, function (rs) { })
            }
        });
    }
});

app.controller('edit-item-work', function ($scope, $rootScope, $compile, $uibModal, $filter, $uibModalInstance, dataserviceCardJob, idItemWork) {
    $scope.model = {
        CardCode: '',
        ProgressFromStaff: '',
        ShiftCode: '',
        ChkListCode: '',
        WorkSession: '',
        UserLeader: ''
    }

    $scope.modelInOut = {
        ChkinTime: '',
        ChkinLocationTxt: '',
        ChkoutTime: '',
        ChkoutLocationTxt: '',
        ChkinPicRealtime: '',
        ChkoutPicRealtime: '',
        ShiftCode: '',
        Note: '',
        IsChkinRealTime: true
    }
    $scope.modelShift = {};
    $scope.isCheckIn = false;
    $scope.RoleUser = "";
    $scope.listItemWorkCheck = [];
    $scope.cancel = function () {
        $uibModalInstance.close('cancel');
    }
    $scope.initData = function () {
        dataserviceCardJob.getItemWork(idItemWork.Id, function (rs) {
            rs = rs.data;
            $scope.model = rs;
            var startTime = $filter('date')(rs.StartTime, 'dd/MM/yyyy HH:mm');
            var endTime = $filter('date')(rs.EndTime, 'dd/MM/yyyy HH:mm');
            $scope.model.StartTime = startTime;
            $scope.model.EndTime = endTime;
            $scope.model.UserLeader = userName;
            dataserviceCardJob.getAllShiftOfUser($scope.model.CreatedBy, function (rs) {
                rs = rs.data;
                $scope.listShift = rs;
                if ($scope.listShift.length > 0) {
                    var shift = $scope.listShift.find(function (element) {
                        if (element.ShiftCode == $scope.model.ShiftCode) return true;
                    });
                    var inTime = $filter('date')(shift.ChkinTime, 'dd/MM/yyyy HH:mm')
                    var outTime = $filter('date')(shift.ChkoutTime, 'dd/MM/yyyy HH:mm')

                    //InOut time
                    $scope.modelInOut.ChkinTime = $filter('date')(shift.ChkinTime, 'dd/MM/yyyy HH:mm:ss');
                    $scope.modelInOut.ChkoutTime = $filter('date')(shift.ChkoutTime, 'dd/MM/yyyy HH:mm:ss');
                    $scope.modelInOut.ChkinLocationTxt = shift.ChkinLocationTxt;
                    $scope.modelInOut.ChkoutLocationTxt = shift.ChkoutLocationTxt;
                    $scope.modelInOut.ChkinPicRealtime = shift.ChkinPicRealtime;
                    $scope.modelInOut.ChkoutPicRealtime = shift.ChkoutPicRealtime;
                    $scope.modelInOut.Note = shift.Note;
                    $scope.modelInOut.IsChkinRealTime = shift.IsChkinRealTime;
                    $scope.modelInOut.ShiftCode = shift.ShiftCode;

                    $scope.listShiftFormat = []
                    for (var i = 0; i < $scope.listShift.length; i++) {
                        var code = $scope.listShift[i].ShiftCode
                        var dateIn = $filter('date')($scope.listShift[i].ChkinTime, 'HH:mm dd/MM/yyyy');
                        var dateOut = $filter('date')($scope.listShift[i].ChkoutTime, 'HH:mm dd/MM/yyyy')
                        var obj = {
                            ShiftCode: code,
                            DateIn: dateIn,
                            DateOut: dateOut
                        }
                        $scope.listShiftFormat.push(obj);
                    }
                }
            })
        })
        dataserviceCardJob.getCardItemCheck(idItemWork.CardCode, function (rs) {
            rs = rs.data;
            $scope.listCardItemCheck = rs;
        })
        dataserviceCardJob.roleInCardOfUser(idItemWork.CardCode, function (rs) {
            rs = rs.data;
            $scope.RoleUser = rs.Responsibility;
            if ($scope.RoleUser == "ROLE_LEADER") {
                $scope.checkRole = false;
                $scope.roleLeader = true;
            } else {
                $scope.checkRole = true;
                $scope.roleLeader = false;
            }
        })
        dataserviceCardJob.getLastInOut(function (rs) {
            rs = rs.data;
            $scope.isCheckIn = rs.Object.IsCheckIn;
            $scope.modelShift.ShiftCode = rs.Object.ShiftCode;
        })
    }
    $scope.initData();
    $scope.ChkTitle = idItemWork.CheckTitle

    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.itemWork.validate() && !validationSelect($scope.model).Status) {
            if (parseFloat($scope.model.ProgressFromStaff) <= 100) {

                if ($scope.RoleUser != "ROLE_LEADER")
                    $scope.model.UserLeader = "";
                dataserviceCardJob.updateWorkItem($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                })
            } else {
                App.toastrError(caption.CJ_MSG_PROGRESS_LESS_THAN_100);
            }
        }
    }
    $scope.changeShift = function (select) {
        if (select == "ShiftCode" && $scope.model.ShiftCode != "") {
            $scope.errorShiftCode = false;
            var shift = $scope.listShift.find(function (element) {
                if (element.ShiftCode == $scope.model.ShiftCode) return true;
            });
            var inTime = $filter('date')(shift.ChkinTime, 'dd/MM/yyyy HH:mm')
            var outTime = $filter('date')(shift.ChkoutTime, 'dd/MM/yyyy HH:mm')
            $scope.model.StartTime = inTime;
            $scope.model.EndTime = outTime;

            //InOut time
            $scope.modelInOut.ChkinTime = $filter('date')(shift.ChkinTime, 'dd/MM/yyyy HH:mm:ss')
            $scope.modelInOut.ChkoutTime = $filter('date')(shift.ChkoutTime, 'dd/MM/yyyy HH:mm:ss')
            $scope.modelInOut.ChkinLocationTxt = shift.ChkinLocationTxt
            $scope.modelInOut.ChkoutLocationTxt = shift.ChkoutLocationTxt
            $scope.modelInOut.ChkinPicRealtime = shift.ChkinPicRealtime
            $scope.modelInOut.ChkoutPicRealtime = shift.ChkoutPicRealtime
            $scope.modelInOut.Note = shift.Note
            $scope.modelInOut.IsChkinRealTime = shift.IsChkinRealTime
            $scope.modelInOut.ShiftCode = shift.ShiftCode
        }
    }
    $scope.checkInOut = function () {
        initGeolocation();
    }

    function initGeolocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success, fail);
        }
        else {
            alert(caption.CJ_MSG_BROWSER_NOT_SUPPORT);
        }
    }
    function success(position) {
        var lat = position.coords.latitude;
        var lon = position.coords.longitude;
        if ($scope.isCheckIn) {
            $scope.modelShift.ShiftCode = $scope.modelShift.ShiftCode;
            $scope.modelShift.Lat = lat;
            $scope.modelShift.Lon = lon;
            dataserviceCardJob.checkOut($scope.modelShift, function (rs) {
                if (rs.Error) {
                    App.toastrError(rs.Title)
                } else {
                    App.toastrSuccess(rs.Title)
                    $scope.initData();
                }
            })
        } else {
            $scope.modelShift.Lat = lat;
            $scope.modelShift.Lon = lon;
            dataserviceCardJob.checkIn($scope.modelShift, function (rs) {
                if (rs.Error) {
                    App.toastrError(rs.Title)
                } else {
                    App.toastrSuccess(rs.Title)
                    $scope.initData();
                }
            })
        }
    }
    function fail() {

    }
    //Update shift
    $scope.isShiftHidden = true;
    $scope.editShift = function () {
        if ($scope.isShiftHidden == true) {
            $scope.isShiftHidden = false;
        } else {
            $scope.isShiftHidden = true;
        }
    }
    $scope.updateShift = function () {
        if ($scope.modelInOut.IsChkinRealTime == false) {
            if ($scope.modelInOut.ChkinTime != '' && $scope.modelInOut.ChkoutTime != "" && $scope.modelInOut.ChkoutLocationTxt != "" && $scope.modelInOut.ChkinLocationTxt != "") {
                var temp = $rootScope.checkData($scope.modelInOut);
                if (temp.Status) {
                    App.toastrError(temp.Title);
                    return;
                }
                var files = $('#FileChkIn').get(0);
                var fileIn = files.files[0];
                var filesOut = $('#FileChkOut').get(0);
                var fileOut = filesOut.files[0];

                var dataOut = new FormData();
                dataOut.append("FileUpload", fileOut);

                var data = new FormData();
                data.append("FileUpload", fileIn);
                if (fileIn != null && fileOut != null) {
                    dataserviceCardJob.uploadImageInOut(data, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        }
                        else {
                            $scope.modelInOut.ChkinPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.uploadImageInOut(dataOut, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                    return;
                                }
                                else {
                                    $scope.modelInOut.ChkoutPicRealtime = '/uploads/images/' + rs.Object;
                                    dataserviceCardJob.updateCheckInOutManual($scope.modelInOut, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                        } else {
                                            App.toastrSuccess(rs.Title);
                                            var shiftCode = rs.Object.ShiftCode;
                                            loadShift(shiftCode);
                                            $scope.isShiftHidden = true;
                                            dataserviceCardJob.updateAutoShiftCodeWorkItem(shiftCode, $scope.model.ShiftCode, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                    $scope.model.ShiftCode = shiftCode;
                                                }
                                            })
                                        }
                                    })
                                }
                            });
                        }
                    });
                } else if (fileIn != null && fileOut == null) {
                    dataserviceCardJob.uploadImageInOut(data, function (rs) {
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        } else {
                            $scope.modelInOut.ChkinPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.updateCheckInOutManual($scope.modelInOut, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                    $scope.isShiftHidden = true;
                                    var shiftCode = rs.Object.ShiftCode;
                                    loadShift(shiftCode);
                                    dataserviceCardJob.updateAutoShiftCodeWorkItem(shiftCode, $scope.model.ShiftCode, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                            $scope.model.ShiftCode = shiftCode;
                                        }
                                    })
                                }
                            })
                        }
                    });
                } else if (fileIn == null && fileOut != null) {
                    dataserviceCardJob.uploadImageInOut(dataOut, function (rs) {
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        } else {
                            $scope.model.ChkoutPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.updateCheckInOutManual($scope.modelInOut, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                    $scope.isShiftHidden = true;
                                    var shiftCode = rs.Object.ShiftCode;

                                    loadShift(shiftCode);
                                    dataserviceCardJob.updateAutoShiftCodeWorkItem(shiftCode, $scope.model.ShiftCode, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                            $scope.model.ShiftCode = shiftCode;
                                        }
                                    })

                                }
                            })
                        }
                    });
                } else {
                    dataserviceCardJob.updateCheckInOutManual($scope.modelInOut, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);
                            $scope.isShiftHidden = true;
                            var shiftCode = rs.Object.ShiftCode;

                            loadShift(shiftCode);
                            dataserviceCardJob.updateAutoShiftCodeWorkItem(shiftCode, $scope.model.ShiftCode, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                    $scope.model.ShiftCode = shiftCode;
                                }
                            })

                        }
                    })
                }
            }
            else {
                App.toastrError(caption.CJ_MSG_PLS_ENTER_FULL_INFO);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CANNOT_EDIT_WORK_SHIFT);
        }
    }
    function loadShift(shiftCode) {
        dataserviceCardJob.getAllShiftOfUser($scope.model.CreatedBy, function (rs) {
            $scope.listShift = [];
            //$scope.model.ShiftCode = '';
            rs = rs.data;

            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.listShiftFormat = []
                for (var i = 0; i < $scope.listShift.length; i++) {
                    var code = $scope.listShift[i].ShiftCode
                    var dateIn = $filter('date')($scope.listShift[i].ChkinTime, 'HH:mm dd/MM/yyyy');
                    var dateOut = $filter('date')($scope.listShift[i].ChkoutTime, 'HH:mm dd/MM/yyyy')
                    var obj = {
                        ShiftCode: code,
                        DateIn: dateIn,
                        DateOut: dateOut
                    }
                    $scope.listShiftFormat.push(obj);
                }

                var shift = $scope.listShift.find(function (element) {
                    if (element.ShiftCode == shiftCode) return true;
                });

                var inTime = $filter('date')(shift.ChkinTime, 'dd/MM/yyyy HH:mm')
                var outTime = $filter('date')(shift.ChkoutTime, 'dd/MM/yyyy HH:mm')
                $scope.model.StartTime = inTime;
                $scope.model.EndTime = outTime;

                $scope.modelInOut.ChkinTime = $filter('date')(shift.ChkinTime, 'dd/MM/yyyy HH:mm:ss')
                $scope.modelInOut.ChkoutTime = $filter('date')(shift.ChkoutTime, 'dd/MM/yyyy HH:mm:ss')
                $scope.modelInOut.ChkinLocationTxt = shift.ChkinLocationTxt
                $scope.modelInOut.ChkoutLocationTxt = shift.ChkoutLocationTxt
                $scope.modelInOut.ChkinPicRealtime = shift.ChkinPicRealtime
                $scope.modelInOut.ChkoutPicRealtime = shift.ChkoutPicRealtime
                $scope.modelInOut.Note = shift.Note
                $scope.modelInOut.IsChkinRealTime = shift.IsChkinRealTime
                $scope.modelInOut.ShiftCode = shift.ShiftCode
            }
        })
    }
    $scope.loadImageCheckIn = function () {
        var fileuploader = angular.element("#FileChkIn");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageIn').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile != "jpg" && extFile != "jpeg" && extFile != "png" && extFile != "gif" && extFile != "bmp") {
                App.toastrError(caption.COM_MSG_CHECK_ADD_FILEIMAGE);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click')
    }
    $scope.loadImageCheckOut = function () {
        var fileuploader = angular.element("#FileChkOut");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageOut').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile != "jpg" && extFile != "jpeg" && extFile != "png" && extFile != "gif" && extFile != "bmp") {
                App.toastrError(caption.COM_MSG_CHECK_ADD_FILEIMAGE);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click')
    }
    function loadDate() {
        $("#startDateItem").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#endDateItem').datetimepicker('setStartDate', maxDate);
        });
        $("#endDateItem").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#startDateItem').datetimepicker('setEndDate', maxDate);
        });
        $("#chkinTime").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii:ss",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#chkoutTime').datetimepicker('setStartDate', maxDate);
        });
        $("#chkoutTime").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii:ss",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#chkinTime').datetimepicker('setEndDate', maxDate);
        });
    }
    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.ShiftCode == "" || data.ShiftCode == null || data.ShiftCode == undefined) {
            $scope.errorShiftCode = true;
            mess.Status = true;
        } else {
            $scope.errorShiftCode = false;
        }
        return mess;
    };

    setTimeout(function () {
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('assign-user-item-check', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, cardCodeAssign) {
    $scope.model = {
        CardCode: cardCodeAssign.CardCode,
        UserId: '',
        CheckListCode: cardCodeAssign.ChkListCode,
        CheckItem: '',
        Unit: '',
        EstimateTime: ''
    }

    $scope.id = -1;

    $scope.listUserInItem = [];

    $scope.listDelUserInItem = []

    $scope.listItemWorkCheck = [];

    $scope.cancel = function () {
        $uibModalInstance.close(true);
    }

    $scope.initData = function () {
        dataserviceCardJob.getMemberInCardJob(cardCodeAssign.CardCode, function (rs) {
            rs = rs.data;
            $scope.listUsers = rs;
        });
        dataserviceCardJob.getJobCardUser($scope.model, function (rs) {
            rs = rs.data;
            $scope.listUserInItem = rs;
        })
        dataserviceCardJob.getUnitAssignStaff(function (rs) {
            rs = rs.data;
            $scope.listUnitAssignStaff = rs;
        })

        // Add constraint
        dataserviceCardJob.getAllConstraint(cardCodeAssign.ChkListCode, function (rs) {
            rs = rs.data;
            $scope.listConstraint = rs;
        })
        dataserviceCardJob.getItemConstraint(cardCodeAssign.ChkListCode, cardCodeAssign.CardCode, function (rs) {
            rs = rs.data;
            $scope.listItemCheck = rs;
        })
    }

    $scope.initData();

    $scope.submit = function () {
        validationSelect($scope.model)
        $scope.addStaff.validate()
        var partternNumber = /^[1-9]\d*(\.\d+)?$/;
        if (!partternNumber.test($scope.model.EstimateTime)) {
            return App.toastrError("Vui lòng nhập số nguyên và lớn hơn 0");
        }
        else if ($scope.model.EstimateTime > 10000) {
            return App.toastrError("Vui lòng nhập số nhỏ hơn 10000");
        }

        $scope.id--;
        if (!validationSelect($scope.model).Status && $scope.addStaff.validate()) {
            dataserviceCardJob.insertJobCardUser($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    dataserviceCardJob.getJobCardUser($scope.model, function (rs) {
                        rs = rs.data;
                        $scope.listUserInItem = rs;
                    })
                }
            })
        }
    }

    $scope.delete = function (id) {
        //for (var i = 0; i < $scope.listUserInItem.length; i++) {
        //    if ($scope.listUserInItem[i].ID == id) {
        //        $scope.listUserInItem.splice(i, 1);
        //        if (id > 0) {
        //            $scope.listDelUserInItem.push(id);
        //        }
        //        break;
        //    }
        //}
        //for (var i = 0; i < $rootScope.ItemCheck.length; i++) {
        //    if ($rootScope.ItemCheck[i].ChkListCode == $scope.model.CheckListCode) {
        //        $rootScope.ItemCheck[i].ListUserItemChk = $scope.listUserInItem;
        //        $rootScope.ItemCheck[i].ListDelUserItemChk = $scope.listDelUserInItem;
        //        break;
        //    }
        //}
        dataserviceCardJob.deleteJobCardUser(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getJobCardUser($scope.model, function (rs) {
                    rs = rs.data;
                    $scope.listUserInItem = rs;
                })
            }
        })
    }

    //Constraint
    $scope.modelConstraint = {
        ChkListCode: ''
    }

    $scope.addConstraint = function () {
        if ($scope.modelConstraint.ChkListCode == '' || $scope.modelConstraint.ChkListCode == null || $scope.modelConstraint.ChkListCode == undefined) {
            return App.toastrError("Vui lòng chọn đầu mục việc");
        }
        dataserviceCardJob.addConstraint(cardCodeAssign.ChkListCode, $scope.modelConstraint.ChkListCode, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getAllConstraint(cardCodeAssign.ChkListCode, function (rs) {
                    rs = rs.data;
                    $scope.listConstraint = rs;
                })
            }
        })
    }

    $scope.deleteConstraint = function (constraint) {
        App.blockUI({
            target: "#constraint-body",
            boxed: true,
            message: 'loading...',
        });
        dataserviceCardJob.deleteConstraint(cardCodeAssign.ChkListCode, constraint, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getAllConstraint(cardCodeAssign.ChkListCode, function (rs) {
                    rs = rs.data;
                    $scope.listConstraint = rs;
                })
            }
            App.unblockUI("#constraint-body");
        })
    }

    $scope.changeSelect = function (selecType) {
        if (selecType == "UserId" && $scope.model.UserId != "") {
            $scope.errorUserId = false;
        }
        if (selecType == "Unit" && $scope.model.Unit != "") {
            $scope.errorUnit = false;
        }
    }

    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.UserId == "") {
            $scope.errorUserId = true;
            mess.Status = true;
        } else {
            $scope.errorUserId = false;
        }
        if (data.Unit == "") {
            $scope.errorUnit = true;
            mess.Status = true;
        } else {
            $scope.errorUnit = false;
        }


        return mess;
    };

    function loadDate() {
        $("#startDate").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#endDate').datetimepicker('setStartDate', maxDate);
        });
        $("#endDate").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#startDate').datetimepicker('setEndDate', maxDate);
        });
        $("#deadline").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        });
    }

    setTimeout(function () {
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('assign-user-sub-item-check', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, item) {
    $scope.model = {
        CardCode: item.CardCode,
        UserId: '',
        CheckListCode: item.CheckListCode,
        CheckItem: item.CheckitemId,
        Unit: '',
        EstimateTime: ''
    }
    $scope.id = -1;
    $scope.listDelUserSubItem = []
    //var itemCheck = $rootScope.ItemCheck.find(function (element) {
    //    if (element.ChkListCode == $scope.model.CheckListCode) return true;
    //});
    $scope.listUserSubItem = []
    $scope.cancel = function () {
        $uibModalInstance.close(true);
    }
    $scope.initData = function () {
        dataserviceCardJob.getUnitAssignStaff(function (rs) {
            rs = rs.data;
            $scope.listUnitAssignStaff = rs;
        })
        dataserviceCardJob.getJobCardUser($scope.model, function (rs) {
            rs = rs.data;
            $scope.listUserItem = rs;
        });
        dataserviceCardJob.getJobCardSubItemUser($scope.model, function (rs) {
            rs = rs.data;
            $scope.listUserSubItem = rs;
        })

        //$scope.listUserItem = itemCheck.ListUserItemChk;

        //for (var i = 0; i < itemCheck.ListSubItem.length; i++) {
        //    if (itemCheck.ListSubItem[i].Id == $scope.model.CheckItem) {
        //        $scope.listUserSubItem = itemCheck.ListSubItem[i].ListUserSubItem
        //        break;
        //    }
        //}
        //if ($scope.listUserSubItem.length > 0) {
        //    if ($scope.listUserSubItem[$scope.listUserSubItem.length - 1].Id < 0) {
        //        $scope.id = $scope.listUserSubItem[$scope.listUserSubItem.length - 1].Id;
        //    }
        //}
    }
    $scope.initData();
    $scope.submit = function () {
        var partternNumber = /^[1-9]\d*(\.\d+)?$/;
        if (!partternNumber.test($scope.model.EstimateTime)) {
            return App.toastrError("Vui lòng nhập số nguyên và lớn hơn 0");
        }
        else if ($scope.model.EstimateTime > 10000) {
            return App.toastrError("Vui lòng nhập số nhỏ hơn 10000");
        }
        $scope.id--;
        validationSelect($scope.model)
        if (!validationSelect($scope.model).Status && $scope.addStaff.validate()) {
            //var user = $scope.listUserItem.find(function (element) {
            //    if (element.UserId == $scope.model.UserId) return true;
            //});
            //var unit = $scope.listUnitAssignStaff.find(function (element) {
            //    if (element.Code == $scope.model.Unit) return true;
            //});

            //if ($scope.listUserSubItem.length > 0) {
            //    var isExist = false;
            //    for (var i = 0; i < $scope.listUserSubItem.length; i++) {
            //        if ($scope.listUserSubItem[i].UserId == $scope.model.UserId) {
            //            App.toastrError(caption.CJ_MSG_MEMBER_ADDED_ITEM);
            //            isExist = true;
            //            break;
            //        }
            //    }
            //    if (!isExist) {
            //        var data = {
            //            ID: $scope.id, UserId: $scope.model.UserId, GivenName: user.GivenName, EstimateTime: $scope.model.EstimateTime,
            //            Status: unit.Name, Unit: $scope.model.Unit
            //        };
            //        $scope.listUserSubItem.push(data);
            //    }
            //} else {
            //    var data = {
            //        ID: $scope.id, UserId: $scope.model.UserId, GivenName: user.GivenName, EstimateTime: $scope.model.EstimateTime,
            //        Status: unit.Name, Unit: $scope.model.Unit
            //    };
            //    $scope.listUserSubItem.push(data);
            //}
            //for (var i = 0; i < itemCheck.ListSubItem.length; i++) {
            //    if (itemCheck.ListSubItem[i].Id == $scope.model.CheckItem) {
            //        itemCheck.ListSubItem[i].ListUserSubItem = $scope.listUserSubItem;
            //        break;
            //    }
            //}

            dataserviceCardJob.insertUserToSubItem($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    dataserviceCardJob.getJobCardSubItemUser($scope.model, function (rs) {
                        rs = rs.data;
                        $scope.listUserSubItem = rs;
                    })
                }
            })
        }
    }
    $scope.delete = function (id) {
        //for (var i = 0; i < $scope.listUserSubItem.length; i++) {
        //    if ($scope.listUserSubItem[i].ID == id) {
        //        $scope.listUserSubItem.splice(i, 1);
        //        if (id > 0) {
        //            $scope.listDelUserSubItem.push(id);
        //        }
        //        break;
        //    }
        //}
        //
        //for (var i = 0; i < $rootScope.ItemCheck.length; i++) {
        //    if ($rootScope.ItemCheck[i].ChkListCode == $scope.model.CheckListCode) {
        //        for (var k = 0; k < $rootScope.ItemCheck[i].ListSubItem.length; k++) {
        //            if ($rootScope.ItemCheck[i].ListSubItem[k].Id == $scope.model.CheckItem) {
        //                $rootScope.ItemCheck[i].ListSubItem[k].ListUserSubItem = $scope.listUserSubItem;
        //                $rootScope.ItemCheck[i].ListSubItem[k].ListDelUserSubItem = $scope.listDelUserSubItem;
        //                break;
        //            }
        //        }
        //    }
        //}
        dataserviceCardJob.deleteJobCardUser(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getJobCardSubItemUser($scope.model, function (rs) {
                    rs = rs.data;
                    $scope.listUserSubItem = rs;
                })
            }
        })
    }
    $scope.changeSelect = function (selecType) {
        if (selecType == "UserId" && $scope.model.UserId != "") {
            $scope.errorUserId = false;
        }
        if (selecType == "Unit" && $scope.model.Unit != "") {
            $scope.errorUnit = false;
        }
    }
    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.UserId == "") {
            $scope.errorUserId = true;
            mess.Status = true;
        } else {
            $scope.errorUserId = false;
        }
        if (data.Unit == "") {
            $scope.errorUnit = true;
            mess.Status = true;
        } else {
            $scope.errorUnit = false;
        }
        return mess;
    };
    setTimeout(function () {
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('addNewCard', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, $filter, para) {
    //Thêm
    var objOld = {
        inherit: '',
        status: '',
        weightNum: '',
        beginTime: '',
        deadline: '',
        endTime: '',
        workType: '',
        cardLevel: '',
        description: ''
    };
    //End
    $rootScope.CardCode = "";
    $scope.address = {
        lat: '',
        lng: '',
        text: ''
    };
    $scope.product = {
        ProductCode: '',
        Quantity: '',
        Activity: ''
    };
    $scope.service = {
        ServiceCode: '',
        Quantity: '',
        Activity: ''
    };
    $scope.obj = {
        CardCode: "",
        Board: "",
        List: ""
    };

    $scope.checkitem = {
        Title: ''
    };
    $scope.comment = {
        Content: ''
    };
    $scope.checkList = [];
    $scope.statusItem = [];
    $scope.show = {
        SelectCard: false
    };
    $scope.listObjRelative = [];
    $scope.listID = [];
    $scope.listItemWork = []

    $scope.jobCardUser = {
        CheckListCode: '',
        CardCode: ''
    }
    $scope.obj = {
        List: ''
    };
    $scope.Lists = []
    $scope.modelShift = {
        ShiftCode: "",
    };
    $scope.isSameDate = true;

    $scope.ProductBuffer = {
        ListProduct: [],
        ListDelProduct: []
    }
    $scope.ServiceBuffer = {
        ListService: [],
        ListDelService: []
    }
    $scope.AddressBuffer = {
        ListAddress: [],
        ListDelAddress: []
    }
    $scope.ListDelSubItem = [];
    $scope.checklists = [];
    $scope.CompletedOld = 0;
    $scope.RoleUser = "";

    $scope.descriptionOld = "";

    //AcceptCard to working
    $scope.isAceptCard = false;

    //Disabled control when user assign to card
    $scope.isAssign = false;

    //Check change in card
    var isChange = false;

    //Activity
    $scope.disableBoardList = false;

    //Check leader and status closed
    $scope.isNotLeader = true;
    $scope.isClose = false;
    $scope.isDisableStatus = false;
    $scope.isDisableControl = false;

    //Check action activity reject, accept
    $scope.TimeSpanActivity = {
        TimeStart: "",
    }
    //Init for wf
    $scope.ActInstCode = "";
    $scope.modelWF = {
        WorkflowCode: "",
        WfInstCode: "",
        ActInstCode: ""
    }
    //End init for wf

    $scope.cardCode = '';
    $scope.CardID = '';
    $scope.createCard = function () {
        var data = { objectCode: para.ObjectCode, boardCode: para.BoardCode }
        dataserviceCardJob.getSuggesstion(data, function (rs) {
            rs = rs.data;
            $scope.cardName = rs.Card.CardName;
            $scope.CardID = rs.Card.CardID;
            $scope.cardCode = rs.Card.CardCode;
            $rootScope.CardCode = rs.Card.CardCode;
            $scope.obj.Board = rs.BoardCode;
            $scope.obj.CardCode = $scope.cardCode;
            $scope.jobCardUser.CardCode = $scope.cardCode;
            setTimeout(function () {
                $scope.editingCardetailHeaderAuto();
            }, 1000);
            dataserviceCardJob.getLists(rs.BoardCode, function (rs1) {
                rs1 = rs1.data;
                $scope.Lists = rs1;
                $scope.obj.List = rs.ListCode;
            });
            if ($scope.cardCode != '') {
                dataserviceCardJob.updateActivity($scope.cardCode, 2, true, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {

                    }
                    else {

                    }
                });
                $scope.initData();
            }
        });
    }
    $scope.createCard();
    $scope.initData = function () {
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoards = rs;
        });
        dataserviceCardJob.getLevels(function (rs) {
            rs = rs.data;
            $scope.CardLevels = rs;
        });
        dataserviceCardJob.getWorkType(function (rs) {
            rs = rs.data;
            $scope.WorkTypes = rs;
        });
        dataserviceCardJob.getStatus(function (rs) {
            rs = rs.data;
            $scope.CardStatus = rs;
        });
        dataserviceCardJob.getCurrency(function (rs) {
            rs = rs.data;
            $scope.listCurrency = rs;
        })
        dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;

                $scope.descriptionOld = angular.copy($scope.model.Description);

                if ($scope.model.Status == "CLOSED") {
                    $scope.isClose = true;
                } else {
                    $scope.isClose = false;
                }
                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {

                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.TimeSpanActivity.TimeStart = rs.Object.TimeStart;
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($scope.cardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                //InitMap
                initMap();
                initDataMap();
                mapReSize();
                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.attachments = rs;
        });
        dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.checklists = rs;

            $rootScope.ItemCheck = rs;
            angular.forEach(rs, function (value, key) {
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $scope.checkList[value.ChkListCode] = result;
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                    rs = rs.data;
                    $scope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.comments = rs;
        });
        dataserviceCardJob.getProduct(function (rs) {
            rs = rs.data;
            $scope.listProduct = rs;
        });
        dataserviceCardJob.getService(function (rs) {
            rs = rs.data;
            $scope.listService = rs;
        })
        dataserviceCardJob.getUnit(function (rs) { rs = rs.data; $scope.listUnit = rs });
        dataserviceCardJob.getCardActivityByUser($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $scope.isAceptCard = true;
                    $scope.disableBoardList = false;
                } else {
                    $scope.isAceptCard = false;
                    $scope.disableBoardList = true;
                }
            }
        });
        dataserviceCardJob.getCardProduct($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.listCardProduct = rs;
        });
        dataserviceCardJob.getCardService($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.listCardService = rs;
        });
        dataserviceCardJob.GetLisAddressJobCard($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.listAddress = rs;
        });
        $scope.acticeDetailDrag = false;
        dataserviceCardJob.getObjectRelative($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.listID = [];
            $scope.listObjRelative = rs;
            $rootScope.Rela.ListRelative = $scope.listObjRelative;
        });
        dataserviceCardJob.getActivityService(function (rs) {
            rs = rs.data;
            $scope.listActivityService = rs;
        });
        dataserviceCardJob.getActivityProduct(function (rs) {
            rs = rs.data;
            $scope.listActivityProduct = rs;
        });
        dataserviceCardJob.getListWorkItem($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.listItemWork = rs.Object;
            $rootScope.ItemWork = rs.Object;
        });
        dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.getCardRelative($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.CardInherit = rs.Inherit;
            $scope.Links = rs.Links;
            $rootScope.CardLink.ListCardLink = rs.Links;
        })
        dataserviceCardJob.insertListUserView($scope.cardCode, function (rs) { })
        dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
            rs = rs.data;
            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                $scope.modelShift.In = inTime;
                $scope.modelShift.Out = outTime;
                if (inDate != outDate && outDate != null) {
                    $scope.modelShift.DateIn = inDate;
                    $scope.modelShift.DateOut = outDate;
                    $scope.isSameDate = false;
                } else {
                    $scope.modelShift.DateInOut = inDate;
                    $scope.isSameDate = true;
                }
            }
        })
        dataserviceCardJob.roleInCardOfUser($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.RoleUser = rs.Responsibility;
        })
        dataserviceCardJob.getGroupDepartmentAssign($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.lstGrpAssign = rs.Group
            $scope.lstDpmAssign = rs.Dpm
        });
        dataserviceCardJob.hideCost(function (rs) {
            rs = rs.data;
            $scope.isNotVatco = rs;
        })

        //Workflow
        dataserviceCardJob.getWorkFlow(function (rs) {
            rs = rs.data;
            $scope.listWorkFlow = rs;
        })

        dataserviceCardJob.getUnitAttr(function (rs) {
            rs = rs.data;
            $scope.lstAttrUnit = rs;
        })

        dataserviceCardJob.getAttrDataType(function (rs) {
            rs = rs.data;
            $scope.lstAttrDataType = rs;
        })

        dataserviceCardJob.getAttrGroup(function (rs) {
            rs = rs.data;
            $scope.lstAttrGroup = rs;
        })

        $('.gmnoprint').addClass('hidden');
    };
    $scope.getSafehtml = function (description) {

        var tmp = document.createElement("DIV");
        tmp.innerHTML = description;
        return tmp.textContent || tmp.innerText || "";
    }

    $scope.getChkListCode = function (ChkListCode) {
        $rootScope.CheckListCode = ChkListCode;
        $scope.jobCardUser.CheckListCode = ChkListCode;
        $scope.jobCardUser.CardCode = $scope.cardCode;
        dataserviceCardJob.getJobCardUser($scope.jobCardUser, function (rs) {
            rs = rs.data;
            $scope.listUserInItem = rs;
        })
    }
    $scope.boardSelect = function (boardCode) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    $scope.obj.List = "";
                    $scope.model.ListCode = "";
                    isChange = true;
                    dataserviceCardJob.getLists(boardCode, function (rs) {
                        rs = rs.data;
                        $scope.Lists = rs;
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    };
    $scope.listSelect = function (listCode) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    $scope.model.ListCode = listCode;
                    isChange = true;
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    };

    //Editor
    var editor;
    function ckEditer() {
        editor = CKEDITOR.replace('description', {
            cloudServices_tokenUrl: '/MobileApp/Token',
            cloudServices_uploadUrl: '/MobileApp/UploadFile',
            filebrowserBrowseUrl: '',
            filebrowserUploadUrl: '/MobileApp/Upload',
            embed_provider: '/uploader/upload.php'
        });
        setTimeout(function () {
            $scope.disableCkEditer(editor);
        }, 1000);
    }
    $scope.disableCkEditer = function (editor) {
        if (!$scope.isAceptCard) {
            editor.setReadOnly(true);
        } else {
            editor.setReadOnly(false);
        }
    }

    //Add list/board
    $scope.addBoard = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-board.html',
            controller: 'add-boardCardJob',
            size: '30',
            backdrop: 'static'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListBoard(function (rs) {
                rs = rs.data;
                $scope.listBoards = rs;
            });
        }, function () { });
    };
    $scope.addList = function (board) {
        if (board == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_TABLE_WORKING);
        } else {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/add-list.html',
                controller: 'add-listCardJob',
                backdrop: 'static',
                size: '25',
                resolve: {
                    para: function () {
                        return board;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
            }, function () { });
        }
    }


    //Object relative
    $scope.deleteObjTypeReletive = function (id) {
        if ($scope.isAceptCard) {
            //for (var i = 0; i < $scope.listObjRelative.length; i++) {

            //    if ($scope.listObjRelative[i].ID == id) {
            //        $scope.listObjRelative.splice(i, 1);
            //        if (id > 0) {
            //            listDeletedDependency.push(id);
            //        }
            //        break;
            //    }
            //}
            dataserviceCardJob.deleteJcObjectIdRelative(id, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                }
            })
        }
        else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }

    };
    $scope.initCardRelative = function (cardCode) {
        dataserviceCardJob.getObjectRelative($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.listID = [];
            $scope.listObjRelative = rs;
            for (var i = 0; i < $scope.listObjRelative.length; i++) {
                $scope.listID.push($scope.listObjRelative[i].ID);
            }
        });
    }
    $scope.deleteObjReletive = function (id) {
        if (!$scope.isAssign) {
            if ($scope.isAceptCard) {
                for (var i = 0; i < $scope.listObjRelative.length; i++) {
                    if ($scope.listObjRelative[i].ID == id) {
                        $scope.listObjRelative.splice(i, 1);
                        if (id > 0) {
                            $rootScope.Rela.ListDelRelative.push(id);
                            isChange = true;
                        }
                        break;
                    }
                }
                $rootScope.Rela.ListRelative = $scope.listObjRelative;
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
        }
    };
    $scope.addObjectRelative = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/add-object-relative.html',
                        controller: 'add-object-relativeCardJob',
                        size: '70',
                        resolve: {
                            cardCode: function () {
                                return $scope.cardCode;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        $scope.listObjRelative = $rootScope.Rela.ListRelative;
                        isChange = true;
                    }, function () {
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    };

    //Workflow
    $scope.IsCreateWF = false;

    $scope.changeWorkFlow = function () {
        isChange = true;
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmQuestion.html',
            windowClass: "message-center",
            resolve: {
                params: function () {
                    return {
                        CardCode: $scope.cardCode,
                        WfCode: $scope.modelWF.WorkflowCode
                    };
                }
            },
            controller: function ($scope, $uibModalInstance, params) {
                $scope.message = caption.CJ_MSG_QUESTION_CREATE_WF;
                $scope.ok = function () {
                    dataserviceCardJob.createInstanceWF(params.WfCode, params.CardCode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);

                            $rootScope.wfInstance = rs.Object.WfInstCode;
                            $uibModalInstance.close();
                            dataserviceCardJob.insertInstRunning(rs.Object.WfInstCode, rs.Object.WorkflowCode, function (rs) { })
                        }
                    })
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {

            $scope.modelWF.WfInstCode = $rootScope.wfInstance;
            dataserviceCardJob.getActInstCard($rootScope.wfInstance, $scope.cardCode, function (rs) {
                rs = rs.data;
                $scope.lstActInstance = rs;
            })
            dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                rs = rs.data;
                $scope.attachments = rs;
            });
            dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                rs = rs.data;
                $scope.checklists = rs;
                $rootScope.ItemCheck = rs;
                angular.forEach(rs, function (value, key) {
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $scope.checkList[value.ChkListCode] = result;
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            $scope.IsCreateWF = false;
            dataserviceCardJob.getAllWfInstance(function (rs) {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }, function () {
        });
    }

    $scope.checkCreateWF = function () {

        if ($scope.IsCreateWF) {
            dataserviceCardJob.checkWfInstCard($scope.cardCode, function (rs) {
                rs = rs.data;
                if (rs) {
                    $scope.IsCreateWF = false;
                    return App.toastrError(caption.CJ_MSG_CARD_HAS_WF);
                }
                dataserviceCardJob.getWorkFlow(function (rs) {
                    rs = rs.data;
                    $scope.listWorkFlow = rs;
                })
            })
        }
        else {
            dataserviceCardJob.getWfInst($scope.cardCode, function () {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }
    }

    $scope.changeActInst = function () {
        var data = {
            ActInstCode: $scope.modelWF.ActInstCode,
            WfInstCode: $scope.modelWF.WfInstCode,
            ObjectInst: $scope.cardCode,
            ObjectType: "CARD_JOB",
        };
        dataserviceCardJob.insertObjectProcess(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, $scope.cardCode, function (rs) {
                    rs = rs.data;
                    $scope.lstActInstance = rs;
                })
            }
        })
    }

    //End workflow

    //Address
    var idAddress = -1;
    $scope.saveAddress = function () {
        if (!$scope.isAssign) {
            if ($scope.isAceptCard) {
                idAddress--;
                var date = new Date();
                var data = { Id: idAddress, LocationGps: "" + $scope.address.lat + "," + $scope.address.lng, LocationText: $scope.address.text, CreatedBy: userName, CreatedTime: date };
                $scope.listAddress.push(data);
                $scope.AddressBuffer.ListAddress = $scope.listAddress;
                isChange = true;
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
        }


    }
    $scope.deletedAddress = function (id) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    for (var i = 0; i < $scope.listAddress.length; i++) {
                        if ($scope.listAddress[i].Id == id) {
                            $scope.listAddress.splice(i, 1);
                            if (id > 0) {
                                $scope.AddressBuffer.ListDelAddress.push(id);
                                isChange = true;
                            }
                            break;
                        }
                    }
                    $scope.AddressBuffer.ListAddress = $scope.listAddress;
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }

    //Tab product
    var idProd = -1;
    $scope.addProduct = function (productCode, quantity, activity) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var dateCreateProd = new Date();
                    idProd--;
                    if (productCode == '' && quantity == '') {
                        App.toastrError(caption.CJ_MSG_SELECT_PRODUCT_QUANTITY);
                    } else {
                        if (productCode == '') {
                            App.toastrError(caption.CJ_MSG_SELECT_PRODUCT);
                        } else if (quantity == '' || quantity == null) {
                            App.toastrError(caption.CJ_MSG_SELECT_QUANTITY);
                        } else {
                            if (quantity >= 0) {
                                var prodFilter = $scope.listProduct.find(function (element) {
                                    if (element.Code == productCode) return true;
                                });
                                if ($scope.listCardProduct.length > 0) {
                                    var isExistprod = false;
                                    for (var i = 0; i < $scope.listCardProduct.length; i++) {
                                        if ($scope.listCardProduct[i].ProductCode == productCode) {
                                            var currentQuantity = $scope.listCardProduct[i].Quantity + quantity;
                                            if (currentQuantity <= 65000) {
                                                $scope.listCardProduct[i].Quantity += quantity
                                            }
                                            else {
                                                App.toastrError("Vui lòng nhập số lượng sản phẩm nhỏ hơn hoặc bằng " + (65000 - $scope.listCardProduct[i].Quantity));
                                            }
                                            isExistProd = true;
                                            break
                                        }
                                    }
                                    if (!isExistprod) {
                                        var data = { ID: idProd, CreatedTime: dateCreateProd, CreatedBy: userName, ProductName: prodFilter.Name, ProductCode: productCode, Quantity: quantity, JcAct: activity };
                                        $scope.listCardProduct.push(data);
                                    }
                                } else {
                                    if (quantity > 65000) {
                                        App.toastrError("Vui lòng nhập số lượng sản phẩm nhỏ hơn 65000");
                                    }
                                    else {
                                        var data = { ID: idProd, CreatedTime: dateCreateProd, CreatedBy: userName, ProductName: prodFilter.Name, ProductCode: productCode, Quantity: quantity, JcAct: activity };
                                        $scope.listCardProduct.push(data);
                                    }
                                }
                                isChange = true;
                                $scope.ProductBuffer.ListProduct = $scope.listCardProduct;
                            } else {
                                App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_QUANTITY))
                            }
                        }
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.deletedProduct = function (id) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    for (var i = 0; i < $scope.listCardProduct.length; i++) {
                        if ($scope.listCardProduct[i].ID == id) {
                            $scope.listCardProduct.splice(i, 1);
                            if (id > 0) {
                                $scope.ProductBuffer.ListDelProduct.push(id);
                                isChange = true;
                            }
                            break;
                        }
                    }
                    $scope.ProductBuffer.ListProduct = $scope.listCardProduct;
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }

    //Tab service
    var idSer = -1;
    $scope.addService = function (serviceCode, quantity, activity) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    idSer--;
                    var dateCreateSer = new Date();
                    if (serviceCode == '' && quantity == '') {
                        App.toastrError(caption.CJ_MSG_SELECT_SERVICE_QUANTITY);
                    } else {
                        if (serviceCode == '') {
                            App.toastrError(caption.CJ_MSG_SELECT_SERVICE);
                        } else if (quantity == '' || quantity == null) {
                            App.toastrError(caption.CJ_MSG_SELECT_QUANTITY);
                        } else {
                            if (quantity >= 0) {
                                var serFilter = $scope.listService.find(function (element) {
                                    if (element.Code == serviceCode) return true;
                                });
                                if ($scope.listCardService.length > 0) {
                                    var isExistSer = false;
                                    for (var i = 0; i < $scope.listCardService.length; i++) {
                                        if ($scope.listCardService[i].ServiceCode == serviceCode) {
                                            var currentQuantity = $scope.listCardService[i].Quantity + quantity;
                                            if (currentQuantity <= 65000) {
                                                $scope.listCardService[i].Quantity += quantity
                                            }
                                            else {
                                                App.toastrError("Vui lòng nhập số lượng dịch vụ nhỏ hơn hoặc bằng " + (65000 - $scope.listCardService[i].Quantity));
                                            }
                                            isExistSer = true;
                                            break
                                        }
                                    }
                                    if (!isExistSer) {
                                        var data = { ID: idSer, CreatedTime: dateCreateSer, CreatedBy: userName, ServiceName: serFilter.Name, ServiceCode: serviceCode, Quantity: quantity, JcAct: activity };
                                        $scope.listCardService.push(data);
                                    }
                                } else {
                                    if (quantity > 65000) {
                                        App.toastrError("Vui lòng nhập số lượng nhỏ hơn 65000");
                                    }
                                    else {
                                        var data = { ID: idSer, CreatedTime: dateCreateSer, CreatedBy: userName, ServiceName: serFilter.Name, ServiceCode: serviceCode, Quantity: quantity, JcAct: activity };
                                        $scope.listCardService.push(data);
                                    }
                                }
                                isChange = true;
                                $scope.ServiceBuffer.ListService = $scope.listCardService;
                            } else {
                                App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_QUANTITY))
                            }
                        }
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.deletedService = function (id) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    for (var i = 0; i < $scope.listCardService.length; i++) {
                        if ($scope.listCardService[i].ID == id) {
                            $scope.listCardService.splice(i, 1);
                            if (id > 0) {
                                $scope.ServiceBuffer.ListDelService.push(id);
                                isChange = true;
                            }
                            break;
                        }
                    }
                    $scope.ServiceBuffer.ListService = $scope.listCardService;
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }

    $scope.updateCardName = function (id) {

        if ($scope.isAceptCard) {
            var element = $('#card_000000');
            var newName = element.val();
            var currentName = element.attr('data-currentvalue');
            if (newName != currentName) {
                $scope.model.CardName = newName;
                isChange = true;
            }
            $scope.acticeDetailDrag = false;
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }
    $scope.editingCardetailHeaderAuto = function () {
        if ($(".modal-dialog").hasClass("ui-draggable-dragging") == false) {
            $scope.acticeDetailDrag = true;
            var title = document.getElementById("card_000000");
            if (title != null && title != undefined) {
                title.focus()
            }
        } else {
            $scope.acticeDetailDrag = false;
        }
    }

    $scope.editingCardetailHeader = function (id) {

        if ($(".modal-dialog").hasClass("ui-draggable-dragging") == false) {
            $scope.acticeDetailDrag = true;
            document.getElementById("card_" + id).focus();
        } else {
            $scope.acticeDetailDrag = false;
        }
    }
    $scope.addMember = function () {
        if (!$scope.isDisableControl) {
            if ($scope.isAceptCard) {
                $rootScope.titleModalAssign = 3;

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
                    controller: 'add-group-or-teamCardJob',
                    size: '55',
                    resolve: {
                        obj: function () {
                            return {
                                CardCode: $scope.cardCode,
                                Type: 4
                            };
                        }
                    },
                    backdrop: 'static',
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                        rs = rs.data;
                        $scope.checklists = rs;

                        $rootScope.ItemCheck = rs;
                        angular.forEach(rs, function (value, key) {
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $scope.checkList[value.ChkListCode] = result;
                            })
                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                rs = rs.data;
                                $scope.statusItem[value.ChkListCode] = rs;
                            })
                        })
                    });
                    dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                    dataserviceCardJob.getGroupDepartmentAssign($scope.cardCode, function (rs) {
                        rs = rs.data;
                        $scope.lstGrpAssign = rs.Group
                        $scope.lstDpmAssign = rs.Dpm
                    });
                }, function () {
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    };
    $scope.changeDeadline = function (deadline) {
        //bôi đậm khi chỉnh sửa
        if ($scope.isAceptCard) {
            if (deadline != objOld.deadline) {
                document.getElementById("deadline").style.fontWeight = "bold";
            } else {
                document.getElementById("deadline").style.fontWeight = "normal";
            }
            //$scope.CardJobTemp.Deadline = deadline
            isChange = true;
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }
    $scope.changeWeightNum = function (weightNum) {
        //bôi đậm khi chỉnh sửa
        if ($scope.isAceptCard) {
            if (weightNum != objOld.weightNum) {
                document.getElementById("weightNum").style.fontWeight = "bold";
            } else {
                document.getElementById("weightNum").style.fontWeight = "normal";
            }
            isChange = true;
            if (weightNum >= 0) {
            } else {
                App.toastrError(caption.COM_FOMART_FAILED.replace("{0}", caption.CJ_CURD_LBL_WEIGHT_NUM))
                $scope.model.WeightNum = 0;
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }
    $scope.changeWorkType = function (type) {
        //bôi đậm khi chỉnh sửa
        if ($scope.isAceptCard) {
            if (type != objOld.workType) {
                document.getElementById("workType").style.fontWeight = "bold";
                isChange = true;
            } else {
                document.getElementById("workType").style.fontWeight = "normal";
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }

    };
    $scope.changeCardStatus = function (status) {
        //bôi đậm khi chỉnh sửa
        if ($scope.isAceptCard) {
            isChange = true;
            if (status != objOld.status) {
                document.getElementById("status").style.fontWeight = "bold";
                isChange = true;
            } else {
                document.getElementById("status").style.fontWeight = "normal";
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    };
    $scope.changeCardLevel = function (level) {
        //bôi đậm khi chỉnh sửa
        if ($scope.isAceptCard) {
            if (level != objOld.cardLevel) {
                document.getElementById("cardLevel").style.fontWeight = "bold";
                isChange = true;
            } else {
                document.getElementById("cardLevel").style.fontWeight = "normal";
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    };
    $scope.updateActivity = function (value, isCheck) {
        if (isCheck) {
            var activity = $scope.activity.find(function (element) {
                if (element.Value != value && element.Value != 0) return true;
            });
            if (activity) {
                activity.IsCheck = false;
            }
            if (value == 2 && isCheck) {
                $scope.isAceptCard = true;
                $scope.disableBoardList = false;
            }
            else {
                $scope.isAceptCard = false;
                $scope.disableBoardList = true;
            }
            $scope.disableCkEditer(editor);
        }
        dataserviceCardJob.updateActivity($scope.cardCode, value, isCheck, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                var activity = $scope.activity.find(function (element) {
                    if (element.Value == value) return true;
                });
                if (activity) {
                    activity.Date = rs.Object.Date;
                    activity.Time = rs.Object.Time;
                }
                App.toastrSuccess(rs.Title);
                isChange = true;
                dataserviceCardJob.getCardActivityByUser($scope.cardCode, function (rs) {
                    rs = rs.data;
                    $scope.activity = rs;
                    if ($scope.activity.length > 0) {
                        if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                            $scope.isAceptCard = true;
                            $scope.disableBoardList = false;
                        } else {
                            $scope.isAceptCard = false;
                            $scope.disableBoardList = true;
                        }
                    }
                });
                dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.ActivityData = rs;
                    if ($rootScope.ActivityData.length > 0) {
                        for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                            if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                            }
                        }
                    }
                });
            }
        });
    }
    $scope.editDescription = function () {
        if ($scope.isAceptCard) {
            if ($scope.model.Description === "" || $scope.model.Description == null || $scope.model.Description == undefined) {
                return;
            }
            var obj = {
                CardCode: $scope.cardCode,
                Description: $scope.model.Description
            }
            //bôi đậm khi chỉnh sửa
            if ($scope.model.Description != objOld.description) {
                document.getElementById("description").style.fontWeight = "bold";
                isChange = true;
            } else {
                document.getElementById("description").style.fontWeight = "normal";
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }

    };
    $scope.cardChangeBeginTime = function (beginTime) {
        //bôi đậm khi chỉnh sửa
        if ($scope.isAceptCard) {
            if (beginTime != objOld.beginTime) {
                document.getElementById("beginTime").style.fontWeight = "bold";
                isChange = true;
            } else {
                document.getElementById("beginTime").style.fontWeight = "normal";
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }

    }
    $scope.cardChangeEndTime = function (endTime) {
        //bôi đậm khi chỉnh sửa
        if ($scope.isAceptCard) {
            if (endTime != objOld.endTime) {
                document.getElementById("endTime").style.fontWeight = "bold";
                isChange = true;
            } else {
                document.getElementById("endTime").style.fontWeight = "normal";
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }

    }

    $scope.addAttachment = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    $("#fileAttachment").trigger("click");
                    isChange = true;
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.loadAttachment = function (event) {
        var file = event.target.files[0];
        if (file != undefined) {
            var data = new FormData();
            data.append("FileUpload", file);
            dataserviceCardJob.uploadAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var fileName = $('#fileAttachment').val();
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                    var file = fileName.split('\\');
                    $scope.fileAttachment = {
                        FileName: file[file.length - 1],
                        FileUrl: '/uploads/files/' + rs.Object,
                        CardCode: $scope.cardCode
                    }
                    $('#fileAttachment').replaceWith($('#fileAttachment').val('').clone(true));

                    dataserviceCardJob.addAttachment($scope.fileAttachment, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            var obj = { IdObject: "FILE", Action: "ADD", UserAction: $scope.currentUser, CreatedTime: new Date() }
                            if ($rootScope.settingNotification == "NO") {
                                $rootScope.listNotification.push(obj);
                            } else {
                                $rootScope.listNotification.push(obj);
                                var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                dataserviceCardJob.sendNotification(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    } else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                })
                            }
                            dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.attachments = rs;
                            });
                            dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.ActivityData = rs;
                                if ($rootScope.ActivityData.length > 0) {
                                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                        }
                                    }
                                }
                            });
                        }
                    })
                }
            });
        }
    }
    $scope.deleteAttachment = function (fileCode, type) {
        if (!$scope.isAssign) {
            if ($scope.isAceptCard) {
                var data = {
                    Type: type,
                    FileCode: fileCode,
                    CardCode: $scope.cardCode
                };
                dataserviceCardJob.deleteAttachment(data, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var obj = { IdObject: "FILE", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                        if ($rootScope.settingNotification == "NO") {
                            $rootScope.listNotification.push(obj);

                        } else {
                            $rootScope.listNotification.push(obj);
                            var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                            dataserviceCardJob.sendNotification(data, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                }
                            })
                        }
                        App.toastrSuccess(rs.Title);
                        isChange = true;
                        dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                            rs = rs.data;
                            $scope.attachments = rs;
                        });
                        dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
        }
    }
    $scope.viewFileOnl = function (source, id, memberId) {
        var isExist = false;
        dataserviceCardJob.getListUserFile(id, function (rs) {
            rs = rs.data;
            $scope.listUserFile = rs.Object;
            for (var i = 0; i < $scope.listUserFile.length; i++) {
                if ($scope.listUserFile[i].UserName == userName) {
                    isExist = true;
                    break;
                }
            }
            if (isExist || memberId === userName) {
                if (!isEdms) {
                    dataserviceCardJob.getFilePath(source, $scope.cardCode, function (rs) {
                        rs = rs.data;
                        if (!rs.Error) {
                            isChange = true;
                            var extension = source.substr(source.lastIndexOf('.') + 1);
                            var word = ['DOCX', 'DOC'];
                            var pdf = ['PDF'];
                            var excel = ['XLS', 'XLSX'];
                            if (word.indexOf(extension.toUpperCase()) !== -1) {
                                window.open('/Admin/Docman/Index', '_blank')
                            } else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
                                window.open('/Admin/PDF/Index', '_blank')
                            } else if (excel.indexOf(extension.toUpperCase()) !== -1) {
                                window.open('/Admin/Excel', '_blank')
                            } else {

                                window.open(source, '_blank')
                            }
                        } else {
                            if (rs.ID === -1) {
                                App.toastrError(rs.Title);
                                setTimeout(function () {
                                    var extension = source.substr(source.lastIndexOf('.') + 1);
                                    var word = ['DOCX', 'DOC'];
                                    var pdf = ['PDF'];
                                    var excel = ['XLS', 'XLSX'];
                                    if (word.indexOf(extension.toUpperCase()) !== -1) {
                                        window.open('/Admin/Docman/Index', '_blank')
                                    } else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
                                        window.open('/Admin/PDF/Index', '_blank')
                                    } else if (excel.indexOf(extension.toUpperCase()) !== -1) {
                                        window.open('/Admin/Excel', '_blank')
                                    } else {
                                        window.open(source, '_blank')
                                    }
                                }, 2000);
                            } else {
                                App.toastrError(caption.CJ_MSG_FILE_IS_EDITING);
                            }
                        }
                    });
                }
                else {
                    var extension = source.substr(source.lastIndexOf('.') + 1);
                    var word = ['DOCX', 'DOC'];
                    var pdf = ['PDF'];
                    var excel = ['XLS', 'XLSX'];
                    if (word.indexOf(extension.toUpperCase()) !== -1) {
                        dataserviceCardJob.getItemFile(true, 2, id, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                if (rs.ID === -1) {
                                    App.toastrError(rs.Title);
                                    setTimeout(function () {
                                        window.open('/Admin/Docman#', '_blank');
                                    }, 2000);
                                    dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.attachments = rs;
                                    });

                                } else {
                                    App.toastrError(rs.Title);
                                }
                                return null;
                            } else {
                                window.open('/Admin/Docman#', '_blank');
                                dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.attachments = rs;
                                });
                            }
                        });
                    }
                    else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
                        dataserviceCardJob.getItemFile(true, 2, id, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                if (rs.ID === -1) {
                                    App.toastrError(rs.Title);
                                    setTimeout(function () {
                                        window.open('/Admin/PDF#', '_blank');
                                    }, 2000);
                                    dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.attachments = rs;
                                    });

                                } else {
                                    App.toastrError(rs.Title);
                                }
                                return null;
                            } else {
                                window.open('/Admin/PDF#', '_blank');
                                dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.attachments = rs;
                                });
                            }
                        });
                    }
                    else if (excel.indexOf(extension.toUpperCase()) !== -1) {
                        dataserviceCardJob.getItemFile(true, 2, id, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                if (rs.ID === -1) {
                                    App.toastrError(rs.Title);
                                    setTimeout(function () {
                                        window.open('/Admin/Excel#', '_blank');
                                    }, 2000);
                                    dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.attachments = rs;
                                    });
                                } else {
                                    App.toastrError(rs.Title);
                                }
                                return null;
                            } else {
                                window.open('/Admin/Excel#', '_blank');
                                dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.attachments = rs;
                                });
                            }
                        });
                    }
                    else {
                        window.open(source, '_blank');
                        dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                            rs = rs.data;
                            $scope.attachments = rs;
                        });
                    }
                }
            }
            else {
                App.toastrError(caption.CJ_MSG_U_NOT_PERMISSION_UPDATE_FILE);
            }
        })
    }
    $scope.assignUserToFile = function (id, memberId) {

        if ($scope.isAceptCard) {
            if ($scope.RoleUser == "ROLE_LEADER" || userName == $scope.model.CreatedBy || userName == memberId) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/assign-user-to-file.html',
                    controller: 'assign-user-to-file',
                    size: '40',
                    backdrop: 'static',
                    resolve: {
                        cardCodeAssign: function () {
                            return {
                                CardCode: $scope.cardCode,
                                Id: id
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    isChange = true;
                });
            } else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }
    $scope.downloadAttach = function (url, fileCode, type) {
        if (type == 1) {
            window.target = "_blank";
            location.href = url;
        }
        else if (type == 2) {
            dataserviceCardJob.isFileEdms(fileCode, url, function (rs) {
                rs = rs.data;
                if (rs) {
                    location.href = "/Admin/CardJob/Download?"
                        + "fileCode=" + fileCode + "&url=" + url;
                }
                else {
                    window.target = "_blank";
                    location.href = url;
                }
            })
        }
        //dataserviceCardJob.getListUserFile(id, function (rs) {
        //    rs = rs.data;
        //    var isExist = false;
        //    $scope.listUserFile = rs.Object;
        //    for (var i = 0; i < $scope.listUserFile.length; i++) {
        //        if ($scope.listUserFile[i].UserName == userName) {
        //            isExist = true;
        //            break;
        //        }
        //    }

        //    if (isExist || memberId === userName) {
        //        if (!isEdms) {
        //            window.target = "_blank";
        //            location.href = url;
        //        }
        //        else {
        //            location.href = "/Admin/CardJob/Download?"
        //                + "Id=" + idMapping;
        //        }

        //    } else {
        //        App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
        //    }

        //})
    }


    $scope.viewFile = function (fileCode, url) {
        var data = {
            CardCode: $scope.cardCode,
            FileCode: fileCode,
            Url: url
        };

        var extension = url.substr(url.lastIndexOf('.') + 1);
        var word = ['DOCX', 'DOC'];
        var pdf = ['PDF'];
        var excel = ['XLS', 'XLSX'];
        if (word.indexOf(extension.toUpperCase()) !== -1) {
            dataserviceCardJob.viewFileOnline(data, function (rs) {
                window.open('/Admin/Docman#', '_blank');
                dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                    rs = rs.data;
                    $scope.attachments = rs;
                });
            });
        }
        else if (pdf.indexOf(extension.toUpperCase()) !== -1) {
            dataserviceCardJob.viewFileOnline(data, function (rs) {
                window.open('/Admin/PDF#', '_blank');
                dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                    rs = rs.data;
                    $scope.attachments = rs;
                });
            });
        }
        else if (excel.indexOf(extension.toUpperCase()) !== -1) {
            dataserviceCardJob.viewFileOnline(data, function (rs) {
                window.open('/Admin/Excel#', '_blank');
                dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                    rs = rs.data;
                    $scope.attachments = rs;
                });
            });
        }
        else {
            window.open(url, '_blank');
            dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                rs = rs.data;
                $scope.attachments = rs;
            });
        }
    }

    //File item check
    var chkCode = "";
    $scope.addAttachmentItem = function (itemCode) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {

                    dataserviceCardJob.checkFileItem(itemCode, function (rs) {
                        rs = rs.data;
                        if (rs) {
                            App.toastrError(caption.CJ_MSG_ITEM_CHECK_EXIST_FILE);
                        }
                        else {
                            chkCode = itemCode;
                            $("#fileAttachmentItem").trigger("click");
                            isChange = true;
                        }
                    })
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + para);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.loadAttachmentItem = function (event) {
        var file = event.target.files[0];
        if (file != undefined) {
            var data = new FormData();
            data.append("FileUpload", file);
            dataserviceCardJob.uploadAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var fileName = $('#fileAttachmentItem').val();
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                    var file = fileName.split('\\');
                    $scope.fileAttachment = {
                        FileName: file[file.length - 1],
                        FileUrl: '/uploads/files/' + rs.Object,
                        CardCode: $scope.cardCode,
                        ChkListCode: chkCode
                    }
                    $('#fileAttachmentItem').replaceWith($('#fileAttachmentItem').val('').clone(true));
                    dataserviceCardJob.addAttachment($scope.fileAttachment, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            chkCode = "";
                            dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.attachments = rs;
                            });
                            dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.ActivityData = rs;
                                if ($rootScope.ActivityData.length > 0) {
                                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                        }
                                    }
                                }
                            });
                            dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;

                                $rootScope.ItemCheck = rs;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                })
                            });
                        }
                    })
                }
            });
        }
    }

    $scope.changeInherit = function (code) {
        //bôi đậm khi chỉnh sửa
        if (!$scope.isAssign) {
            if ($scope.isAceptCard) {
                if (code != objOld.inherit) {
                    document.getElementById("inherit").style.fontWeight = "bold";
                    isChange = true;
                } else {
                    document.getElementById("inherit").style.fontWeight = "normal";
                }
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
        }
    }

    $scope.modelCheckList = {
        Title: '',
        WeightNum: '',
    }
    $scope.isUpdateCheckList = false;
    $scope.deleteCheckList = function (CheckCode) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    if ($scope.model.WorkflowCode == null || $scope.model.WorkflowCode == "" || $scope.model.WorkflowCode == undefined) {
                        dataserviceCardJob.deleteCheckList(CheckCode, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            }
                            else {
                                var obj = { IdObject: "ITEMCHECK", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                                if ($rootScope.settingNotification == "NO") {
                                    $rootScope.listNotification.push(obj);

                                } else {
                                    $rootScope.listNotification.push(obj);
                                    var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                    dataserviceCardJob.sendNotification(data, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                        } else {
                                            App.toastrSuccess(rs.Title);
                                        }
                                    })
                                }
                                App.toastrSuccess(rs.Title);
                                isChange = true;
                                dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;

                                    //$rootScope.ItemCheck = $scope.checklists;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                            rs = rs.data;
                                            $scope.statusItem[value.ChkListCode] = rs;
                                        })
                                    })
                                });
                                dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    if (!rs.Error) {
                                        $scope.completeBoard = rs.Object.BoardCompleted;
                                        $scope.completeList = rs.Object.ListCompleted;
                                        $scope.leader = rs.Object.Leader;
                                        setTimeout(function () {
                                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                        }, 100);
                                    }
                                });
                                $scope.model.Completed = rs.Object.PercentCard;
                                $scope.completeList = rs.Object.PercentList;
                                $scope.completeBoard = rs.Object.PercentBoard;
                            }
                        })
                    }
                    else {
                        App.toastrError(caption.CJ_MSG_CARD_FLOW_NOT_DEL_ITEM);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.assignUserToItem = function (chkListCode) {
        if (!$scope.isDisableControl) {
            if ($scope.RoleUser == "ROLE_LEADER" || userName == $scope.model.CreatedBy) {
                if (!$scope.isAssign) {
                    if ($scope.isAceptCard) {
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: ctxfolderCardJob + '/assign-user-item-check.html',
                            controller: 'assign-user-item-check',
                            size: '50',
                            resolve: {
                                cardCodeAssign: function () {
                                    return {
                                        ChkListCode: chkListCode,
                                        CardCode: $scope.cardCode
                                    };
                                }
                            }
                        });
                        modalInstance.result.then(function (d) {
                            //$scope.checklists = $rootScope.ItemCheck;
                            isChange = true;
                            dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                })
                            });
                        });
                    } else {
                        App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.addCheckList = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    if ($scope.model.WorkflowCode == null || $scope.model.WorkflowCode == "" || $scope.model.WorkflowCode == undefined) {
                        if ($scope.checklist.validate()) {
                            var chkCode = "CHECK_LIST_" + generateUUID();
                            var obj = {
                                CardCode: $scope.cardCode,
                                CheckTitle: $scope.modelCheckList.Title,
                                WeightNum: $scope.modelCheckList.WeightNum,
                                ChkListCode: chkCode
                            }
                            dataserviceCardJob.addCheckList(obj, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                }
                                else {
                                    App.toastrSuccess(rs.Title);
                                    isChange = true;
                                    dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.checklists = rs;
                                        angular.forEach(rs, function (value, key) {
                                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                                result = result.data;
                                                $scope.checkList[value.ChkListCode] = result;
                                            })
                                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                                rs = rs.data;
                                                $scope.statusItem[value.ChkListCode] = rs;
                                            })
                                        })
                                    });
                                    dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        if (!rs.Error) {
                                            $scope.completeBoard = rs.Object.BoardCompleted;
                                            $scope.completeList = rs.Object.ListCompleted;
                                            $scope.leader = rs.Object.Leader;
                                            setTimeout(function () {
                                                validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                            }, 100);
                                        }
                                    });
                                    $scope.modelCheckList.Title = '';
                                    $scope.modelCheckList.WeightNum = '';
                                }
                            })
                        }
                    }
                    else {
                        App.toastrError(caption.CJ_MSG_CARD_BELONG_WORK_FLOW);
                    }

                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.getCheckList = function (code, title, weightNum) {
        $scope.modelCheckList.ChkListCode = code;
        $scope.modelCheckList.Title = title;
        $scope.modelCheckList.WeightNum = weightNum;
        $scope.isUpdateCheckList = true;
    }

    //updateCheckList
    $scope.updateCheckList = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    if ($scope.model.WorkflowCode == null || $scope.model.WorkflowCode == "" || $scope.model.WorkflowCode == undefined) {
                        if ($scope.checklist.validate()) {
                            var obj = {
                                CardCode: $scope.cardCode,
                                CheckTitle: $scope.modelCheckList.Title,
                                WeightNum: $scope.modelCheckList.WeightNum,
                                ChkListCode: $scope.modelCheckList.ChkListCode
                            }
                            dataserviceCardJob.updateCheckList(obj, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                    isChange = true;
                                    dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.checklists = rs;
                                        angular.forEach(rs, function (value, key) {
                                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                                result = result.data;
                                                $scope.checkList[value.ChkListCode] = result;
                                            })
                                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                                rs = rs.data;
                                                $scope.statusItem[value.ChkListCode] = rs;
                                            })
                                        })
                                    });
                                    dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        if (!rs.Error) {
                                            $scope.completeBoard = rs.Object.BoardCompleted;
                                            $scope.completeList = rs.Object.ListCompleted;
                                            $scope.leader = rs.Object.Leader;
                                            setTimeout(function () {
                                                validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                            }, 100);
                                        }
                                    });
                                    $scope.modelCheckList.ChkListCode = "";
                                    $scope.modelCheckList.Title = "";
                                    $scope.modelCheckList.WeightNum = "";
                                    $scope.isUpdateCheckList = false;
                                    $scope.model.Completed = rs.Object.PercentCard;
                                    $scope.completeList = rs.Object.PercentList;
                                    $scope.completeBoard = rs.Object.PercentBoard;
                                }
                            })
                        }
                    }
                    else {
                        App.toastrError(caption.CJ_MSG_CARD_FLOW_NOT_UPDATE);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.validationOptionsCheckList = {
        rules: {
            Title: {
                required: true,
                maxlength: 255,
            },
            WeightNumCheckList: {
                required: true,
                min: 0,
                max: 100,
            }
        },
        messages: {
            Title: {
                required: caption.COM_ERR_REQUIRED.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE),//'Nhập tiêu đề!',
                maxlength: caption.COM_ERR_EXCEED_CHARACTERS.replace("{0}", caption.CJ_CURD_TAB_ADD_CHECK_LIST_CURD_TXT_TITLE).replace("{1}", "255")//'Cho phép tối đa 255 ký tự!'
            },
            WeightNumCheckList: {
                required: caption.CJ_VALIDATE_ENTER_WEIGHTNUM,
                min: caption.CJ_VALIDATE_WEIGHT_NUM_GREATER_THAN_0,
                max: caption.CJ_VALIDATE_WEIGHT_NUM_SMALLER_THAN_100
            }
        }
    }

    $scope.deleteCheckItem = function (id) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    dataserviceCardJob.deleteCheckItem(id, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            isChange = true;
                            dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                        rs = rs.data;
                                        $scope.statusItem[value.ChkListCode] = rs;
                                    })
                                })
                            });
                            dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.completeBoard = rs.Object.BoardCompleted;
                                    $scope.completeList = rs.Object.ListCompleted;
                                    $scope.leader = rs.Object.Leader;
                                    setTimeout(function () {
                                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                    }, 100);
                                }
                            });
                            $scope.model.Completed = rs.Object.PercentCard;
                            $scope.completeList = rs.Object.PercentList;
                            $scope.completeBoard = rs.Object.PercentBoard;
                        }
                    })
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }

            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.checkItemClick = function (itemId, checkListId) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    dataserviceCardJob.changeChkItemStatus(itemId, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            isChange = true;
                            dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.ActivityData = rs;
                                if ($rootScope.ActivityData.length > 0) {
                                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                        }
                                    }
                                }
                            });
                            if (rs.Object) {
                                dataserviceCardJob.checkCardSuccess($scope.cardCode, function (result) {
                                    result = result.data;
                                    if (result == true) {
                                        $scope.model.Status = "DONE";
                                        dataserviceCardJob.changeCardStatus($scope.cardCode, $scope.model.Status, function (rs) {
                                            rs = rs.data;
                                            if (rs.Error) {
                                                App.toastrError(rs.Title);
                                            }
                                            else {
                                                App.toastrSuccess(rs.Title);
                                            }
                                        });
                                    } else if ($scope.model.Status == "DONE") {
                                        $scope.model.Status = "START";
                                        dataserviceCardJob.changeCardStatus($scope.cardCode, $scope.model.Status, function (rs) {
                                            rs = rs.data;
                                            if (rs.Error) {
                                                App.toastrError(rs.Title);
                                            }
                                            else {
                                                App.toastrSuccess(rs.Title);
                                            }
                                        })
                                    }
                                })
                                $scope.model.Completed = rs.Object.PercentCard;
                                $scope.completeList = rs.Object.PercentList;
                                $scope.completeBoard = rs.Object.PercentBoard;
                                var checkList = $scope.checklists.find(function (element) {
                                    if (element.Id == checkListId) return true;
                                });
                                if (checkList) {
                                    checkList.Completed = rs.Object.PercentCheckList;
                                }
                            }
                        }
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.addCheckItem = function (checkCode) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var obj = {
                        ChkListCode: checkCode,
                        Title: $scope.checkitem.Title
                    }
                    if ($scope.checkitem.Title != '') {
                        dataserviceCardJob.addCheckItem(obj, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                isChange = true;
                                $scope.checkitem.Title = '';
                                dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;

                                    //$rootScope.ItemCheck = $scope.checklists;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                            rs = rs.data;
                                            $scope.statusItem[value.ChkListCode] = rs;
                                        })
                                    })
                                });
                                dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    if (!rs.Error) {
                                        $scope.completeBoard = rs.Object.BoardCompleted;
                                        $scope.completeList = rs.Object.ListCompleted;
                                        $scope.leader = rs.Object.Leader;
                                        setTimeout(function () {
                                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                        }, 100);
                                    }
                                });
                                $scope.show.addCheckItem[checkCode] = false;
                                $scope.model.Completed = rs.Object.PercentCard;
                                $scope.completeList = rs.Object.PercentList;
                                $scope.completeBoard = rs.Object.PercentBoard;
                            }
                        })
                    } else {
                        App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.editCheckItemTitle = function (e) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var itemTitle = e.target.value;
                    var itemId = e.target.getAttribute("itemid");
                    $scope.show.editCheckItem[e.target.getAttribute('itemid')] = false;
                    if (itemTitle != "" && itemTitle != null && itemTitle != undefined) {
                        var obj = {
                            Id: itemId,
                            Title: itemTitle
                        }
                        dataserviceCardJob.changeChkItemTitle(obj, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;

                                    $rootScope.ItemCheck = rs;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                    })
                                });
                                $rootScope.getLogActivity();
                            }
                        })
                    } else {
                        App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + para);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.assignUserToSubItem = function (checkitemId, checkListCode) {
        if (!$scope.isDisableControl) {
            if ($scope.RoleUser == "ROLE_LEADER" || userName == $scope.model.CreatedBy) {
                if (!$scope.isAssign) {
                    if ($scope.isAceptCard) {
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: ctxfolderCardJob + '/assign-user-sub-item-check.html',
                            controller: 'assign-user-sub-item-check',
                            size: '50',
                            resolve: {
                                item: function () {
                                    return {
                                        CheckitemId: checkitemId,
                                        CheckListCode: checkListCode,
                                        CardCode: $scope.cardCode
                                    };
                                }
                            }
                        });
                        modalInstance.result.then(function (d) {
                            isChange = true;
                            dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.checklists = rs;
                                angular.forEach(rs, function (value, key) {
                                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                        result = result.data;
                                        $scope.checkList[value.ChkListCode] = result;
                                    })
                                })
                            });
                        });
                    } else {
                        App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }

    //Comment
    $scope.addComment = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    if ($scope.comment.Content == "") {
                        return;
                    }
                    var obj = {
                        CardCode: $scope.cardCode,
                        CmtContent: $scope.comment.Content
                    }
                    dataserviceCardJob.addComment(obj, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            var obj = { IdObject: "CMT", Action: "ADD", UserAction: $scope.currentUser, CreatedTime: new Date() }
                            if ($rootScope.settingNotification == "NO") {
                                $rootScope.listNotification.push(obj);

                            } else {
                                $rootScope.listNotification.push(obj);
                                var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                dataserviceCardJob.sendNotification(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    } else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                })
                            }
                            isChange = true;
                            App.toastrSuccess(rs.Title);
                            $scope.comment.Content = '';
                            dataserviceCardJob.getComment($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.comments = rs;
                            });
                        }
                    })
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.deleteComment = function (CmtId) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    dataserviceCardJob.deleteComment(CmtId, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            var obj = { IdObject: "CMT", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                            if ($rootScope.settingNotification == "NO") {
                                $rootScope.listNotification.push(obj);

                            } else {
                                $rootScope.listNotification.push(obj);
                                var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                dataserviceCardJob.sendNotification(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    } else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                })
                            }
                            App.toastrSuccess(rs.Title);
                            isChange = true;
                            dataserviceCardJob.getComment($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.comments = rs;
                            });
                        }
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.updateComment = function (e) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    console.log(e.target.getAttribute('cmtid'));
                    $scope.show.editComment[e.target.getAttribute('cmtid')] = false;
                    var obj = {
                        Id: e.target.getAttribute('cmtid'),
                        CmtContent: e.target.value
                    }
                    dataserviceCardJob.updateComment(obj, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            var obj = { IdObject: "CMT", Action: "UPDATE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                            if ($rootScope.settingNotification == "NO") {
                                $rootScope.listNotification.push(obj);

                            } else {
                                $rootScope.listNotification.push(obj);
                                var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                dataserviceCardJob.sendNotification(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    } else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                })
                            }
                            App.toastrSuccess(rs.Title);
                            isChange = true;
                            dataserviceCardJob.getComment($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.comments = rs;
                            });
                        }
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    };

    $scope.itemWork = {
        checkItem: false
    };
    $scope.addItemWork = function (code, title) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    $rootScope.isDisabled = false;
                    if ($scope.model.Status == "CREATED") {
                        dataserviceCardJob.changeCardStatus($scope.cardCode, "START", function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                            }
                            else {
                                dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    if (!rs.Error) {
                                        $scope.completeBoard = rs.Object.BoardCompleted;
                                        $scope.completeList = rs.Object.ListCompleted;
                                        $scope.leader = rs.Object.Leader;
                                        setTimeout(function () {
                                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                        }, 100);
                                    }
                                });
                            }
                        });
                    }
                    dataserviceCardJob.checkConstraintSuccess(code, function (rs) {
                        rs = rs.data;
                        if (rs) {
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: ctxfolderCardJob + '/item-work.html',
                                controller: 'add-item-work',
                                size: '50',
                                resolve: {
                                    paraItemWork: function () {
                                        return {
                                            CardCode: $scope.cardCode,
                                            ChkListCode: code,
                                            CheckTitle: title
                                        }
                                    }
                                }
                            });
                            modalInstance.result.then(function (d) {
                                var obj = { IdObject: "ITEMWORK", Action: "ADD", UserAction: $scope.currentUser, CreatedTime: new Date() }
                                if ($rootScope.settingNotification == "NO") {
                                    $rootScope.listNotification.push(obj);

                                }
                                else {
                                    $rootScope.listNotification.push(obj);
                                    var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                    dataserviceCardJob.sendNotification(data, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                        } else {
                                            App.toastrSuccess(rs.Title);
                                        }
                                    })
                                }
                                isChange = true;
                                dataserviceCardJob.getListWorkItem($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.listItemWork = rs.Object;
                                });
                                dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $rootScope.ActivityData = rs;
                                    if ($rootScope.ActivityData.length > 0) {
                                        for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                            if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                                $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                            }
                                        }
                                    }
                                });
                                dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                            rs = rs.data;
                                            $scope.statusItem[value.ChkListCode] = rs;
                                        })
                                    })
                                });
                                dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    if (!rs.Error) {
                                        $scope.completeBoard = rs.Object.BoardCompleted;
                                        $scope.completeList = rs.Object.ListCompleted;
                                        $scope.leader = rs.Object.Leader;
                                        //InitMap
                                        setTimeout(function () {
                                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                        }, 100);
                                    }
                                });
                            });
                        } else {
                            App.toastrError(caption.CJ_MSG_CONSTRAINT_ITEM_NO_SUCCESS);
                        }
                    })
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }
    $scope.editItemWork = function (id, createdBy, title) {
        if ($scope.isNotLeader) {
            if (!$scope.isDisableControl) {
                if (!$scope.isAssign) {
                    if ($scope.isAceptCard) {
                        if (userName == createdBy || $scope.RoleUser == "ROLE_LEADER") {
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: ctxfolderCardJob + '/item-work.html',
                                controller: 'edit-item-work',
                                size: '50',
                                resolve: {
                                    idItemWork: function () {
                                        return {
                                            Id: id,
                                            CardCode: $scope.cardCode,
                                            CheckTitle: title
                                        };
                                    }
                                }
                            });
                            modalInstance.result.then(function (d) {
                                var obj = { IdObject: "ITEMWORK", Action: "UPDATE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                                if ($rootScope.settingNotification == "NO") {
                                    $rootScope.listNotification.push(obj);

                                } else {
                                    $rootScope.listNotification.push(obj);
                                    var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                    dataserviceCardJob.sendNotification(data, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                        } else {
                                            App.toastrSuccess(rs.Title);
                                        }
                                    })
                                }
                                isChange = true;
                                dataserviceCardJob.getListWorkItem($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.listItemWork = rs.Object;
                                });
                                dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $rootScope.ActivityData = rs;
                                    if ($rootScope.ActivityData.length > 0) {
                                        for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                            if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                                $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                            }
                                        }
                                    }
                                });
                                dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                    })
                                });
                                dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    if (!rs.Error) {
                                        $scope.completeBoard = rs.Object.BoardCompleted;
                                        $scope.completeList = rs.Object.ListCompleted;
                                        $scope.leader = rs.Object.Leader;
                                        setTimeout(function () {
                                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                        }, 100);
                                    }
                                });
                            });
                        } else {
                            App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
                        }
                    } else {
                        App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                    }
                } else {
                    App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
            }
        } else {
            App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
        }
    }
    $scope.deleteItemWork = function (id) {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    dataserviceCardJob.deleteWorkItemActivity(id, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            var obj = { IdObject: "ITEMWORK", Action: "DELETE", UserAction: $scope.currentUser, CreatedTime: new Date() }
                            if ($rootScope.settingNotification == "NO") {
                                $rootScope.listNotification.push(obj);

                            } else {
                                $rootScope.listNotification.push(obj);
                                var data = { CardCode: $scope.cardCode, List: $rootScope.listNotification };
                                dataserviceCardJob.sendNotification(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    } else {
                                        App.toastrSuccess(rs.Title);
                                    }
                                })
                            }
                            isChange = true;
                            App.toastrSuccess(rs.Title);
                            dataserviceCardJob.getListWorkItem($scope.cardCode, function (rs) {
                                rs = rs.data;
                                $scope.listItemWork = rs.Object;
                            });
                        }
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }

    }
    $scope.approve = function (code, title) {
        if (!$scope.isDisableControl) {
            if (!$scope.isNotLeader) {
                if ($scope.isAceptCard) {
                    dataserviceCardJob.checkConstraintSuccess(code, function (rs) {
                        rs = rs.data;
                        if (rs) {
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: ctxfolderCardJob + '/approve-item-work.html',
                                controller: 'approve-item-work',
                                backdrop: 'static',
                                resolve: {
                                    para: function () {
                                        return {
                                            ChkListCode: code,
                                            Title: title
                                        };
                                    }
                                },
                                size: '50',
                            });
                            modalInstance.result.then(function (d) {
                                dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                                    rs = rs.data;
                                    $scope.checklists = rs;
                                    $rootScope.ItemCheck = rs;
                                    angular.forEach(rs, function (value, key) {
                                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                            result = result.data;
                                            $scope.checkList[value.ChkListCode] = result;
                                        })
                                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                                            rs = rs.data;
                                            $scope.statusItem[value.ChkListCode] = rs;
                                        })
                                    })
                                });
                            });
                        }
                        else {
                            App.toastrError(caption.CJ_MSG_CONSTRAINT_ITEM_NO_SUCCESS);
                        }
                    })
                }
                else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            }
            else {
                App.toastrError(caption.CJ_MSG_U_DO_NOT_PERMISSION);
            }
        }
        else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }

    //add-card-inherit, card-link
    $scope.addInheritLink = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/add-card-link.html',
                        controller: 'add-card-link',
                        windowClass: "message-center",
                        size: '35',
                        backdrop: 'static',
                        resolve: {
                            cardJob: function () {
                                return {
                                    cardCode: $scope.cardCode,
                                    cardName: $scope.model.CardName,
                                    Inherit: $scope.model.Inherit
                                };
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        isChange = true;
                        $scope.Links = $rootScope.CardLink.ListCardLink;
                        $scope.model.Inherit = $rootScope.CardInherit.Code;
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + para);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }
    }


    $scope.isShowButton = false;
    $scope.showButton = function (isShow) {
        $scope.isShowButton = isShow;
    }
    $scope.isHideMap = false;
    $scope.hideMap = function (index) {
        if (index == 0) {
            $scope.isHideMap = false;
        } else {
            $scope.isHideMap = true;
        }
    }
    $scope.pushTrash = function () {
        dataserviceCardJob.changeCardStatus($scope.cardCode, "TRASH", function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(caption.COM_DELETE_SUCCESS);
                $uibModalInstance.close();
                $rootScope.reloadGridCard();
            }
        });
    }

    $scope.isShowButton = 0;
    $scope.isHideMap = false;
    $scope.hideMap = function (index) {
        if (index == 0) {
            $scope.isHideMap = false;
        } else {
            $scope.isHideMap = true;
        }
    }
    $scope.addCheckInOut = function () {
        if (!$scope.isAssign) {
            if ($scope.isAceptCard) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/add-check-in-out.html',
                    controller: 'add-check-in-out',
                    size: '50'
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {

                        rs = rs.data;
                        $scope.listShift = rs;
                        if ($scope.listShift.length > 0) {
                            $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                            var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                            var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                            var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                            var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                            $scope.modelShift.In = inTime;
                            $scope.modelShift.Out = outTime;
                            if (inDate != outDate && outDate != null) {
                                $scope.modelShift.DateIn = inDate;
                                $scope.modelShift.DateOut = outDate;
                                $scope.isSameDate = false;
                            } else {
                                $scope.modelShift.DateInOut = inDate;
                                $scope.isSameDate = true;
                            }
                        }
                    })
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
        }
    }

    //Save buffer
    $scope.isSave = true;
    $scope.isUpdate = true;
    $scope.cancel = function () {

        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
            if ($scope.descriptionOld != $scope.model.Description && $scope.descriptionOld != null && $scope.model.Description != "") {
                isChange = true;
            }
        }
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
        }
        if ($scope.model.CardName.trim() == "" || $scope.model.CardName == null || $scope.model.CardName == undefined) {
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
                resolve: {
                    para: function () {
                        return $scope.model.CardCode;
                    }
                },
                windowClass: "message-center",
                controller: function ($scope, $uibModalInstance, para) {
                    $scope.message = caption.CJ_MSG_CARD_NO_TITLE_DEL;
                    $scope.ok = function () {
                        dataserviceCardJob.delCardNoTitle(para, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                                $uibModalInstance.close('cancel');
                            }
                            else {
                                App.toastrSuccess(rs.Title);
                                $uibModalInstance.close('cancel');
                            }
                        })
                    };
                    $scope.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                size: '25',
            });
            modalInstance.result.then(function (d) {
                $uibModalInstance.close();
            }, function () {
            });
        }
        else if (!isChange) {
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderMessage + '/messageConfirmCreate.html',
                resolve: {
                    para: function () {
                        return {
                            CardCode: $scope.cardCode
                        };
                    }
                },
                windowClass: "message-center",
                controller: function ($scope, $uibModalInstance, para) {
                    $scope.message = caption.CJ_MSG_QUESTION_CREATE_CARD;
                    $scope.ok = function () {
                        $uibModalInstance.close('cancel');
                    };
                    $scope.cancel = function () {
                        dataserviceCardJob.deleteNewCard(para.CardCode, function (rs) {
                            rs = rs.data;
                            $uibModalInstance.close();
                        })
                    };
                },
                size: '25',
            });
            modalInstance.result.then(function (d) {
                $uibModalInstance.close();
                dataserviceCardJob.removeLockShare($scope.cardCode, function (rs) {

                })
            }, function () {
            });
        }
        else if (isChange) {
            if ($scope.isSave) {
                return $uibModalInstance.close();
            }

            if ($scope.model.ListCode == "" || $scope.model.ListCode == null || $scope.model.ListCode == undefined) {
                return App.toastrError(caption.CJ_MSG_SELECT_LIST)
            }
            if ($scope.model.WeightNum == "" || $scope.model.WeightNum == null || $scope.model.WeightNum == undefined) {
                $scope.model.WeightNum = 0;
            }
            var cardBufferData = {
                CardJob: $scope.model, JcRelative: $rootScope.Rela, CardLink: $rootScope.CardLink,
                ProductBuffer: $scope.ProductBuffer, ServiceBuffer: $scope.ServiceBuffer, AddressBuffer: $scope.AddressBuffer,
                CheckListItemBuffer: $rootScope.ItemCheck, TimeSpanActivity: $scope.TimeSpanActivity
            };
            for (var i = 0; i < $rootScope.ItemCheck.length; i++) {
                $rootScope.ItemCheck[i].CardCode = $scope.cardCode;
            }
            var ItemProgress = {
                ItemWork: $rootScope.ItemWork,
                ItemCheck: $rootScope.ItemCheck,
                CompleteOld: $scope.CompletedOld,
                TimeSpanActivity: $scope.TimeSpanActivity
            }
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderMessage + '/messageConfirmUpdateCard.html',
                resolve: {
                    paramBuffer: function () {
                        return {
                            cardBufferData: cardBufferData,
                            ItemWorkCheck: ItemProgress
                        };
                    }
                },
                windowClass: "message-center",
                controller: function ($scope, $uibModalInstance, paramBuffer) {
                    $scope.message = caption.CJ_MSG_WANT_TO_SAVE;
                    $scope.ok = function () {
                        dataserviceCardJob.updateCardByBufferData(paramBuffer.cardBufferData, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                                $uibModalInstance.dismiss('cancel');
                            } else {
                                $rootScope.Assign = {
                                    ListObj: [],
                                    ListDeletedObj: [],
                                    Listmember: [],
                                    ListDeleteMember: []
                                }
                                App.toastrSuccess(rs.Title);
                                $uibModalInstance.close('cancel');
                            }
                        })
                    };
                    $scope.cancel = function () {
                        dataserviceCardJob.rollbackDataBuffer(paramBuffer.ItemWorkCheck, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            } else {
                                $rootScope.Assign = {
                                    ListObj: [],
                                    ListDeletedObj: [],
                                    Listmember: [],
                                    ListDeleteMember: []
                                }
                                $uibModalInstance.close('cancel');
                            }
                        })
                    };
                },
                size: '25',
            });
            modalInstance.result.then(function (d) {
                $uibModalInstance.close();
                $rootScope.ListDelItemCheck = [];
                dataserviceCardJob.removeLockShare($scope.cardCode, function (rs) {

                })
            }, function () {
            });
        }
    };
    $scope.saveBuffer = function () {

        if ($scope.isSave) {
            return;
        }
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
        }

        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
            if ($scope.descriptionOld != $scope.model.Description && $scope.descriptionOld != null && $scope.model.Description != "") {
                isChange = true;
            }
        }

        if (isChange) {
            if ($scope.model.CardName.trim() == "" || $scope.model.CardName == null || $scope.model.CardName == undefined) {
                return App.toastrError(caption.CJ_MSG_PLS_ENTER_TITILE);
            }
            if ($scope.model.ListCode == "" || $scope.model.ListCode == null || $scope.model.ListCode == undefined) {
                return App.toastrError(caption.CJ_MSG_SELECT_LIST)
            }
            var cardBufferData = {
                CardJob: $scope.model, JcRelative: $rootScope.Rela, CardLink: $rootScope.CardLink,
                Assign: $rootScope.Assign, ProductBuffer: $scope.ProductBuffer, ServiceBuffer: $scope.ServiceBuffer, AddressBuffer: $scope.AddressBuffer,
                CheckListItemBuffer: $rootScope.ItemCheck, TimeSpanActivity: $scope.TimeSpanActivity
            };
            dataserviceCardJob.updateCardByBufferData(cardBufferData, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    $rootScope.Assign = {
                        ListObj: [],
                        ListDeletedObj: [],
                        Listmember: [],
                        ListDeleteMember: []
                    }
                    App.toastrSuccess(rs.Title);
                    isChange = false;
                    $scope.initData();
                    $scope.model.Completed = rs.Object.PercentCard;
                    $scope.completeList = rs.Object.PercentList;
                    $scope.completeBoard = rs.Object.PercentBoard;
                }
            })
        } else {
            App.toastrError(caption.CJ_MSG_NO_CHANGE_CONTENT);
        }
    }

    $scope.update = function () {
        if (!$scope.isUpdate) {
            return;
        }
        $scope.isUpdate = false;

        $scope.initData();
    }

    //End save buffer

    $scope.showLogActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-user-activity.html',
            controller: 'log-user-activity',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $scope.cardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {

        });
    }
    $scope.idxViewTab = 1;
    $scope.viewTab = function (index) {
        $scope.idxViewTab = index;
    }
    $scope.addCheckInOut = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-check-in-out.html',
            controller: 'add-check-in-out',
            size: '50'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
                rs = rs.data;
                $scope.listShift = rs;
                if ($scope.listShift.length > 0) {
                    $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                    var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                    var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                    var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                    var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                    $scope.modelShift.In = inTime;
                    $scope.modelShift.Out = outTime;
                    if (inDate != outDate && outDate != null) {
                        $scope.modelShift.DateIn = inDate;
                        $scope.modelShift.DateOut = outDate;
                        $scope.isSameDate = false;
                    } else {
                        $scope.modelShift.DateInOut = inDate;
                        $scope.isSameDate = true;
                    }
                }
            })
        });
    }

    //Send notifi
    $scope.sendNotifi = function () {
        if (!$scope.isAssign) {
            if ($scope.isAceptCard) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/send-notifi-card.html',
                    controller: 'send-notifi-card',
                    size: '30',
                    resolve: {
                        cardCode: function () {
                            return $scope.cardCode;
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                });
            } else {
                App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
            }
        } else {
            App.toastrError(caption.CJ_MSG_U_NOT_ASSIGN_IN_CARD + para);
        }
    }

    //Del card
    $scope.delete = function (CardID) {
        dataserviceCardJob.deleteCard(CardID, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $uibModalInstance.close('cancel');
            }
        });
    };

    //Change currency, cost
    $scope.changeCurrency = function () {
        isChange = true;
    }
    $scope.changeCost = function () {
        isChange = true;
    }

    //File edms
    $scope.fileManage = function () {
        if (!$scope.isDisableControl) {
            if (!$scope.isAssign) {
                if ($scope.isAceptCard) {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/fileManage.html',
                        controller: 'fileManage',
                        backdrop: 'static',
                        size: '60',
                        resolve: {
                            cardCode: function () {
                                return $scope.cardCode;
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        dataserviceCardJob.getAttachment($scope.cardCode, function (rs) {
                            rs = rs.data;
                            $scope.attachments = rs;
                        });
                        dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }, function () {
                    });
                } else {
                    App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
                }
            } else {
                App.toastrError(caption.CJ_MSG_CANNOT_UPDATE_CMT + $scope.cardCode);
            }
        } else {
            App.toastrError(caption.CJ_MSG_CARD_STATUS_CLOSE);
        }


    }

    $scope.viewLogStatus = function () {

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-status-log.html',
            controller: 'log-status',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $scope.cardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }

    //Log activity workflow
    $scope.viewLogWF = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-activity-wf.html',
            controller: 'log-activity-wf',
            backdrop: 'static',
            size: '50',
            resolve: {
                para: function () {
                    var obj = { WfInstCode: $scope.modelWF.WfInstCode, CardCode: $scope.cardCode };
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    }

    //Lock card
    $scope.lockCard = function () {
        var value = false;
        if (!$scope.model.IsLock) {
            value = true;
        }
        dataserviceCardJob.lockCard($scope.cardCode, value, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.model = rs.Object.CardDetail;
                        $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                        $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                        $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                        $scope.updateCardName("card_000000");
                        setTimeout(function () {
                            $scope.disableCkEditer(editor);
                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                        }, 500);
                    }
                });
            }
        })
    }

    // Data logger card
    $scope.isSelectChkList = false;
    $scope.chkListSelect = [];
    $scope.modelAttr = {
        ID: "",
        DtCode: "",
        DtTitle: "",
        DtValue: "",
        DtUnit: "",
        DtValueType: "",
        DtGroup: "",
        ShiftCode: ""
    };
    $scope.fileAttr = {};
    $scope.modelListAttr = [];
    $scope.listAttrTemp = [];
    $scope.lstLoggerDataCard = [];
    $scope.lstLoggerDataCardDetail = [];
    $scope.tabTypeLogger = 0;

    $scope.changeAttrGroup = function () {
        $scope.lstLoggerDataCard = [];

        if ($scope.model.IsLock) {
            return App.toastrError(caption.CJ_MSG_CARD_LOCKED);
        }

        dataserviceCardJob.getAttrByGroup($scope.modelAttr.DtGroup, function (rs) {
            rs = rs.data;
            $scope.listAttrTemp = rs;

            if ($scope.cardLogger.validate()) {
                $scope.modelAttr.JobcardCode = $scope.cardCode;
                var chkList = [];
                if (!$scope.isSelectChkList) {
                    for (var i = 0; i < $scope.checklists.length; i++) {
                        var obj = {
                            Code: $scope.checklists[i].ChkListCode,
                            Title: $scope.checklists[i].CheckTitle,
                        };
                        chkList.push(obj);
                    }
                }
                else {
                    for (var i = 0; i < $scope.chkListSelect.length; i++) {
                        var obj = {
                            Code: $scope.chkListSelect[i].ChkListCode,
                            Title: $scope.chkListSelect[i].Title,
                        };
                        chkList.push(obj);
                    }
                }

                $scope.modelAttr.ItemList = JSON.stringify(chkList);
                $scope.modelAttr.ShiftCode = $scope.attrShiftCode;

                if ($scope.model.ActInstCode === "" || $scope.model.ActInstCode === undefined) {
                    return App.toastrWarning("Vui lòng chọn hoạt động");
                }

                $scope.modelAttr.WfInstCode = $scope.WfInstCode;
                $scope.modelAttr.ActInstCode = $scope.model.ActInstCode;

                if ($scope.modelAttr.DtValueType === "ATTR_DATA_TYPE_FILE") {
                    $scope.modelAttr.DtValue = JSON.stringify($scope.fileAttr);
                }

                for (var j = 0; j < $scope.listAttrTemp.length; j++) {

                    var objAttr = {
                        ID: $scope.listAttrTemp[j].ID,
                        Code: $scope.listAttrTemp[j].Code,
                        Title: $scope.listAttrTemp[j].Name,
                        Value: $scope.modelAttr.DtValue,
                        Unit: $scope.listAttrTemp[j].Unit,
                        Type: $scope.listAttrTemp[j].Type,
                        Shift: $scope.attrShiftCode,
                        CreatedBy: $scope.listAttrTemp[j].CreatedBy,
                        CreatedTime: $scope.listAttrTemp[j].CreatedTime,
                        WfInstCode: $scope.WfInstCode,
                        ActInstCode: $rootScope.ActInstCode,
                        ItemList: JSON.stringify(chkList),
                        JobcardCode: $scope.modelAttr.JobcardCode,
                        DtGroup: $scope.listAttrTemp[j].DtGroup
                    };

                    $scope.lstLoggerDataCard.push(objAttr);
                };
            }
        });
    };

    $scope.viewDataLogger = function () {
        dataserviceCardJob.getDataLoggerCard($scope.cardCode, function (rs) {
            rs = rs.data;
            $scope.listData = rs;
            $scope.tabTypeLogger = 1;
        });
    };

    $scope.submitAttr = function () {
        if ($scope.tabTypeLogger === 1) {
            $scope.tabTypeLogger = 0;
        } else {
            $scope.modelListAttr = [];

            if ($scope.lstLoggerDataCard.length === 0) {
                app.toastrError(caption.CJ_MSG_GROUP_TEMP_NO_ATTR);
                return;
            };

            for (var j = 0; j < $scope.lstLoggerDataCard.length; j++) {
                var objAttr = {
                    ID: $scope.lstLoggerDataCard[j].ID,
                    DtCode: $scope.lstLoggerDataCard[j].Code,
                    DtTitle: $scope.lstLoggerDataCard[j].Title,
                    DtValue: $scope.lstLoggerDataCard[j].Value,
                    DtUnit: $scope.lstLoggerDataCard[j].Unit,
                    DtValueType: $scope.lstLoggerDataCard[j].Type,
                    DtGroup: $scope.lstLoggerDataCard[j].DtGroup,
                    ShiftCode: $scope.lstLoggerDataCard[j].Shift,
                    WfInstCode: $scope.modelAttr.WfInstCode,
                    ActInstCode: $scope.modelAttr.ActInstCode,
                    ItemList: $scope.modelAttr.ItemList,
                    JobcardCode: $scope.lstLoggerDataCard[j].JobcardCode,
                };

                $scope.modelListAttr.push(objAttr);
            };

            dataserviceCardJob.insertDataLogger($scope.modelListAttr, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.lstLoggerDataCard = [];
                    $scope.modelAttr.DtGroup = '';
                    $rootScope.getLogActivity();
                }
            });
        }
    };

    $scope.deleteDataLogger = function (sessionId) {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            resolve: {
                para: function () {
                    return sessionId;
                }
            },
            controller: function ($scope, $uibModalInstance, para) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteDataLogger(para, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            $uibModalInstance.dismiss('cancel');
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '30',
        });
        modalInstance.result.then(function (d) {

        }, function () {
            $scope.viewDataLogger();
        });
    };

    $scope.uploadFileAttr = function () {
        $("#fileAttr").trigger("click");
    };

    $scope.loadFileAttr = function (event) {
        var file = event.target.files[0];
        if (file != undefined) {
            var data = new FormData();
            data.append("FileUpload", file);
            data.append("CardCode", $scope.cardCode)
            dataserviceCardJob.uploadAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var fileName = $('#fileAttr').val();
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                    var file = fileName.split('\\');
                    $scope.fileAttr = {
                        FileName: file[file.length - 1],
                        FileUrl: '/uploads/repository/CARDJOB/' + rs.Object,
                        CardCode: $scope.cardCode
                    }
                    $('#fileAttr').replaceWith($('#fileAttr').val('').clone(true));
                    App.toastrSuccess("Tải tệp tin thành công");
                    $scope.modelAttr.DtValue = $scope.fileAttr.FileName;
                }
            });
        }
    }

    $scope.selectChkItem = function () {
        if ($scope.model.IsLock) {
            return App.toastrError(caption.CJ_MSG_CARD_LOCKED);
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/select-check-item.html',
            controller: 'select-check-item',
            backdrop: 'static',
            size: '40',
            resolve: {
                para: function () {
                    return $scope.cardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.chkListSelect = d;
            $scope.isSelectChkList = true;
        }, function () { });
    }

    $scope.viewLogStatus = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-status-log.html',
            controller: 'log-status',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $scope.cardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    };

    function initMap() {
        fields_vector_source = new ol.source.Vector({});
        var center = ol.proj.transform([$rootScope.lngDefault, $rootScope.latDefault], 'EPSG:4326', 'EPSG:3857');
        map = new ol.Map({
            target: $('#map')[0],

            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM({
                        url: 'https://mt{0-3}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}'


                    })
                }),
                new ol.layer.Vector({
                    source: fields_vector_source
                })
            ],

            view: new ol.View({
                center: center,
                zoom: 15

            }),

            controls: ol.control.defaults({
                attribution: false,
                zoom: false,
            })
        });
        var pathGG = $('#pathGG').html();
        var id = $("#ID").html();
        var aaa = parseInt(id);
        if (pathGG != "" && pathGG != null) {
            pathSourceVector = new ol.source.Vector({
                features: []
            });
            pathLayerMarker = new ol.layer.Vector({
                source: pathSourceVector
            });
            var path = polyline.decode(pathGG);

            pathLayerMarker = renderLinePathLayer(path);
            map.addLayer(pathLayerMarker);

            var styles3 = [

                new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: '#64c936',
                        width: 3
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(100, 201, 54,1)'
                    })
                }),
            ];

            var iconStyleStart = new ol.style.Style({
                image: new ol.style.Icon(({
                    anchor: [0.5, 26],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: 'https://i.imgur.com/pjZYQLJ.png'
                })),
                zIndex: 11
            });
            var iconStyleEnd = new ol.style.Style({
                image: new ol.style.Icon(({
                    anchor: [0.5, 26],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: 'https://i.imgur.com/3g07NhB.png'
                })),
                zIndex: 11
            });

            var pathLenght = path.length - 1;
            var iconFeatureStart = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.transform([parseFloat(path[0][1]), parseFloat(path[0][0])], 'EPSG:4326', 'EPSG:3857')),
                type: "valve"
            });

            iconFeatureStart.setId(1);
            iconFeatureStart.setStyle(iconStyleStart);
            var iconFeatureEnd = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.transform([parseFloat(path[pathLenght][1]), parseFloat(path[pathLenght][0])], 'EPSG:4326', 'EPSG:3857')),
                type: "valve"
            });
            iconFeatureEnd.setId(2);
            iconFeatureEnd.setStyle(iconStyleEnd);
            var vectorIcon = new ol.source.Vector({});
            vectorIcon.addFeature(iconFeatureStart);
            vectorIcon.addFeature(iconFeatureEnd);

            var vectorLayer = new ol.layer.Vector({
                source: vectorIcon,
                style: styles3
            });

            map.addLayer(vectorLayer);


            //pathSource = new ol.source.Vector({});


            pathSource.addFeature(renderLineStringFeature(path))
            var field_location = pathSource.getFeatureById(aaa).getProperties();
            var field_extent = field_location.geometry.getExtent();
            map.getView().fit(field_extent, map.getSize());
            map.getView().setZoom(12);
        }
    }
    function initDataMap() {
        if ($scope.model.LocationGps == null) {
            $scope.address.lat = $rootScope.latDefault;
            $scope.address.lng = $rootScope.lngDefault;
            $scope.address.text = $rootScope.addressDefault;
        } else {
            $scope.address.lat = parseFloat($scope.model.LocationGps.split(',')[0]);
            $scope.address.lng = parseFloat($scope.model.LocationGps.split(',')[1]);
            $scope.address.text = $scope.model.LocationText;
        }


        var centerPoint = { lat: $scope.address.lat, lng: $scope.address.lng };
        var infowindow = new google.maps.InfoWindow({
            content: $scope.address.text,
        });
        var maps = new google.maps.Map(
            document.getElementById('map'), { zoom: $rootScope.zoomMapDefault, center: centerPoint });
        var marker = new google.maps.Marker({
            zoom: 12,
            position: centerPoint,
            map: maps,
        });
        var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-33.8902, 151.1759), new google.maps.LatLng(-33.8474, 151.2631));
        var options = {
            bounds: defaultBounds,
            types: ['geocode']
        };


        //Autocomplete
        var input = document.getElementById('searchAddress');
        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);
        var service = new google.maps.places.PlacesService(maps);


        //Map change
        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Không tìm thấy địa chỉ này");
                return;
            }
            if (place.geometry.viewport) {
                maps.fitBounds(place.geometry.viewport);
            } else {
                maps.setCenter(place.geometry.location);
                maps.setZoom(17);
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);
            var html = "<b>" + place.name + "</b> <br/>" + place.formatted_address;
            infowindow.setContent(html);
            infowindow.open(maps, marker);
            $scope.address.text = place.formatted_address;
            $scope.address.lat = place.geometry.location.lat();
            $scope.address.lng = place.geometry.location.lng();
            $scope.$apply();
        });

        infowindow.open(map, marker);
        maps.addListener('click', function (event) {
            var point = { lat: event.latLng.lat(), lng: event.latLng.lng() }
            $scope.address.lat = point.lat;
            $scope.address.lng = point.lng;
            dataserviceCardJob.getAddress(point.lat, point.lng, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    var html = "<b>Thông tin</b> <br/>" + rs.Object;
                    infowindow.setContent(html);
                    infowindow.open(map, marker, html);
                    $scope.address.text = rs.Object;
                }
            })
            if (marker) {
                marker.setPosition(point);
            }
            else {
                marker = new google.maps.Marker({
                    position: point,
                    map: maps,
                });
            }
            maps.setZoom($rootScope.zoomMapDefault);
        })
    }
    function mapReSize() {
        setTimeout(function () {
            map.updateSize();
        }, 600);
    }
    function loadDate() {
        $("#startDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            dateFormat: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            //$('#endDate').datepicker('setStartDate', maxDate);
            $('#deadline').datepicker('setStartDate', maxDate);
            $('#endDate').datepicker('setStartDate', maxDate);
        });
        $("#endDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            //$('#startDate').datepicker('setEndDate', maxDate);
            $('#startDate').datepicker('setEndDate', maxDate);
        });
        $("#deadline").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#endDate').datepicker('setStartDate', maxDate);
            //$('#startDate').datepicker('setEndDate', maxDate);
        });;
    }
    function validateDefaultDate(startDate, endDate, deadline) {

        setStartDate("#endDate", startDate);
        setStartDate("#deadline", startDate);
        //setEndDate
        const [dayDead, monthDead, yearDeal] = deadline.split("/")
        var deadTime = new Date(yearDeal, monthDead - 1, dayDead)
        if (endDate != "") {
            const [day, month, year] = endDate.split("/")
            var endTime = new Date(year, month - 1, day)
            if (endTime > deadTime) {
                setEndDate("#startDate", deadline)
            }
            else {
                setEndDate("#startDate", endDate)
            }
        }
        else {
            setEndDate("#startDate", deadline)
        }
    }
    setTimeout(function () {
        ckEditer();
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);
    $scope.addCommonSettingWorkType = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'OBJ_WORKTYPE',
                        GroupNote: 'Kiểu công việc',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getWorkType(function (rs) {
                rs = rs.data;
                $scope.WorkTypes = rs;
            });
        }, function () { });
    }
    $scope.addCommonSettingCardLevel = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'LEVEL',
                        GroupNote: 'Độ ưu tiên',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getLevels(function (rs) {
                rs = rs.data;
                $scope.CardLevels = rs;
            });
        }, function () { });
    }
    $scope.addProductActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_PRODUCT',
                        GroupNote: 'Hoạt động sản phẩm',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityProduct(function (rs) {
                rs = rs.data;
                $scope.listActivityProduct = rs;
            })
        }, function () { });
    }
    $scope.addSeriveActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_SERVICE',
                        GroupNote: 'Hoạt động dịch vụ',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityService(function (rs) {
                rs = rs.data;
                $scope.listActivityService = rs;
            });
        }, function () { });
    }
});

app.controller('copy-card', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, $filter, para) {
    $scope.cancel = function () {
        CKEDITOR.removeAllListeners();
        CKEDITOR.instances['description'].removeAllListeners();
        if (!$rootScope.isAddedCard) {
            //clearInterval($scope.interval);
            $uibModalInstance.close('cancel');
        }
        if (!$rootScope.isUpdate) {
            dataserviceCardJob.removeLockShare($rootScope.CardCode, function (rs) {
                //clearInterval($scope.interval);
                $uibModalInstance.close('cancel');
            })
        }
        else {
            //clearInterval($scope.interval);
            $uibModalInstance.close('cancel');
        }
    }

    //Declare model angular
    $scope.modelShift = {
        In: '',
        Out: '',
        DateIn: '',
        DateOut: '',
        DateInOut: ''
    };

    $scope.obj = {
        Board: '',
        List: ''
    };

    $scope.model = {
        CardName: '',
        BeginTime: '',
        Deadline: '',
        EndTime: '',
        Status: '',
        CardLevel: '',
        WorkType: '',
        WeightNum: 0,
        Cost: 0,
        Currency: 'VND',
        ListCode: '',
        Description: ''
    };

    $scope.modelWF = {
        WorkflowCode: '',
        WfInstCode: '',
        ActInstCode: ''
    };
    //End declare model angualar

    //Declare variable
    $scope.isHideMap = false;

    $rootScope.isAddedCard = true;

    $rootScope.isAceptCard = true;

    $rootScope.IsLock = false;

    $rootScope.isUpdate = false;

    $scope.isSave = true;

    $rootScope.checkList = [];

    $rootScope.statusItem = [];

    var editor;

    $rootScope.isShowPercentItem = true;
    //End declare variable

    //Show hide content
    $scope.showPanelRight = false;
    $scope.showInfoHeader = false;

    $scope.showPanel = function () {
        if ($scope.showPanelRight)
            $scope.showPanelRight = false;
        else
            $scope.showPanelRight = true;
    }

    $scope.showInfo = function () {
        if ($scope.showInfoHeader)
            $scope.showInfoHeader = false;
        else
            $scope.showInfoHeader = true;
    }

    //End show hide content

    //Declare for rollback card
    $scope.rollBack = {
        ListChkItemRollback: [],
        Comment: [],
        ObjectRela: [],
        Products: [],
        Services: [],
        AddressCard: [],
        CardLinks: []
    }

    $scope.ListChkItemRollback = [];

    $scope.rollbackComment = [];

    $scope.rollbackObject = [];

    $scope.rollbackProduct = [];

    $scope.rollbackService = [];

    $scope.rollbackAddress = [];

    $scope.rollbackLinks = [];
    //End declare for rollback card

    //Card title
    $scope.editingCardetailHeaderAuto = function () {
        if ($(".modal-dialog").hasClass("ui-draggable-dragging") == false) {
            $scope.acticeDetailDrag = true;
            var title = document.getElementById("card_000000");
            if (title != null && title != undefined) {
                title.focus()
            }
        } else {
            $scope.acticeDetailDrag = false;
        }
    }
    //End card title

    //Copy card
    $scope.createCard = function () {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmQuestionCard.html',
            windowClass: "message-center",
            backdrop: 'static',
            keyboard: false,
            controller: function ($scope, $uibModalInstance) {
                $scope.message = caption.CJ_MSG_COPY_CARD;
                $scope.ok = function () {
                    $uibModalInstance.close(true);
                };
                $scope.cancel = function () {
                    $uibModalInstance.close(false);
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            if (d) {
                $rootScope.isAddedCard = true;
                dataserviceCardJob.copyCard(para, function (rs) {
                    rs = rs.data;
                    $scope.cardCode = rs.Object.CardCode;
                    $rootScope.CardCode = rs.Object.CardCode;
                    $scope.obj.CardCode = rs.Object.CardCode;
                    $scope.cardName = rs.Object.CardName;
                    if (!rs.Error) {
                        App.toastrSuccess(rs.Title)
                    } else {
                        App.toastrError(rs.Title)
                    }
                    if ($scope.cardCode != '') {
                        $scope.initData();
                    }
                });
            } else {
                $uibModalInstance.close();
            }
        }, function () {

        });
    }
    $scope.createCard();
    //End

    $scope.initData = function () {
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                $scope.cardCode = $scope.model.CardCode;
                $scope.cardName = $scope.model.CardName;
                $scope.obj.Board = rs.Object.Board;
                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                $rootScope.IsLock = $scope.model.IsLock;
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
                $scope.obj.List = rs.Object.List;
                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                dataserviceCardJob.getAllWfInstance(function (rs) {
                    rs = rs.data;
                    $scope.lstWfInst = rs;
                })

                dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.modelWF.WfInstCode = rs;
                    dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                        rs = rs.data;
                        $scope.lstActInstance = rs;
                    })
                })

                //Copy data using to rollback
                $scope.rollBack.CardHeader = angular.copy($scope.model);
                //End copy data using to rollback

                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $rootScope.isAceptCard = true;
                } else {
                    $rootScope.isAceptCard = false;
                }
            }
        });
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            $scope.ListChkItemRollback = angular.copy($rootScope.checklists);
            angular.forEach(rs, function (value, key) {
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                        iterator.Title = decodeHTML(iterator.Title);
                    }
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.comments = rs;
        });
        dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listAddress = rs;
            $scope.rollbackAddress = angular.copy($rootScope.listAddress);
        });
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
            $scope.rollbackObject = angular.copy($rootScope.listID);
        });
        dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardProduct = rs;
            $scope.rollbackProduct = angular.copy($rootScope.listCardProduct);
        });
        dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardService = rs;
            $scope.rollbackService = angular.copy($rootScope.listCardService);
        });
        dataserviceCardJob.permissionHeaderCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.permissionHeaderCard = rs;
        })
        dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (rs.Responsibility === "ROLE_LEADER") {
                $rootScope.isApprove = true;
            }
            else {
                $rootScope.isApprove = false;
            }
        })
        $rootScope.reloadFile();
        var data = {
            cardCode: $rootScope.CardCode,
        }
        dataserviceCardJob.getListLinkCardJob(data, function (rs) {
            rs = rs.data;
            $rootScope.listCardJobLink = rs;
            $scope.rollbackLinks = angular.copy($rootScope.listCardJobLink);
        })

        $scope.acticeDetailDrag = false;
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoards = rs;
        });
        dataserviceCardJob.getLevels(function (rs) {
            rs = rs.data;
            $scope.CardLevels = rs;
        });
        dataserviceCardJob.getWorkType(function (rs) {
            rs = rs.data;
            $scope.WorkTypes = rs;
        });
        dataserviceCardJob.getStatus(function (rs) {
            rs = rs.data;
            $scope.CardStatus = rs;
        });
        dataserviceCardJob.getCurrency(function (rs) {
            rs = rs.data;
            $scope.listCurrency = rs;
        })
        dataserviceCardJob.getProduct(function (rs) {
            rs = rs.data;
            $scope.listProduct = rs;
        });
        dataserviceCardJob.getService(function (rs) {
            rs = rs.data;
            $scope.listService = rs;
        })
        dataserviceCardJob.getUnit(function (rs) { rs = rs.data; $scope.listUnit = rs });
        dataserviceCardJob.getActivityService(function (rs) {
            rs = rs.data;
            $scope.listActivityService = rs;
        });
        dataserviceCardJob.getActivityProduct(function (rs) {
            rs = rs.data;
            $scope.listActivityProduct = rs;
        });
        dataserviceCardJob.hideCost(function (rs) {
            rs = rs.data;
            $scope.isNotVatco = rs;
        })
        dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
            rs = rs.data;
            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')
                var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                $scope.modelShift.In = inTime;
                $scope.modelShift.Out = outTime;

                $scope.timeCheckIn = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss dd/MM/yyyy');
                $scope.timeCheckOut = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss dd/MM/yyyy');

                if (inDate != outDate && outDate != null) {
                    $scope.modelShift.DateIn = inDate;
                    $scope.modelShift.DateOut = outDate;
                    $scope.isSameDate = false;
                } else {
                    $scope.modelShift.DateInOut = inDate;
                    $scope.isSameDate = true;
                }
            }
        })
        setTimeout(function () {
            $scope.editingCardetailHeaderAuto();
        }, 200)
        //$scope.interval = setInterval(sessionCard, 60000);
    }

    //Rollback info card and more
    $scope.rollbackCard = function () {
        debugger
        //$scope.rollBack.CardHeader = $scope.model;
        $scope.rollBack.ListChkItemRollback = $scope.ListChkItemRollback;
        $scope.rollBack.Comment = $scope.rollbackComment;
        $scope.rollBack.ObjectRela = $scope.rollbackObject;
        $scope.rollBack.Products = $scope.rollbackProduct;
        $scope.rollBack.Services = $scope.rollbackService;
        $scope.rollBack.AddressCard = $scope.rollbackAddress;
        $scope.rollBack.CardLinks = $scope.rollbackLinks;
        dataserviceCardJob.rollbackInfoCard($scope.rollBack, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                loadNewData();
            }
        })
    }
    //End rollback info card and more

    //Board, list select 
    $scope.boardSelect = function (boardCode) {
        if ($scope.obj.Board == "") {
            $scope.errorBoard = true;
        }
        else {
            $scope.errorBoard = false;
        }
        $scope.obj.List = "";
        $scope.model.ListCode = "";
        dataserviceCardJob.getLists(boardCode, function (rs) {
            rs = rs.data;
            $scope.Lists = rs;
        });
    };

    $scope.listSelect = function (listCode) {
        if ($scope.obj.List == "") {
            $scope.errorList = true;
        }
        else {
            $scope.errorList = false;
            $scope.model.ListCode = listCode;
            dataserviceCardJob.updateListReal($rootScope.CardCode, $scope.model.ListCode, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    $scope.model.ListCode = "";
                    $scope.obj.List = "";
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.completeBoard = rs.Object.PercentBoard;
                    $scope.completeList = rs.Object.PercentList;
                }
            })
        }
    };
    //End select board, list

    //Insert card
    $scope.saveBuffer = function () {
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
        }
        $scope.acticeDetailDrag = false;

        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
        }

        validationSelect($scope.model);
        if ($scope.addform.validate() && !validationSelect($scope.model).Status) {
            if ($scope.model.CardName.trim() == "" && $scope.model.ListCode == "") {
                return App.toastrError(caption.CJ_CURD_TXT_SEARCH_PLS_CJ_NAME_AND_CATEGORY);
            }
            else if ($scope.model.CardName.trim() == "") {
                return App.toastrError(caption.CJ_CURD_TXT_SEARCH_PLS_CJ_NAME);
            }
            else if ($scope.model.ListCode == "") {
                return App.toastrError(caption.CJ_CURD_TXT_SEARCH_PLS_CATE_NAME);
            }

            if (!$scope.isSave) {
                return;
            }
            else if ($rootScope.IsLock) {
                return App.toastrError("Thẻ việc đã khóa");
            }
            $scope.model.IsApprove = $rootScope.isApprove;
            dataserviceCardJob.updateCardNew($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $rootScope.isUpdate = true;
                    $rootScope.getLogActivity();
                    $scope.isSave = false;
                    //clearInterval($scope.interval);
                    //$scope.interval = setInterval(sessionCard, 60000);
                }
            })
        }
    }

    $scope.update = function () {
        if (!$rootScope.isUpdate) {
            return;
        }
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                editor.setData($scope.model.Description);
                $scope.cardCode = $scope.model.CardCode;
                $scope.cardName = $scope.model.CardName;
                $scope.obj.Board = rs.Object.Board;
                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                $rootScope.IsLock = $scope.model.IsLock;
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
                $scope.obj.List = rs.Object.List;

                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.CreatedBy == userName) {
                    $scope.isAssign = false;
                }
                else if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                dataserviceCardJob.getAllWfInstance(function (rs) {
                    rs = rs.data;
                    $scope.lstWfInst = rs;
                })

                dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.modelWF.WfInstCode = rs;
                    dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                        rs = rs.data;
                        $scope.lstActInstance = rs;
                    })
                })

                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $rootScope.isAceptCard = true;
                } else {
                    $rootScope.isAceptCard = false;
                }
            }
        });
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            angular.forEach(rs, function (value, key) {
                value.CheckTitle = decodeHTML(value.CheckTitle);
                setTimeout(function () {
                    $scope.$apply();
                })
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                        iterator.Title = decodeHTML(iterator.Title);
                    }
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.comments = rs;
        });
        dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listAddress = rs;
        });
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
        });
        dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listCardProduct = rs;
        });
        dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listCardService = rs;
        });
        $rootScope.reloadFile();
    }

    function sessionCard() {
        //dataserviceCardJob.isUpdateNewData($rootScope.CardCode, function (rs) {
        //    rs = rs.data;
        //    if (rs) {
        //        loadNewData();
        //    }
        //})
    }

    function loadNewData() {
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                $scope.cardCode = $scope.model.CardCode;
                $rootScope.Inherit = $scope.model.Inherit;
                editor.setData($scope.model.Description);
                $scope.cardName = $scope.model.CardName;
                $scope.obj.Board = rs.Object.Board;
                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                $rootScope.IsLock = $scope.model.IsLock;
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
                $scope.obj.List = rs.Object.List;
                debugger
                var element = document.getElementById("card_000000");
                element.setAttribute('data-currentvalue', $scope.cardName);
                element.setAttribute('value', $scope.cardName);
                element.value = $scope.cardName;

                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                dataserviceCardJob.getAllWfInstance(function (rs) {
                    rs = rs.data;
                    $scope.lstWfInst = rs;
                })

                dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.modelWF.WfInstCode = rs;
                    dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                        rs = rs.data;
                        $scope.lstActInstance = rs;
                    })
                })
                $scope.disableCkEditer(editor);
                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $rootScope.isAceptCard = true;
                } else {
                    $rootScope.isAceptCard = false;
                }
            }
        });
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            angular.forEach(rs, function (value, key) {
                value.CheckTitle = decodeHTML(value.CheckTitle);
                setTimeout(function () {
                    $scope.$apply();
                })
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                        iterator.Title = decodeHTML(iterator.Title);
                    }
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.comments = rs;
        });
        dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listAddress = rs;
        });
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
        });
        dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardProduct = rs;
        });
        dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardService = rs;
        });
        dataserviceCardJob.permissionHeaderCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.permissionHeaderCard = rs;
        })
        dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (rs.Responsibility === "ROLE_LEADER") {
                $rootScope.isApprove = true;
            }
            else {
                $rootScope.isApprove = false;
            }
        })
        dataserviceCardJob.getCardRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;

            $scope.CardInherit = rs.Inherit;
            $scope.Links = rs.Links;
        })
        dataserviceCardJob.insertListUserView($rootScope.CardCode, function (rs) { })
        dataserviceCardJob.getDataLoggerCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listData = rs;
        });
        $rootScope.reloadFile();
        $rootScope.getLogActivity();
    }
    //End

    //Update directly
    $scope.changeData = function (selectType, value) {
        if (!$rootScope.isAceptCard) {
            return;
        }
        else if ($rootScope.IsLock) {
            return;
        }
        if (selectType == "BeginTime") {
            updateBeginTime();
        }
        else if (selectType == "CardName") {
            updateCardName();
        }
        else if (selectType == "Deadline") {
            updateDeadline();
        }
        else if (selectType == "EndTime") {
            updateEndTime();
        }
        else if (selectType == "Status") {
            updateStatus();
        }
        else if (selectType == "CardLevel") {
            updateCardLevel();
        }
        else if (selectType == "WorkType") {
            updateWorkType();
        }
        else if (selectType == "WeightNum") {
            updateWeightNum();
        }
        else if (selectType == "Cost") {

        }
        else if (selectType == "Currency") {

        }
    }

    function updateCardName() {
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
            if ($scope.model.CardName.trim() == "" || $scope.model.CardName == undefined || $scope.model.CardName == null) {
                return;
            }
            dataserviceCardJob.updateCardNameReal($rootScope.CardCode, $scope.model.CardName, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title)
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $rootScope.getLogActivity();
                }
            })
        }
    }

    function updateBeginTime() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardBegintimeReal($rootScope.CardCode, $scope.model.BeginTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateDeadline() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardDeadlineReal($rootScope.CardCode, $scope.model.Deadline, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateEndTime() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardEndtimeReal($rootScope.CardCode, $scope.model.EndTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateStatus() {
        dataserviceCardJob.updateCardStatusReal($rootScope.CardCode, $scope.model.Status, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateCardLevel() {
        dataserviceCardJob.updateCardLevelReal($rootScope.CardCode, $scope.model.CardLevel, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateWorkType() {
        dataserviceCardJob.updateCardWorkTypeReal($rootScope.CardCode, $scope.model.WorkType, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateWeightNum() {
        dataserviceCardJob.updateWeightNumReal($rootScope.CardCode, $scope.model.WeightNum, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.completeBoard = rs.Object.PercentBoard;
                $scope.completeList = rs.Object.PercentList;
                $rootScope.getLogActivity();
            }
        })
    }

    function updateDescription() {
        debugger
        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            if (!$scope.model.Description) {
                $scope.model.Description = "";
            }
            if ($scope.model.Description.localeCompare(data) != 0) {
                $scope.model.Description = data;
                var data = { CardCode: $rootScope.CardCode, Description: $scope.model.Description };

                dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title)
                    }
                    else {
                        App.toastrSuccess(rs.Title);
                        $rootScope.getLogActivity();
                    }
                })
            }
        }

    }

    CKEDITOR.on('instanceReady', function (evt) {
        var editor = evt.editor,
            body = CKEDITOR.document.getBody();
        $scope.ckEditor = editor;

        editor.on('focus', function () {
        });
        var myListener = function () {
            updateDescription();
        };

        editor.on('blur', myListener);

        //editor.on('destroy', function () {
        //    CKEDITOR.instances['description'].removeAllListeners();
        //});
    });
    //End update directly

    //Editor

    function ckEditer() {
        editor = CKEDITOR.replace('description', {
            cloudServices_tokenUrl: '/MobileApp/Token',
            cloudServices_uploadUrl: '/MobileApp/UploadFile',
            filebrowserBrowseUrl: '',
            filebrowserUploadUrl: '/MobileApp/Upload',
            embed_provider: '/uploader/upload.php'
        });
    }

    $scope.disableCkEditer = function (editor) {

        if (!$rootScope.isAceptCard || $rootScope.IsLock) {
            editor.setReadOnly(true);
        } else {
            editor.setReadOnly(false);
        }
    }
    //End editor

    //View tab
    $scope.idxViewTab = 1;
    $scope.viewTab = function (index) {
        if (!$rootScope.isAddedCard && index != 0) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        $scope.idxViewTab = index;
    }
    //Edn view tab

    //Add member
    $scope.addMember = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        $rootScope.titleModalAssign = 3;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
            controller: 'add-group-or-teamCardJob',
            size: '55',
            resolve: {
                obj: function () {
                    return {
                        CardCode: $rootScope.CardCode,
                        Type: 4
                    };
                }
            },
            backdrop: 'static',
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;

                $rootScope.ItemCheck = rs;
                angular.forEach(rs, function (value, key) {
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.ActivityData = rs;
                if ($rootScope.ActivityData.length > 0) {
                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                        }
                    }
                }
            });
            dataserviceCardJob.getGroupDepartmentAssign($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $scope.lstGrpAssign = rs.Group
                $scope.lstDpmAssign = rs.Dpm
            });
        }, function () {
        });
    };
    //End add member

    //Send notifi
    $scope.sendNotifi = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/send-notifi-card.html',
            controller: 'send-notifi-card',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End send notification

    //Log status
    $scope.viewLogStatus = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-status-log.html',
            controller: 'log-status',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End log status

    //Log workflow
    $scope.viewLogWF = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-activity-wf.html',
            controller: 'log-activity-wf',
            backdrop: 'static',
            size: '50',
            resolve: {
                para: function () {
                    var obj = { WfInstCode: $scope.modelWF.WfInstCode, CardCode: $rootScope.CardCode };
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    }
    //End

    //Show log accept, reject
    $scope.showLogActivity = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-user-activity.html',
            controller: 'log-user-activity',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End

    //Update activity
    $scope.updateActivity = function (value, isCheck) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        if (isCheck) {
            var activity = $scope.activity.find(function (element) {
                if (element.Value != value && element.Value != 0) return true;
            });
            if (activity) {
                activity.IsCheck = false;
            }
            if (value == 2 && isCheck) {
                $rootScope.isAceptCard = true;
                dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var activity = $scope.activity.find(function (element) {
                            if (element.Value == value) return true;
                        });
                        if (activity) {
                            activity.Date = rs.Object.Date;
                            activity.Time = rs.Object.Time;
                        }
                        App.toastrSuccess(rs.Title);
                        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.activity = rs;
                            if ($scope.activity.length > 0) {
                                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                    $rootScope.isAceptCard = true;
                                } else {
                                    $rootScope.isAceptCard = false;
                                }
                            }
                        });
                        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }
                });
            }
            else if (value == 1 && isCheck) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/add-reason-reject.html',
                    controller: 'add-reason-reject',
                    backdrop: 'static',
                    size: '25',
                    keyboard: false,
                    windowClass: "modal-position",
                    resolve: {
                        para: function () {
                            return {
                                Value: value,
                                CardCode: $rootScope.CardCode
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.activity = rs;
                        if ($scope.activity.length > 0) {
                            if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                $rootScope.isAceptCard = true;
                            } else {
                                $rootScope.isAceptCard = false;
                            }
                        }
                    });
                }, function () { });
            }
            else {
                $rootScope.isAceptCard = false;
                dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var activity = $scope.activity.find(function (element) {
                            if (element.Value == value) return true;
                        });
                        if (activity) {
                            activity.Date = rs.Object.Date;
                            activity.Time = rs.Object.Time;
                        }
                        App.toastrSuccess(rs.Title);
                        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.activity = rs;
                            if ($scope.activity.length > 0) {
                                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                    $rootScope.isAceptCard = true;
                                } else {
                                    $rootScope.isAceptCard = false;
                                }
                            }
                        });
                        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }
                });
                $rootScope.getLogActivity();
            }
            $scope.disableCkEditer(editor);
        }
        else {
            $rootScope.isAceptCard = false;
            dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    var activity = $scope.activity.find(function (element) {
                        if (element.Value == value) return true;
                    });
                    if (activity) {
                        activity.Date = rs.Object.Date;
                        activity.Time = rs.Object.Time;
                    }
                    App.toastrSuccess(rs.Title);
                    dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.activity = rs;
                        if ($scope.activity.length > 0) {
                            if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                $rootScope.isAceptCard = true;
                            } else {
                                $rootScope.isAceptCard = false;
                            }
                        }
                    });
                    dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                }
            });
        }
    }
    //end

    //Start validate
    $scope.changeSelect = function (selectType, item) {
        if (selectType === "Status") {
            if ($scope.model.Status == "") {
                $scope.errorStatus = true;
            }
            else {
                $scope.errorStatus = false;
            }
        }
    }

    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.Status == "") {
            $scope.errorStatus = true;
            mess.Status = true;
        } else {
            $scope.errorStatus = false;
        }

        if (data.WfType == "") {
            $scope.errorWfType = true;
            mess.Status = true;
        } else {
            $scope.errorWfType = false;
        }

        return mess;
    };
    //End validate

    //Lock card
    $scope.lockCard = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        else if (!$scope.permissionHeaderCard) {
            return App.toastrError("Bạn không có quyền thực hiện chức năng này");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        var value = false;
        if (!$scope.model.IsLock) {
            value = true;
        }
        dataserviceCardJob.lockCard($rootScope.CardCode, value, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.model = rs.Object.CardDetail;
                        $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                        $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                        $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                        //$scope.updateCardName("card_000000");
                        setTimeout(function () {
                            $scope.disableCkEditer(editor);
                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                        }, 500);
                    }
                });
                if (value) {
                    $rootScope.IsLock = true;
                }
                else {
                    $rootScope.IsLock = false;
                }
            }
        })
    }
    //End

    //Workflow
    $scope.IsCreateWF = false;

    $scope.changeWorkFlow = function () {
        isChange = true;
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmQuestion.html',
            windowClass: "message-center",
            resolve: {
                params: function () {
                    return {
                        CardCode: $rootScope.CardCode,
                        WfCode: $scope.modelWF.WorkflowCode
                    };
                }
            },
            controller: function ($scope, $uibModalInstance, params) {
                $scope.message = caption.CJ_MSG_QUESTION_CREATE_WF;
                $scope.ok = function () {
                    dataserviceCardJob.createInstanceWF(params.WfCode, params.CardCode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);

                            $rootScope.wfInstance = rs.Object.WfInstCode;
                            $uibModalInstance.close();
                            dataserviceCardJob.insertInstRunning(rs.Object.WfInstCode, rs.Object.WorkflowCode, function (rs) { })
                        }
                    })
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.modelWF.WfInstCode = $rootScope.wfInstance;
            dataserviceCardJob.getActInstCard($rootScope.wfInstance, $rootScope.CardCode, function (rs) {
                rs = rs.data;
                $scope.lstActInstance = rs;
            })
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;
                $rootScope.ItemCheck = rs;
                angular.forEach(rs, function (value, key) {
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            $scope.IsCreateWF = false;
            dataserviceCardJob.getAllWfInstance(function (rs) {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }, function () {
        });
    }

    $scope.checkCreateWF = function () {
        if (!$rootScope.isAddedCard) {
            $scope.IsCreateWF = false;
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        if ($scope.IsCreateWF) {
            dataserviceCardJob.checkWfInstCard($rootScope.CardCode, function (rs) {
                rs = rs.data;
                if (rs) {
                    $scope.IsCreateWF = false;
                    return App.toastrError(caption.CJ_MSG_CARD_HAS_WF);
                }
                dataserviceCardJob.getWorkFlow(function (rs) {
                    rs = rs.data;
                    $scope.listWorkFlow = rs;
                })
            })
        }
        else {
            dataserviceCardJob.getWfInst($rootScope.CardCode, function () {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }
    }

    $scope.changeActInst = function () {
        var data = {
            ActInstCode: $scope.modelWF.ActInstCode,
            WfInstCode: $scope.modelWF.WfInstCode,
            ObjectInst: $rootScope.CardCode,
            ObjectType: "CARD_JOB",
        };
        dataserviceCardJob.insertObjectProcess(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.lstActInstance = rs;
                })
            }
        })
    }
    //End workflow

    //add-card-inherit, card-link
    $scope.addInheritLink = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-link.html',
            controller: 'add-card-link',
            windowClass: "message-center",
            size: '35',
            backdrop: 'static',
            resolve: {
                cardJob: function () {
                    return {
                        cardCode: $rootScope.CardCode,
                        cardName: $scope.model.CardName,
                        Inherit: $scope.model.Inherit
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getCardRelative($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $scope.CardInherit = rs.Inherit;
                $scope.Links = rs.Links;
            })
            $scope.model.Inherit = $rootScope.CardInherit.Code;
        });
    }
    //End

    //Add list/board
    $scope.addBoard = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-board.html',
            controller: 'add-boardCardJob',
            size: '30',
            backdrop: 'static'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListBoard(function (rs) {
                rs = rs.data;
                $scope.listBoards = rs;
            });
        }, function () { });
    };
    $scope.addList = function (board) {
        if (board == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_TABLE_WORKING);
        } else {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/add-list.html',
                controller: 'add-listCardJob',
                backdrop: 'static',
                size: '25',
                resolve: {
                    para: function () {
                        return board;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
            }, function () { });
        }
    }
    //End

    //Push trash
    $scope.pushTrash = function () {
        dataserviceCardJob.changeCardStatus($rootScope.CardCode, "TRASH", function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(caption.COM_DELETE_SUCCESS);
                //clearInterval($scope.interval);
                $uibModalInstance.close();
                $rootScope.reloadGridCard();
            }
        });
    }
    //End

    //End show, hide header card
    function loadDate() {
        $("#startDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            dateFormat: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#deadline').datepicker('setStartDate', maxDate);
            $('#endDate').datepicker('setStartDate', maxDate);
        });
        $("#endDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.Deadline != "") {
                const [day, month, year] = $scope.model.Deadline.split("/")
                var deadLine = new Date(year, month - 1, day)
                if (maxDate > deadLine) {
                    $('#startDate').datepicker('setEndDate', deadLine);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
        $("#deadline").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.EndTime != "") {
                const [day, month, year] = $scope.model.EndTime.split("/")
                var endTime = new Date(year, month - 1, day)
                if (maxDate > endTime) {
                    $('#startDate').datepicker('setEndDate', endTime);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
    }

    function validateDefaultDate(startDate, endDate, deadline) {

        setStartDate("#endDate", startDate);
        setStartDate("#deadline", startDate);
        //setEndDate
        const [dayDead, monthDead, yearDeal] = deadline.split("/")
        var deadTime = new Date(yearDeal, monthDead - 1, dayDead)
        if (endDate != "") {
            const [day, month, year] = endDate.split("/")
            var endTime = new Date(year, month - 1, day)
            if (endTime > deadTime) {
                setEndDate("#startDate", deadline)
            }
            else {
                setEndDate("#startDate", endDate)
            }
        }
        else {
            setEndDate("#startDate", deadline)
        }
    }

    setTimeout(function () {
        ckEditer();
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);

    $scope.getSafehtml = function (description) {
        var tmp = document.createElement("DIV");
        tmp.innerHTML = description;
        return tmp.textContent || tmp.innerText || "";
    }

    $scope.addCommonSettingWorkType = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'OBJ_WORKTYPE',
                        GroupNote: 'Kiểu công việc',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getWorkType(function (rs) {
                rs = rs.data;
                $scope.WorkTypes = rs;
            });
        }, function () { });
    }

    $scope.addCommonSettingCardLevel = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'LEVEL',
                        GroupNote: 'Độ ưu tiên',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getLevels(function (rs) {
                rs = rs.data;
                $scope.CardLevels = rs;
            });
        }, function () { });
    }

    $scope.addProductActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_PRODUCT',
                        GroupNote: 'Hoạt động sản phẩm',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityProduct(function (rs) {
                rs = rs.data;
                $scope.listActivityProduct = rs;
            })
        }, function () { });
    }

    $scope.addSeriveActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_SERVICE',
                        GroupNote: 'Hoạt động dịch vụ',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityService(function (rs) {
                rs = rs.data;
                $scope.listActivityService = rs;
            });
        }, function () { });
    }
});

app.controller('add-card-link', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, dataserviceCardJob) {
    $scope.model = {
        CardLink: '',
        Id: -1
    }

    $scope.listCardJob = [];

    $rootScope.listCardJobLink = [];

    $scope.initload = function () {
        dataserviceCardJob.getAllCardJob(function (rs) {
            rs = rs.data;
            $scope.listCardJob = rs;
        });

        dataserviceCardJob.getInherit($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listInherit = rs;
        })

        var data = {
            cardCode: $rootScope.CardCode,
        }

        dataserviceCardJob.getListLinkCardJob(data, function (rs) {
            rs = rs.data;
            $rootScope.listCardJobLink = rs;
        })
    }

    $scope.initload();

    $scope.add = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        validationSelect($scope.model);
        var data = { cardCode: $rootScope.CardCode, cardLink: $scope.model.CardLink }
        if (!validationSelect($scope.model).Status) {
            dataserviceCardJob.insertLinkCardJob(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.initload();
                    $rootScope.getLogActivity();
                }
            });
        }
    }

    //Inherit
    $scope.changeInherit = function (code) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceCardJob.updateCardInheritReal($rootScope.CardCode, code, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
        $rootScope.CardInherit.Code = code;
    }

    $scope.addCardInherit = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-inherit.html',
            controller: 'add-card-inherit',
            windowClass: "message-center",
            size: '35',
            resolve: {
                cardJob: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            var data = {
                cardCode: $rootScope.CardCode,
            }

            dataserviceCardJob.getListLinkCardJob(data, function (rs) {
                rs = rs.data;
                $rootScope.listCardJobLink = rs;
            })
        });
    }

    $scope.delete = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceCardJob.deleteCardLink(id, function (rs) {
            rs = rs.data;

            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initload();
                $rootScope.getLogActivity();
            }
        });
    }

    $scope.changeSelect = function (SelectType) {
        if (SelectType == "CardLink" && $scope.model.CardLink != "") {
            $scope.errorCardLink = false;
        }
    }

    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        //Check null 
        if (data.CardLink == "") {
            $scope.errorCardLink = true;
            mess.Status = true;
        } else {
            $scope.errorCardLink = false;
        }
        return mess;
    };

});

app.controller('detail', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, para) {
    var vm = $scope;
    $scope.model = {
        CodeSet: '',
        ValueSet: '',
        AssetCode: para.AssetCode,
        Group: para.Group,
        GroupNote: para.GroupNote
    }
    $scope.listDataType = [];
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CommonSetting/JTableDetail/",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.SettingGroup = para.Group;
            },
            complete: function () {
                App.unblockUI("#contentMain");
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(pageLength)
        .withOption('order', [2, 'asc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row).contents())($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
            $(row).find('td:not(:has(label.mt-checkbox))').on('click', function (evt) {
                var self = $(this).parent();
                if ($(self).hasClass('selected')) {
                    $(self).removeClass('selected');
                    resetInput();
                } else {
                    $('#tblDataDetail').DataTable().$('tr.selected').removeClass('selected');
                    $(self).addClass('selected');
                    $scope.model.CodeSet = data.CodeSet;
                    $scope.model.ValueSet = data.ValueSet;
                    $scope.model.Type = data.Type;
                }
                $scope.$apply();
            });
        });

    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("SettingID").withTitle(titleHtml).notSortable()
        .renderWith(function (data, type, full, meta) {
            $scope.selected[full.SettingID] = false;
            return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.SettingID + ']" ng-click="toggleOne(selected)"/><span></span></label>';
        }).withOption('sWidth', '30px').withOption('sClass', 'tcenter hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('_STT').withTitle('{{"CJ_LIST_COL_STT" | translate}}').notSortable().withOption('sWidth', '30px').withOption('sClass', 'tcenter w50').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('ValueSet').withTitle('{{"CJ_LIST_COL_VALUE_SET" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('TypeName').withTitle('{{"CJ_LIST_COL_TYPE_DATA" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedTime').withTitle('{{"CJ_COL_CREATE_DATE" | translate}}').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedBy').withTitle('{{"CJ_COL_CREATE_BY" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('action').notSortable().withOption('sClass', 'nowrap text-center').withTitle('{{"COM_LIST_COL_ACTION" | translate}}').renderWith(function (data, type, full) {
        return '<a title="Xoá" ng-click="delete(' + full.SettingID + ')" style1="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline red"><i class="fas fa-trash-alt fs20"></i></a>';
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};
    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }
    function resetInput() {
        $scope.model.CodeSet = '';
        $scope.model.ValueSet = ''
    }
    $scope.reload = function () {
        reloadData(true);
    }
    $scope.reloadNoResetPage = function () {
        reloadData(false);
    }
    $scope.init = function () {
        dataserviceCardJob.getDataTypeCommon(function (rs) {
            rs = rs.data;
            $scope.listDataType = rs;
        });
    }
    $scope.init();
    $scope.add = function () {

        if ($scope.model.ValueSet == '') {
            App.toastrError(caption.CP_CURD_MSG_SETTING_NOT_BLANK);
        } else if ($scope.model.ValueSet.length > 255) {
            App.toastrError("Vui lòng nhập giá trị cài đặt nhỏ hơn 255 ký tự");
        } else {
            dataserviceCardJob.insertCommonSetting($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    reloadData(true);
                }
            })
        }
    }
    $scope.edit = function () {
        if ($scope.model.CodeSet == '') {
            App.toastrError(caption.CP_CURD_MSG_DATA_NOT_BLANK)
        } else if ($scope.model.ValueSet.length > 255) {
            App.toastrError("Vui lòng nhập giá trị cài đặt nhỏ hơn 255 ký tự");
        } else {
            dataserviceCardJob.updateCommonSetting($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    reloadData(true);
                    resetInput();
                }
            })
        }
    }
    $scope.delete = function (id) {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            controller: function ($scope, $uibModalInstance) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteCommonSetting(id, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);
                            $uibModalInstance.close();
                        }
                    });
                };

                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.reloadNoResetPage();
        }, function () {
        });
    }
    $scope.cancel = function () {
        //$uibModalInstance.dismiss('cancel');
        $uibModalInstance.close();
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('show-gantt', function ($scope, $rootScope, dataserviceCardJob, $uibModal, $uibModalInstance, $filter) {
    //----libary dhtmlx https://docs.dhtmlx.com/gantt/desktop__localization.html-----
    $scope.model = {
        ContractCode: '',
        BoardCode: '',
        ListCode: '',
        CardName: ''
    }
    $scope.cancel = function () {
        $uibModalInstance.close('cancel');
    };
    $scope.messageInfomation = {
        Contact: '',
        Start: '',
        End: ''
    }
    var contracts_milestones_critical = {
        data: [],
        links: []
    }
    var toggleCritical = function () {
        if (gantt.config.highlight_critical_path)
            gantt.config.highlight_critical_path = !true;
        else
            gantt.config.highlight_critical_path = true;
        gantt.render();
    }
    var weekScaleTemplate = function (date) {
        var dateToStr = gantt.date.date_to_str("%d %M");
        var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
        return dateToStr(date) + " - " + dateToStr(endDate);
    };
    $scope.adventProFont = "";
    $scope.initLoad = function () {
        dataserviceCardJob.getTrueTypeFont(function (rs) {
            $scope.adventProFont = rs.data;
            console.log($scope.adventProFont);
        })
        dataserviceCardJob.searchProgress($rootScope.boardCode, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                if (rs.Object != null && rs.Object.ListProgress.length != 0) {
                    if (rs.Object.DetailBoard != null) {
                        $scope.messageInfomation.Contact = rs.Object.DetailBoard.BoardName;
                        $scope.messageInfomation.Start = rs.Object.DetailBoard.StartTime;
                        $scope.messageInfomation.End = rs.Object.DetailBoard.EndTime;
                    }
                    loadData(rs.Object.DetailBoard, rs.Object.ListProgress);
                    configGantt();
                } else {
                    App.toastrError(caption.CJ_MSG_NOT_FOUND_PROGRESS_FOR_BOARD);
                }
            }
        });
    }
    $scope.initLoad();
    $scope.search = function () {
        dataserviceContractProgress.searchProgress($scope.model.ContractCode, function (rs) {
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                if (rs.Object != null && rs.Object.ListProgress.length != 0) {
                    //gantt.clearAll();
                    if (rs.Object.DetailContract != null) {
                        $scope.messageInfomation.Contact = rs.Object.DetailContract.Title;
                        $scope.messageInfomation.Start = rs.Object.DetailContract.StartTime;
                        $scope.messageInfomation.End = rs.Object.DetailContract.EndTime;
                    }
                    loadData(rs.Object.DetailContract, rs.Object.ListProgress);
                } else {
                    App.toastrError(caption.CPR_VALIDATE_NOT_FIND_PROGRESS);
                }
            }
        });
    }
    function setMaxHeightGantt() {
        var gantt = $("#contractGantt").position().top;
        var maxHeightGantt = $(window).height() - gantt - 150;
        $("#contractGantt").css({
            'max-height': maxHeightGantt,
            'height': maxHeightGantt,
            'overflow': 'auto',
        });
    }
    $scope.ganttChart = {};
    $scope.excelExport = function () {
        if ($scope.ganttChart) {
            $scope.ganttChart.excelExport();
        }
    };
    $scope.pdfExport = function () {
        if ($scope.ganttChart) {
            var exportProperties = {
                ganttStyle: {
                    font: new ej.pdfexport.PdfTrueTypeFont($scope.adventProFont, 12),
                },
            };
            $scope.ganttChart.pdfExport(exportProperties);
        }
    };
    $scope.middleDay = "";
    $scope.count = 0;
    $scope.totalDay = 0;
    $scope.listData = [];
    $scope.dataBound = function () {
        var middleDay = moment($scope.middleDay).format("MM/DD/YYYY");
        console.log(middleDay);
        $scope.ganttChart.scrollToDate(middleDay);
    }
    var example = {
        "ListProgress": [
            {
                "CardID": 117024,
                "CardCode": "117024",
                "CardName": "Test bug 4.1",
                "BeginTime": "04/01/2023",
                "Completed": 0
            }
        ],
        "DetailBoard": {
            "BoardID": 2603,
            "BoardName": "phòng hành chính",
            "StartTime": "15/12/2022",
            "EndTime": "20/12/2022",
            "Duration": 5,
            "Completed": 0
        }
    };
    function loadData(board, data) {
        if ($scope.count >= 10 && $scope.middleDay == "") {
            $scope.middleDay = new Date($scope.totalDay / $scope.count).toISOString();
            console.log($scope.middleDay);
        }
        var parent = {
            TaskID: board.BoardID,
            TaskName: board.BoardName,
            StartDate: moment(board.StartTime, 'DD/MM/YYYY').toDate(),
            EndDate: moment(board.EndTime, 'DD/MM/YYYY').toDate(),
            // Duration: board.Duration,
            // Progress: board.Completed.toFixed(2),
            // open: true,
            subtasks: []
        }
        $scope.totalDay += (parent.StartDate.valueOf() + parent.EndDate.valueOf()) / 2;
        console.log(new Date((parent.StartDate.valueOf() + parent.EndDate.valueOf()) / 2));
        $scope.count++;
        for (var i = 0; i < data.length; i++) {
            var child = {
                TaskID: data[i].CardCode,
                TaskName: data[i].CardName,
                StartDate: moment(data[i].BeginTime, 'DD/MM/YYYY').toDate(),
                EndDate: moment(data[i].Deadline, 'YYYY-MM-DD').toDate(),
                //Duration: data[i].Duration,
                Progress: data[i].Completed.toFixed(2),
                // parent: parent.id,
                // open: true
            }
            parent.subtasks.push(child);
            $scope.count++;
            $scope.totalDay += (child.StartDate.valueOf() + child.EndDate.valueOf()) / 2;
            console.log(new Date((child.StartDate.valueOf() + child.EndDate.valueOf()) / 2));
        }

        $scope.listData.push(parent);
    }
    function configGantt() {
        var gantt = $("#contractGantt").position().top;
        var maxHeightGantt = $(window).height() - gantt - 150;
        $scope.ganttChart = new ej.gantt.Gantt({
            dataSource: $scope.listData,
            height: maxHeightGantt + 'px',
            taskFields: {
                id: 'TaskID',
                name: 'TaskName',
                startDate: 'StartDate',
                duration: 'Duration',
                progress: 'Progress',
                dependency: 'Predecessor',
                child: 'subtasks',
            },
            allowExcelExport: true,
            allowPdfExport: true,
            dataBound: $scope.dataBound
        });
        $scope.ganttChart.appendTo('#contractGantt');
    }
    //function loadData(board, data) {

    //    contracts_milestones_critical.data = [];
    //    var parent = {
    //        id: board.BoardID,
    //        text: board.BoardName,
    //        start_date: board.StartTime,
    //        duration: board.Duration,
    //        progress: board.Completed,
    //        open: true
    //    }
    //    contracts_milestones_critical.data.push(parent);
    //    for (var i = 0; i < data.length; i++) {
    //        var child = {
    //            id: data[i].CardCode,
    //            text: data[i].CardName,
    //            start_date: data[i].BeginTime,
    //            duration: data[i].Duration,
    //            progress: data[i].Completed,
    //            parent: parent.id,
    //            open: true
    //        }
    //        contracts_milestones_critical.data.push(child);
    //    }
    //    configGantt();
    //}
    function validationSelect(data) {
        var mess = { Status: false, Title: "" };
        if (data.ContractCode == "") {
            $scope.errorContractCode = true;
            mess.Status = true;
        } else {
            $scope.errorContractCode = false;
        }
        if (data.BoardCode == "") {
            $scope.errorBoardCode = true;
            mess.Status = true;
        } else {
            $scope.errorBoardCode = false;
        }
        if (data.ListCode == "") {
            $scope.errorListCode = true;
            mess.Status = true;
        } else {
            $scope.errorListCode = false;
        }
        if (data.CardName == "") {
            $scope.errorCardName = true;
            mess.Status = true;
        } else {
            $scope.errorCardName = false;
        }
        return mess;
    };
    setTimeout(function () {
        setMaxHeightGantt();
    }, 50);
});

app.controller('addService', function ($scope, $rootScope, $compile, $uibModal, $confirm, $uibModalInstance, dataserviceCardJob) {
    $scope.model = {
        ServiceGroup: '',
        ServiceType: '',
        Unit: ''
    }
    $scope.ServiceCategoryParent = [];
    $scope.ServiceCategoryGroup = [];
    $scope.ServiceCategoryType = [];

    $scope.initLoad = function () {
        $rootScope.ServiceCode = '';
        dataserviceCardJob.getServiceCategoryParent(function (rs) {
            rs = rs.data;
            $scope.ServiceCategoryParent = rs;
        });
        dataserviceCardJob.getServiceUnit(function (rs) {
            rs = rs.data;
            $rootScope.ServiceUnitData = rs;
            $scope.model.Unit = rs.length != 0 ? rs[0].Code : '';
        });
        dataserviceCardJob.getServiceCategoryGroup(function (rs) {
            rs = rs.data;
            $scope.ServiceCategoryGroup = rs;
        });
        dataserviceCardJob.getServiceCategoryType(function (rs) {
            rs = rs.data;
            $scope.ServiceCategoryType = rs;
        });
    }
    $scope.initLoad();
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }
    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.addform.validate() && !validationSelect($scope.model).Status) {

            if ($rootScope.ServiceCode == '') {
                dataserviceCardJob.insert($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        App.toastrSuccess(rs.Title);
                        $rootScope.ServiceCode = $scope.model.ServiceCode;
                        $rootScope.reload();
                    }
                });
            } else {
                dataserviceCardJob.update($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $rootScope.reload();
                    }
                });
            }
        }
    }
    $scope.changleSelect = function (SelectType) {
        if (SelectType == "ServiceType" && $scope.model.ServiceType != "") {
            $scope.errorServiceType = false;
        }
        if (SelectType == "ServiceGroup" && $scope.model.ServiceGroup != "") {
            $scope.errorServiceGroup = false;
        }
        //if (SelectType == "Unit" && $scope.model.Unit != "") {
        //    $scope.errorUnit = false;
        //}
    }
    $scope.addCommonSettingUnit = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SERVICE_UNIT',
                        GroupNote: 'Đơn vị dịch vụ',
                        AssetCode: 'SERVICE'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getServiceUnit(function (rs) {
                rs = rs.data;
                $rootScope.ServiceUnitData = rs;
            });
        }, function () { });
    }

    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.ServiceType == "") {
            $scope.errorServiceType = true;
            mess.Status = true;
        } else {
            $scope.errorServiceType = false;
        }
        if (data.ServiceGroup == "") {
            $scope.errorServiceGroup = true;
            mess.Status = true;
        } else {
            $scope.errorServiceGroup = false;
        }
        //if (data.Unit == "") {
        //    $scope.errorUnit = true;
        //    mess.Status = true;
        //} else {
        //    $scope.errorUnit = false;
        //}
        return mess;
    };
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('tabAttribute', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter) {
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    $scope.model = {};
    $rootScope.isEditAttribute = false;

    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/ServiceCategory/JTableAttributeMore",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.ServiceCode = $rootScope.ServiceCode;
            },
            complete: function () {
                App.unblockUI("#contentMain");
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(5)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row))($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle(titleHtml).notSortable().renderWith(function (data, type, full, meta) {
        $scope.selected[full.Id] = false;
        return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-click="toggleOne(selected)"/><span></span></label>';
    }).withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('AttributeCode').withTitle('{{"SVC_CURD_TAB_ATTRIBUTE_COL_ATTRIBUTE_CODE" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('AttributeName').withTitle('{{"SVC_CURD_TAB_ATTRIBUTE_COL_ATTRIBUTE_NAME" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('AttributeValue').withTitle('{{"SVC_CURD_TAB_ATTRIBUTE_COL_ATTRIBUTE_VALUE" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FieldType').withTitle('{{"SVC_CURD_TAB_ATTRIBUTE_COL_FIELD_TYPE" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('Note').withTitle('{{"SVC_LIST_COL_NOTE" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('action').withTitle('{{"SVC_CURD_TAB_ATTRIBUTE_COL_ACTION" | translate}}').withOption('sWidth', '40px').renderWith(function (data, type, full) {
        return '<button title="Sửa" ng-click="edit(' + full.Id + ')" style = "width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit"></i></button>' +
            '<button title="Xoá" ng-click="delete(' + full.Id + ')" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline red"><i class="fa fa-trash"></i></button>';
    }).withOption('sClass', 'col50'));
    vm.reloadData = reloadData;
    vm.dtInstance = {};

    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }
    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }
    function callback(json) {

    }
    $scope.reload = function () {
        reloadData(true);
    }
    $rootScope.reloadAttribute = function () {
        $scope.reload();
    }
    $scope.add = function () {
        if ($scope.addform.validate()) {
            $scope.model.ServiceCode = $rootScope.ServiceCode;
            dataserviceCardJob.insertAttributeMore($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $rootScope.reloadAttribute();
                }
            })
        }
    }
    $scope.edit = function (id) {
        dataserviceCardJob.getDetailAttributeMore(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                $scope.model = rs.Object;
                $rootScope.isEditAttribute = true;
            }
        })
    }
    $scope.submit = function () {
        if ($scope.addform.validate()) {
            $scope.model.ServiceCode = $rootScope.ServiceCode;
            dataserviceCardJob.updateAttributeMore($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $rootScope.isEditAttribute = false;
                    $rootScope.reloadAttribute();
                    $uibModalInstance.close(rs.Object);
                }
            })
        }
    }
    $scope.cancel = function () {
        $rootScope.isEditAttribute = false;
        $scope.model = '';
    }
    $scope.delete = function (id) {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            controller: function ($scope, $uibModalInstance) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;//"Bạn có chắc chắn muốn xóa?";
                $scope.ok = function () {
                    dataserviceCardJob.deleteAttributeMore(id, function (result) {
                        result = result.data;
                        if (result.Error) {
                            App.toastrError(result.Title);
                        } else {
                            App.toastrSuccess(result.Title);
                            $rootScope.reloadAttribute();
                            $rootScope.isEditAttribute = false;
                            $uibModalInstance.close();
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    }
});

app.controller('addOrderRQ', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, $filter) {
    $scope.entities = [{
        name: 'Thấp',
        checked: true,
        value: 0,
    }, {
        name: 'Trung bình',
        checked: false,
        value: 1,
    }, {
        name: 'Rất cao',
        checked: false,
        value: 2,
    }]
    $scope.key = '';
    var fileId = -1;
    $scope.model = {
        Title: '',
        Content: '',
        Phone: '',
        Email: '',
        Priority: '',
        RequestTime: '',
        Keyword: '',
        ListFile: [],
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.addKey = function () {
        var str = $("#key").val();
        if (str != '') {
            $("#key").val("");
            $('#Key input').val(str);

            e = jQuery.Event("keypress");
            e.which = 13;
            $("#Key input").keypress(function () {
            }).trigger(e);
        } else {
            //App.toastrError("Vui lòng nhập từ khóa");
            App.toastrError(caption.ORR_MSG_INPUT_INFOMATION);
        }
    }
    $scope.googleSearch = function (id) {
        dataserviceCardJob.getAutocomplete($scope.key, function (rs) {
            rs = rs.data;
            if (rs.length != 0) {
                $('#' + id).autocomplete({
                    source: rs
                });
            } else {
                var str = document.getElementById(id).value;
                $.getJSON("https://suggestqueries.google.com/complete/search?callback=?",
                    {
                        "hl": "vi",
                        "q": str,
                        "client": "chrome"
                    }
                )
                    .done(function (data) {
                        data[1].length = 7;
                        $('#' + id).autocomplete({
                            source: data[1]
                        });
                    });
            }
        });
    }
    $scope.updateSelection = function (position, entities) {
        angular.forEach(entities, function (subscription, index) {
            if (position != index) {
                subscription.checked = false;
            }
        });
    }
    $scope.isMasterFile = function (position, files) {

        angular.forEach(files, function (file, index) {
            if (position != index) {
                //file.checked = false;
                file.IsMaster = false;
                $scope.model.IsMaster = false;
                file.IsMaster = $scope.model.IsMaster;
            } else {
                //file.checked = true;
                file.IsMaster = true;
                $scope.model.IsMaster = true;
                file.IsMaster = $scope.model.IsMaster;
            }
        })
    }
    $scope.uploadFile = function (event) {
        var files = event.target.files;
        var idxDot = files[0].name.lastIndexOf(".") + 1;
        var name = files[0].name.substr(0, idxDot - 1).toLowerCase();
        var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
        var exist = false;
        for (var i = 0; i < $scope.model.ListFile.length; i++) {
            if ($scope.model.ListFile[i].FileName == name) {
                exist = true;
            }
        }
        if (exist) {
            App.toastrError(caption.COM_MSG_FILE_EXISTS);
        } else {
            var formData = new FormData();
            formData.append("file", files[0]);
            dataserviceCardJob.uploadFile(formData, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    var input = $("#File");
                    input.replaceWith(input.val('').clone(true));
                    $scope.file = {
                        Id: fileId++,
                        FileName: name,
                        FileType: extFile,
                        //User: rs.Object != null ? rs.Object.User : null,
                        //CreatedTime: new Date(),
                        FilePath: rs.Object != null ? rs.Object.Source : null
                    }
                    $scope.model.ListFile.push($scope.file);
                    App.toastrSuccess(rs.Title);
                }
            })
        }
    };
    $scope.deleteFile = function (index) {
        $scope.model.ListFile.splice(index, 1);
        App.toastrSuccess(caption.COM_MSG_DELETE_SUCCESS.replace('{0}', caption.COM_FILE));
    }
    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.addform.validate() && validationSelect($scope.model).Status == false) {
            var msg = $rootScope.checkData($scope.model);
            if (msg.Status) {
                App.toastrError(msg.Title);
                return;
            }
            var getPriority = $scope.entities.find(function (element) {
                if (element.checked == true) return true;
            });
            if (getPriority) {
                $scope.model.Priority = getPriority.value;
            }
            dataserviceCardJob.insertOrderRQ($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    setTimeout(function () {
        $("#requestTime").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        });
        $('.tag-input').tagsinput();
        setModalDraggable('.modal-dialog');
        setModalMaxHeight('.modal');
    }, 200);
    function validationSelect(data) {
        var mess = { Status: false, Title: "" };

        if (data.Phone && !$rootScope.partternPhone.test(data.Phone)) {
            $scope.errorPhone = true;
            mess.Status = true;
        } else {
            $scope.errorPhone = false;
        }

        return mess;
    };
});

app.controller('addMaterialProduct', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, para) {
    $scope.cancel = function () {
        //$uibModalInstance.dismiss('cancel');
        $uibModalInstance.close();
    }
    $rootScope.ProductCode = '';
    $scope.inheritances = [];
    $scope.productCategoryTypes = [];
    $scope.productTypes = [];
    $scope.productImpType = [];
    $rootScope.ProductID = '';
    $scope.model = {
        FileName: '',
        ProductGroup: '',
        Unit: '',
        ProductCode: '',
        TypeCode: '',
        GroupCode: '',
        PricePerM: 0,
        PricePerM2: 0,
        ForecastInStock: 0,
        sForeCastTime: ''
    };
    $rootScope.isShowInheritance = true;
    //$scope.ImageBase1 = $rootScope.BarDefault;
    //$scope.ImageBase = $rootScope.QrDefault;
    $scope.ImageBase = '';
    $scope.ImageBase1 = '';
    $scope.initData = function () {
        dataserviceCardJob.gettreedataLevel(function (result) {
            result = result.data;
            $scope.treedataLevel = result;
        });
        dataserviceCardJob.getProductImpType(function (result) {
            result = result.data;
            $scope.productImpType = result;
        });
        dataserviceCardJob.getproductgroup(function (result) {
            result = result.data;
            $scope.productgroup = result;
        });
        dataserviceCardJob.getInheritances($scope.model.ProductCode, function (result) {
            result = result.data;
            $scope.inheritances = result;
        });
        dataserviceCardJob.getProductTypes(function (result) {
            result = result.data;
            $scope.productTypes = result;
        });
        if (para != null) {
            $scope.model = para;
        };
    }
    $scope.initData();
    function validationSelect(data) {
        var mess = { Status: false, Title: "" };
        if (data.Unit == "" || data.Unit == null) {
            $scope.errorUnit = true;
            mess.Status = true;
        } else {
            $scope.errorUnit = false;
        }
        if (data.ImpType == "" || data.ImpType == null) {
            $scope.errorImpType = true;
            mess.Status = true;
        } else {
            $scope.errorImpType = false;
        }
        if (data.GroupCode == "" || data.GroupCode == null) {
            $scope.errorGroupCode = true;
            mess.Status = true;
        } else {
            $scope.errorGroupCode = false;
        }
        if (data.TypeCode == "") {
            $scope.errorTypeCode = true;
            mess.Status = true;
        } else {
            $scope.errorTypeCode = false;
        }
        //if (data.Size != null && data.Size != '' && data.Size != undefined) {
        //    var partternSize = /^[0-9]*(\s)?(x|X|\*)(\s)?[0-9]*$/;
        //    if (!partternSize.test(data.Size)) {
        //        mess.Title = mess.Title.concat(" - ", caption.MLP_VALIDATE_SIZE_FORMAT, "<br/>");
        //        $scope.errorSize = true;
        //        mess.Status = true;
        //    } else {
        //        $scope.errorSize = false;
        //    }
        //} else {
        //    $scope.errorSize = false;
        //}
        return mess;
    };
    $scope.changleSelect = function (SelectType) {
        if (SelectType == "ProductGroup" && $scope.model.ProductGroup != "") {
            $scope.errorProductGroup = false;
        }
        if (SelectType == "Unit" && $scope.model.Unit != "") {
            $scope.errorUnit = false;
        }
        if (SelectType == "ImpType" && $scope.model.ImpType != "") {
            $scope.errorImpType = false;
        }
        if (SelectType == "Inheritance" && $scope.model.Inheritance != "") {
            dataserviceCardJob.getInheritancesDetail($scope.model.Inheritance, function (result) {
                result = result.data;

                $scope.model.GroupCode = result[0].GroupCode;
                $scope.model.TypeCode = result[0].TypeCode;
                $scope.model.Unit = result[0].Unit;
                $scope.model.Material = result[0].Material;
                $scope.model.Pattern = result[0].Pattern;
                $scope.model.Wide = result[0].Wide;
                $scope.model.High = result[0].High;
                $scope.model.Note = result[0].Note;
                //$scope.model.ProductCode = sProductCode;
                //$scope.model.ProductName = sProductName;
            });
        }
        if (SelectType == "GroupCode" && $scope.model.GroupCode != "") {
            $scope.errorGroupCode = false;
            $rootScope.groupCode = $scope.model.GroupCode;
        }
        if (SelectType == "TypeCode" && $scope.model.TypeCode != "") {
            $scope.errorTypeCode = false;
        }
    }
    $scope.selectImage = function () {
        var fileuploader = angular.element("#file");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageId').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.COM_MSG_INVALID_FORMAT);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click');
    }
    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.addform.validate() && validationSelect($scope.model).Status == false) {
            var msg = $rootScope.checkData($scope.model);
            if (msg.Status) {
                App.toastrError(msg.Title);
                return;
            }
            var msgPrice = $rootScope.checkDataPrice($scope.model);
            if (msgPrice.Status) {
                App.toastrError(msgPrice.Title);
                return;
            }

            var fileName = $('input[type=file]').val();
            var idxDot = fileName.lastIndexOf(".") + 1;
            var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
            if (extFile !== "") {
                if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                    App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
                } else {
                    var fi = document.getElementById('file');
                    var fsize = (fi.files.item(0).size) / 1024;
                    if (fsize > 1024) {
                        App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                    } else {
                        var fileUpload = $("#file").get(0);
                        var reader = new FileReader();
                        reader.readAsDataURL(fileUpload.files[0]);
                        reader.onload = function (e) {
                            ////
                            //Initiate the JavaScript Image object.
                            var image = new Image();
                            //Set the Base64 string return from FileReader as source.
                            image.src = e.target.result;
                            image.onload = function () {
                                //Determine the Height and Width.
                                var height = this.height;
                                var width = this.width;
                                if (width > 5000 || height > 5000) {
                                    App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                                } else {
                                    var data = new FormData();
                                    file = fileUpload.files[0];
                                    data.append("FileUpload", file);
                                    dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                            return;
                                        }
                                        else {
                                            $scope.model.Image = '/uploads/images/' + rs.Object;
                                            if ($rootScope.ProductCode == '') {
                                                dataserviceCardJob.insertMaterial($scope.model, function (rs) {
                                                    rs = rs.data;
                                                    if (rs.Error) {
                                                        App.toastrError(rs.Title);

                                                    } else {
                                                        App.toastrSuccess(rs.Title);
                                                        $scope.model = rs.Object;
                                                        $rootScope.groupCode = $scope.model.GroupCode;
                                                        $rootScope.ProductID = $scope.model.Id;
                                                        $rootScope.ProductCode = $scope.model.ProductCode;
                                                    }
                                                });
                                            } else {
                                                dataserviceCardJob.updateMaterial($scope.model, function (rs) {
                                                    rs = rs.data;
                                                    if (rs.Error) {
                                                        App.toastrError(rs.Title);
                                                    } else {
                                                        App.toastrSuccess(rs.Title);
                                                    }
                                                });
                                            }
                                        }
                                    })
                                }
                            };
                        }
                    }
                }
            } else {
                if ($rootScope.ProductCode == '') {
                    dataserviceCardJob.insertMaterial($scope.model, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);
                            $scope.model = rs.Object;
                            $rootScope.groupCode = $scope.model.GroupCode;
                            $rootScope.ProductID = $scope.model.Id;
                            $rootScope.ProductCode = $scope.model.ProductCode;
                            $rootScope.Inheritance = $scope.model.Inheritance;
                            $uibModalInstance.close();
                        }
                    });
                } else {
                    dataserviceCardJob.updateMaterial($scope.model, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);
                        }
                    });
                }
            }
        }
    }
    $scope.addGroup = function () {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderCardJob + '/productGroupAdd.html',
            controller: 'addProductGroup',
            size: '40',
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getproductgroup(function (rs) {
                rs = rs.data;
                $scope.productgroup = rs;
            });
        }, function () {
        });
    }
    $scope.addUnit = function () {

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'UNIT',
                        GroupNote: 'Đơn vị sản phẩm',
                        AssetCode: 'WAREHOUSE'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.gettreedataLevel(function (result) {
                result = result.data;
                $scope.treedataLevel = result;
            });
        }, function () { });
    }
    $scope.addProductImpType = function () {

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'PRODUCT_IMP_TYPE',
                        GroupNote: 'Loại hình nhập kho',
                        AssetCode: 'MATERIAL_PRODUCT'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.gettreedataLevel(function (result) {
                result = result.data;
                $scope.treedataLevel = result;
            });
        }, function () { });
    }
    $scope.addStatus = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'CAT_STATUS',
                        GroupNote: 'Trạng thái sản phẩm',
                        AssetCode: 'WAREHOUSE'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListStatus(function (result) {
                result = result.data;
                $rootScope.StatusData = result;
            });

        }, function () { });
    }
    $scope.chkProject = function () {
        if ($rootScope.ProjectCode == '' || $rootScope.ProjectCode == undefined) {
            //App.toastrError(caption.MLP_VALIDATE_CHK_TAB);
            App.toastrError(caption.MLP_VALIDATE_ADD_CATEGORY_SUPPLIES);
        }
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
    $scope.tinymceOptions = {
        plugins: 'print preview searchreplace autolink directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount imagetools contextmenu colorpicker textpattern help',
        toolbar: "formatselect bold italic strikethrough forecolor link  alignleft aligncenter alignright alignjustify numlist bullist outdent indent removeformat fullscreen"
    };
    $scope.getQrCodeFromString = function () {
        dataserviceCardJob.getQrCodeFromString($scope.model.ProductCode, function (rs) {
            rs = rs.data;
            if (rs == null || rs == "")
                $scope.ImageBase = "";
            else
                $scope.ImageBase = rs;
        });
        dataserviceCardJob.getBarCodeFromString($scope.model.ProductCode, function (rs) {
            rs = rs.data;
            $scope.ImageBase1 = rs;
        });
    }
    $scope.autoFillGroup = function () {
        //
        var key = $scope.model.ProductCode;
        //$scope.model.GroupCode = "";
        //giay dan tuong
        if (key.toLowerCase().includes("ax")
            || key.toLowerCase().includes("pe")
            || key.toLowerCase().includes("k")
            || key.toLowerCase().includes("sj")
            || key.toLowerCase().includes("tw")
        ) {
            $scope.model.GroupCode = "GIAY_DAN_TUONG";
        }
        //rèm
        if (key.toLowerCase().includes("op")
            || key.toLowerCase().includes("fn")
        ) {
            $scope.model.GroupCode = "REM";
        }

        // thảm
        if (key.toLowerCase().includes("nt")
        ) {
            $scope.model.GroupCode = "THAM";
        }
        //sàn
        if (key.toLowerCase().includes("kb")
            || key.toLowerCase().includes("kg")
            || key.toLowerCase().includes("nu")
            || key.toLowerCase().includes("oh")

            || key.toLowerCase().includes("pf")
            || key.toLowerCase().includes("pg")
            || key.toLowerCase().includes("pm")
            || key.toLowerCase().includes("pp")
            || key.toLowerCase().includes("py")
            || key.toLowerCase().includes("sk")
            || key.toLowerCase().includes("ud")
        ) {
            $scope.model.GroupCode = "SAN";
        }
    }
    $scope.viewQrCode = function (code) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderQrCode + '/qrViewerBase64.html',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                $scope.data = code;
                setTimeout(function () {
                    setModalDraggable('.modal-dialog');
                }, 200);
            },
            backdrop: 'static',
            size: '25',
        });
    }
    $scope.viewBarCode = function (code) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderQrCode + '/brViewerBase64.html',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                $scope.data = code;
                setTimeout(function () {
                    setModalDraggable('.modal-dialog');
                }, 200);
            },
            backdrop: 'static',
            size: '25',
        });
    }
    //Load init date
    function loadDate() {
        $("#ForeCastTime").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        });
        setModalMaxHeight('.modal');
        setModalDraggable('.modal-dialog');
    }
    setTimeout(function () {
        loadDate();
    }, 200);
});

app.controller('more', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, $translate) {
    var vm = $scope;
    $scope.model = {
        AttributeCode: ''
    }
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/MaterialProduct/JTableExtend",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.ProductCode = $rootScope.ProductCode;
                d.AttributeCode = $scope.model.AttributeCode;
            },
            complete: function () {
                App.unblockUI("#contentMain");
                $scope.$apply();
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(5)
        .withOption('order', [1, 'asc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row))($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn('AttributeCode').withTitle('{{"MLP_LIST_COL_CODE_PRODUCT" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('AttributeName').withTitle('{{"MLP_LIST_COL_NAME_PRODUCT" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('Value').withTitle('{{"MLP_LIST_COL_SIZE" | translate}}').renderWith(function (data, type, full) {

        var dt = "";
        if (full.Type == "GIAY_DAN_TUONG") {
            var arr = data.split('*');
            var width = arr[2] != "_" ? arr[2] + "(cm)" : "_";
            var length = arr[3] != "_" ? arr[3] : "_";
            dt = length + " x " + width;
        }
        if (full.Type == "REM") {
            var arr = data.split('*');
            var width = arr[2] != "_" ? arr[6] + "(m)" : "_";
            var length = arr[3] != "_" ? arr[3] + "(mm)" : "_";
            dt = length + " x " + width;
        }
        if (full.Type == "SAN") {
            var arr = data.split('*');
            var width = arr[5] != "_" ? arr[5] + "(cm)" : "_";
            //var length = arr[3] == "_" ? arr[3] + "(mm)" : "";
            dt = width;
        }

        if (full.Type == "THAM") {
            var arr = data.split('*');
            var width = arr[5] != "_" ? arr[5] + "(cm)" : "_";
            var length = arr[6] != "_" ? arr[6] + "(cm)" : "_";
            dt = length + " x " + width;
        }
        return dt;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('Value').withTitle('{{"MLP_LIST_COL_PRICE" | translate}}').renderWith(function (data, type, full) {

        var dt = "";
        if (full.Type == "GIAY_DAN_TUONG") {
            var arr = data.split('*');
            var price = arr[16] != "_" ? arr[16] + "/m" : "";
            dt = price;
        }
        if (full.Type == "REM") {
            var arr = data.split('*');
            var price = arr[2] != "_" ? arr[2] + "(JPY/M)" : "";
            dt = price;
        }
        if (full.Type == "SAN") {
            var arr = data.split('*');
            var price2 = arr[2] != "_" ? arr[2] + "(Yên/m2)" : "";
            var price = arr[3] != "_" ? arr[3] + "(Yên / m)" : "";
            dt = price2 + " </br> -" + price;
        }
        if (full.Type == "THAM") {
            var arr = data.split('*');
            var price2 = arr[2] != "_" ? arr[2] + "(Yên/m2)" : "_";
            var price = arr[3] != "_" ? arr[3] + "(Yên/m)" : "_";
            dt = price2 + " </br> - " + price;
        }
        return dt;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('action').notSortable().withOption('sClass', 'nowrap').withTitle($translate('COM_LIST_COL_ACTION')).renderWith(function (data, type, full, meta) {
        return '<button title="{{&quot;COM_BTN_EDIT&quot; | translate}}" ng-click="edit(' + full.Id + ')" style = "width: 25px; height: 25px; padding: 0px;-webkit-box-shadow: 0 2px 5px 0 rgba(85,168,253,0.45);" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit"></i></button>' +
            '<button title="{{&quot;COM_BTN_DELETE&quot; | translate}}" ng-click="delete(' + full.Id + ')" style="width: 25px; height: 25px; padding: 0px;-webkit-box-shadow: 0 2px 5px 0 rgba(230,60,95,0.45)" class="btn btn-icon-only btn-circle btn-outline red"><i class="fa fa-trash"></i></button>';
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};

    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }

    function callback(json) {

    }

    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }
    $scope.reload = function () {
        reloadData(true);
    }

    $scope.search = function () {
        $scope.reload();
    }
    $scope.add = function () {
        $rootScope.isAdd = true;
        if ($rootScope.ProductID != '') {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/moreAdd.html',
                controller: 'moreAdd',
                backdrop: 'static',
                size: '70'
            });
            modalInstance.result.then(function (d) {
                $scope.reload()
            }, function () { });
        }
    }

    $scope.edit = function (id) {
        $rootScope.isAdd = false;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/moreEdit.html',
            controller: 'moreEdit',
            backdrop: 'static',
            size: '70',
            resolve: {
                para: function () {
                    return id;
                }
            }
        });
        modalInstance.result.then(function (d) {
            reloadData(false);
        }, function () { });
    }

    $scope.delete = function (id) {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            controller: function ($scope, $uibModalInstance) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteExtend(id, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);
                            $uibModalInstance.close();
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            reloadData(false);
        }, function () {
        });
    }
    $scope.loadFile = function (event) {
        ////
        $scope.listNew = [];
        $scope.listUpdate = [];
        $scope.listError = [];
        var files = event.target.files;
        if (files != null) {
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var name = files[0].name.substr(0, idxDot - 1).toLowerCase();
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            var excel = ['xlsx', 'xls'];
            if (excel.indexOf(extFile) !== -1) {
                extFile = 1;
            } else {
                extFile = 0;
            }
            if (extFile == 0) {
                App.toastrError(caption.EDMSR_MSG_FORMAT_FILE_NOT_ALLOWED);
                return;
            }
            $scope.$apply();

            App.blockUI({
                target: "#modal-body",
                boxed: true,
                message: 'loading...'
            });

            var formData = new FormData();
            formData.append("FileUpload", files[0]);
            formData.append("Catalogue", $rootScope.ProductCode);
            formData.append("groupCode", $rootScope.groupCode);
            App.blockUI({
                target: "#modal-body",
                boxed: true,
                message: 'loading...'
            });
            dataserviceCardJob.uploadCatalogue(formData, function (rs) {
                rs = rs.data;
                ////
                var input = $("#File");
                input.replaceWith(input.val('').clone(true));
                App.unblockUI("#modal-body");
                rs.Catalogue = $rootScope.ProductCode;
                var modalInstance = {};
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var list = rs.list;
                    for (var indx = 0; indx < list.length; ++indx) {
                        list[indx].Type = $rootScope.groupCode;
                    }
                    rs.list = list;
                }
                if ($rootScope.groupCode == "GIAY_DAN_TUONG") {

                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/uploadFine1000Result.html',
                        controller: 'uploadFine1000Result',
                        backdrop: false,
                        size: '70',
                        resolve: {
                            para: function () {
                                return rs;
                            }
                        }
                    });
                }
                else if ($rootScope.groupCode == "REM") {
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                        return;
                    }
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/uploadRemResult.html',
                        controller: 'uploadRemResult',
                        backdrop: false,
                        size: '70',
                        resolve: {
                            para: function () {
                                return rs;
                            }
                        }
                    });
                }
                else if ($rootScope.groupCode == "SAN") {
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                        return;
                    }
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/uploadFloorResult.html',
                        controller: 'uploadFloorResult',
                        backdrop: false,
                        size: '70',
                        resolve: {
                            para: function () {
                                return rs;
                            }
                        }
                    });

                }
                else if ($rootScope.groupCode == "THAM") {
                    ////
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                        return;
                    }
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/uploadCarpetResult.html',
                        controller: 'uploadCarpetResult',
                        backdrop: false,
                        size: '70',
                        resolve: {
                            para: function () {
                                return rs;
                            }
                        }
                    });

                }
                modalInstance.result.then(function (d) {
                    $scope.reload();
                }, function () {
                });
            });
        } else {
            App.toastrError(caption.COM_MSG_CHOSE_FILE);
        }
    };

});

app.controller('moreAdd', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter) {
    $scope.isEdit = false;
    if ($rootScope.groupCode == "GIAY_DAN_TUONG") {
        $rootScope.structNote = "Trang * Category * Chiều rộng * Chiều dài * Trọng lượng * Vân dọc * Vân ngang * E-Sekou * Sx đến 2021 * Chống nấm mốc * Chống bám bẩn * Chống vi khuẩn * Khử mùi * Kiểm soát độ ẩm * Bề mặt giấy cứng * Chống cháy lan * Giá";
        $scope.tab = 1;
    }
    if ($rootScope.groupCode == "REM") {
        $rootScope.structNote = "Trang * Category * Giá * Khổ rộng(mm) * Bước hoa dọc * Bước hoa ngang * Chiều dài cuộn * Trọng lượng * Chất liệu * Xuất xứ";
        $scope.tab = 2;
    }
    if ($rootScope.groupCode == "THAM") {
        $rootScope.structNote = "Trang * Category * Giá Catalogue2 *  Giá Catalogue1 * Đơn vị * Khổ rộng * Chiều dài * Số tấm/hộp *  Số m2/hộp * Độ dầy TT * Tổng độ dày * Cấu tạo * Kiểu dệt * Gauge * Sticth * Formaldehyde * Chống cháy lan * Chống tĩnh điện * Thân thiện MT * ECO MARK * Tiêu chuẩn JIS * Tiêu chuẩn CRI * Kháng khuẩn * Mật độ đi lại";
        $scope.tab = 3;
    }
    if ($rootScope.groupCode == "SAN") {
        $rootScope.structNote = "Trang * Category * Giá Catalogue2 * Giá Catalogue1 * Đơn vị * Chiều rộng * Tổng độ dày *  Trọng lượng * Bước hoa dọc * Bước hoa ngang * Kháng khuẩn * Kháng hóa chất * Chống tĩnh điện * Không cần sáp * Dùng ngoài trời * Dễ lau chùi * Chống nấm mốc * Chống shock * Chịu vật nặng *  Chống cháy lan";
        $scope.tab = 4;
    }

    $scope.productType = "FE1000";

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.model = {
        Inheritance: '_',
        Page: 1,
        Category: '',
        PricePerM2: 0,
        PricePerM: 0,
        Unit: '',
        Width: 1,
        Length: 1,
        Weight: 1,
        VerticalStroke: 1,
        HorizontalStroke: 1,
        Note: '',
        ESekou: '_',
        Sx2021: '_',
        AntiMold: '_',
        AntiFouling: '_',
        AntiBacteria: '_',
        Deodorant: '_',
        HumidityControl: '_',
        HardPaperSurface: '_',
        FireSpread: '_',
        AntiScatter: '_',
        UVProtection: '_',
        InsectRepellent: '_',
        BrigthnessControl: '_',
        HeatReflection: '_',
        OutsideInstallation: '_',
        StrongCoated: '_',
        LowReflection: '_',
        LowReflection: '_',
        Material: '',
        Origin: '',
        Value: '',
        ForecastInStock: 0,
        sForeCastTime: ''
    }
    $scope.model1 = {
        Inheritance: '_',
        Page: 1,
        Category: '',
        PricePerM2: '',
        PricePerM: '',
        Unit: '',
        Width: 1,
        Length: 1,
        Weight: 1,
        VerticalStroke: 1,
        HorizontalStroke: 1,
        Note: '',
        ESekou: '_',
        Sx2021: '_',
        AntiMold: '_',
        AntiFouling: '_',
        AntiBacteria: '_',
        Deodorant: '_',
        HumidityControl: '_',
        HardPaperSurface: '_',
        FireSpread: '_',
        AntiScatter: '_',
        UVProtection: '_',
        InsectRepellent: '_',
        BrigthnessControl: '_',
        HeatReflection: '_',
        OutsideInstallation: '_',
        StrongCoated: '_',
        LowReflection: '_',
        LowReflection: '_',
        Material: '',
        Origin: '',
        Value: '',
        Formaldehyde: '_',
        Friendly: 'Y',
        ECO_MARK: 'Y',
        JIS: 'Y',
        CRI: 'Y',
        TravelDensity: 'Heavy',
        Antistatic: '_',
        ObjectMoving: '_',
        AntiShock: '_',
        ChemicalResistance: '_',
        Wax: '_',
        OutSide: '_'

    }
    $scope.ImageBase = "";
    $scope.forms = {};

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
    var init = function () {
        dataserviceCardJob.gettreedataLevel(function (result) {
            result = result.data;
            $scope.treedataLevel = result;
        });
        dataserviceCardJob.getproductgroup(function (result) {
            result = result.data;
            $scope.productgroup = result;
        });
    }
    init();
    $scope.selectImage = function () {
        var fileuploader = angular.element("#file");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageId').src = reader.result;
                document.getElementById('imageId1').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.COM_MSG_INVALID_FORMAT);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click');
    }

    $scope.submit = function () {
        if ($scope.addform.validate()) {
            var msg = $rootScope.checkDataMore($scope.model);
            if (msg.Status) {
                App.toastrError(msg.Title);
                return;
            }
            if ($rootScope.ProductID == '') {
                App.toastrError(caption.COM_MSG_ADD_BEFORE);
            }
            $scope.model.ProductCode = $rootScope.ProductCode;
            ////
            var fileName = $('input[type=file]').val();
            var idxDot = fileName.lastIndexOf(".") + 1;
            var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
            if (extFile !== "") {
                if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                    App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
                } else {
                    var fi = document.getElementById('file');
                    var fsize = (fi.files.item(0).size) / 1024;
                    if (fsize > 1024) {
                        App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                    } else {
                        var fileUpload = $("#file").get(0);
                        var reader = new FileReader();
                        reader.readAsDataURL(fileUpload.files[0]);
                        reader.onload = function (e) {
                            ////
                            //Initiate the JavaScript Image object.
                            var image = new Image();
                            //Set the Base64 string return from FileReader as source.
                            image.src = e.target.result;
                            image.onload = function () {
                                //Determine the Height and Width.
                                var height = this.height;
                                var width = this.width;
                                if (width > 5000 || height > 5000) {
                                    App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                                } else {
                                    var data = new FormData();
                                    file = fileUpload.files[0];
                                    data.append("FileUpload", file);
                                    dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                            return;
                                        }
                                        else {
                                            ////
                                            $scope.model.Image = '/uploads/images/' + rs.Object;
                                            dataserviceCardJob.insertProductAttribute($scope.model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }
                                    })
                                }
                            };
                        }
                    }
                }
            } else {
                dataserviceCardJob.insertProductAttribute($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });
            }
        }
    }

    $scope.getQrCodeFromString = function () {
        if ($scope.tab == 0) {
            dataserviceCardJob.getQrCodeFromString($rootScope.ProductCode + "_" + $scope.model.AttributeCode, function (rs) {
                rs = rs.data;
                if (rs == null || rs == "")
                    $scope.ImageBase = "";
                else
                    $scope.ImageBase = rs;
            });
        }
        else {
            dataserviceCardJob.getQrCodeFromString($rootScope.ProductCode + "_" + $scope.model1.AttributeCode, function (rs) {
                rs = rs.data;
                if (rs == null || rs == "")
                    $scope.ImageBase = "";
                else
                    $scope.ImageBase = rs;
            });
        }
    }

    $scope.onTextChange = function () {
        if ($scope.productType == "FE1000") {
            $scope.model.Value =
                //$scope.model.Inheritance + "*" +
                $scope.model.Page + "*" +
                $scope.model.Category + "*" +
                //$scope.model.PricePerM2 + "*" +
                //$scope.model.PricePerM + "*" +
                //$scope.model.Unit + "*" +
                $scope.model.Width + "*" +
                $scope.model.Length + "*" +
                $scope.model.Weight + "*" +
                $scope.model.VerticalStroke + "*" +
                $scope.model.HorizontalStroke + "*" +
                //$scope.model.Note + "*" +
                $scope.model.ESekou + "*" +
                $scope.model.Sx2021 + "*" +
                $scope.model.AntiMold + "*" +
                $scope.model.AntiFouling + "*" +
                $scope.model.AntiBacteria + "*" +
                $scope.model.Deodorant + "*" +
                $scope.model.HumidityControl + "*" +
                $scope.model.HardPaperSurface + "*" +
                $scope.model.FireSpread;
            //$scope.model.AntiScatter + "*" +
            //$scope.model.UVProtection + "*" +
            //$scope.model.InsectRepellent + "*" +
            //$scope.model.BrigthnessControl + "*" +
            //$scope.model.HeatReflection + "*" +
            //$scope.model.OutsideInstallation + "*" +
            //$scope.model.StrongCoated + "*" +
            //$scope.model.LowReflection + "*" +
            //$scope.model.LowReflection + "*" +
            //$scope.model.Material + "*" +
            //$scope.model.Origin;
        }
    }

    $scope.submit1 = function () {
        //if ($scope.tab == 0) {
        if ($scope.forms.addC1more.validate()) {
            $scope.insertTabZero();
        }
        //} else {
        //    if ($rootScope.groupCode == "GIAY_DAN_TUONG") {
        //        $scope.insertFine1000();
        //    }
        //    if ($rootScope.groupCode == "REM") {
        //        $scope.insertSimpleOrder();
        //    }
        //    if ($rootScope.groupCode == "THAM") {
        //        $scope.insertCarpet();
        //    }
        //    if ($rootScope.groupCode == "SAN") {
        //        $scope.insertSfloor();
        //    }
        //}
    }

    $scope.changeTab = function (tab) {
        $scope.tab = tab;
    }

    $scope.insertFine1000 = function () {

        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;

            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;
            model.Value = $scope.model.Page + "*" +
                model.Category + "*" +

                model.Width + "*" +
                model.Length + "*" +
                model.Weight + "*" +
                model.VerticalStroke + "*" +
                model.HorizontalStroke + "*" +
                model.ESekou + "*" +
                model.Sx2021 + "*" +
                model.AntiMold + "*" +
                model.AntiFouling + "*" +
                model.AntiBacteria + "*" +
                model.Deodorant + "*" +
                model.HumidityControl + "*" +
                model.HardPaperSurface + "*" +
                model.FireSpread + "*" +
                model.PricePerM;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}
        //else {

        //}

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        ////
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;

                                        model.Image = '/uploads/images/' + rs.Object;
                                        if ($scope.forms.addC2more.validate()) {
                                            dataserviceCardJob.insertProductAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }

                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {
            if ($scope.forms.addC2more.validate()) {
                dataserviceCardJob.insertProductAttribute(model, function (rs) {
                    rs = rs.data;

                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });

            }
        }

    }
    $scope.insertSimpleOrder = function () {

        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;
            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;
            model.Value = model.Page + "*" +
                model.Category + "*" +
                model.PricePerM + "*" +
                model.Width + "*" +
                model.VerticalStroke + "*" +
                model.HorizontalStroke + "*" +
                model.Length + "*" +
                model.Weight + "*" +
                model.Material + "*" +
                model.Origin;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}
        //else {

        //}

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        ////
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;
                                        model.Image = '/uploads/images/' + rs.Object;
                                        if ($scope.forms.simpleOrderform.validate()) {
                                            dataserviceCardJob.insertProductAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }
                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {
            if ($scope.forms.simpleOrderform.validate()) {
                dataserviceCardJob.insertProductAttribute(model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });
            }
        }

    }
    $scope.insertSfloor = function () {
        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;
            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;
            model.Value = model.Page + "*" +
                model.Category + "*" +
                model.PricePerM2 + "*" +
                model.PricePerM + "*" +
                model.Unit + "*" +
                model.Width + "*" +
                model.Deep + "*" +
                model.Weight + "*" +
                model.VerticalStroke + "*" +
                model.HorizontalStroke + "*" +
                model.AntiBacteria + "*" +
                model.ChemicalResistance + "*" +
                model.Antistatic + "*" +
                model.Wax + "*" +
                model.OutSide + "*" +
                model.AntiFouling + "*" +
                model.AntiMold + "*" +
                model.AntiShock + "*" +
                model.ObjectMoving + "*" +
                model.FireSpread;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}
        //else {

        //}

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;

                                        model.Image = '/uploads/images/' + rs.Object;
                                        if ($scope.forms.floormore.validate()) {
                                            dataserviceCardJob.insertProductAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }

                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {
            if ($scope.forms.floormore.validate()) {
                dataserviceCardJob.insertProductAttribute(model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });

            }
        }
    }
    $scope.insertCarpet = function () {
        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;
            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;
            model.Value = model.Page + "*" +
                model.Category + "*" +
                model.PricePerM2 + "*" +
                model.PricePerM + "*" +
                model.Unit + "*" +
                model.Width + "*" +
                model.Length + "*" +
                model.CountPerBox + "*" +
                model.M2PerBox + "*" +
                model.Deep + "*" +
                model.TotalDeep + "*" +
                ((model.Structure == null || model.Structure == '' || model.Structure == undefined) ? "_" : model.Structure) + "*" +
                ((model.TextileType == null || model.TextileType == '' || model.TextileType == undefined) ? "_" : model.TextileType) + "*" +
                ((model.Gauge == null || model.Gauge == '' || model.Gauge == undefined) ? "_" : model.Gauge) + "*" +
                ((model.Sticth == null || model.Sticth == '' || model.Sticth == undefined) ? "_" : model.Sticth) + "*" +
                model.Formaldehyde + "*" +
                model.FireSpread + "*" +
                model.Antistatic + "*" +
                model.Friendly + "*" +
                model.ECO_MARK + "*" +
                model.JIS + "*" +
                model.CRI + "*" +
                model.AntiBacteria + "*" +
                model.TravelDensity;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}
        //else {

        //}

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;

                                        model.Image = '/uploads/images/' + rs.Object;

                                        if ($scope.forms.carpetmore.validate()) {
                                            dataserviceCardJob.insertProductAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }

                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {
            if ($scope.forms.carpetmore.validate()) {
                dataserviceCardJob.insertProductAttribute(model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });
            }

        }

    }
    $scope.insertTabZero = function () {
        var msg = {};

        //if ($scope.tab == 0) {
        //    model = $scope.model;
        //    //msg = $rootScope.checkDataMore1($scope.model, $scope.tab);

        //}
        //else {
        //    model = $scope.model1;
        //    msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        //}

        msg = $rootScope.checkValidateValue($scope.model.Value);

        if (msg.Status == true) {
            App.toastrError(msg.Title);
            return;
        }

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        $scope.model.Type = $rootScope.groupCode;
        $scope.model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;
                                        model.Image = '/uploads/images/' + rs.Object;

                                        dataserviceCardJob.insertProductAttribute(model, function (rs) {
                                            rs = rs.data;
                                            if (rs.Error) {
                                                App.toastrError(rs.Title);
                                            } else {
                                                App.toastrSuccess(rs.Title);
                                                $uibModalInstance.close();
                                            }
                                            App.unblockUI("#contentMain");
                                        });

                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {
            dataserviceCardJob.insertProductAttribute($scope.model, function (rs) {
                rs = rs.data;

                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
                App.unblockUI("#contentMain");
            });

        }
    }

    //Load init date
    function loadDate() {
        $("#ForeCastTime").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        });
        //var today = new Date(new Date());
        //$('#ForeCastTime').datepicker('setStartDate', today);
        //$('#ForeCastTime').datepicker('update', new Date());
        //$('#ForeCastTime').datepicker('setEndDate', today);
        //$scope.model.TimeTicketCreate = $filter('date')(new Date(today), 'dd/MM/yyyy');
        //$('#ForeCastTime').datepicker('setStartDate', today);

        setModalMaxHeight('.modal');
        setModalDraggable('.modal-dialog');
    }
    setTimeout(function () {
        loadDate();
    }, 200);
});

app.controller('moreEdit', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.isEdit = true;
    if ($rootScope.groupCode == "GIAY_DAN_TUONG") {
        $rootScope.structNote = "Trang * Category * Chiều rộng * Chiều dài * Trọng lượng * Vân dọc * Vân ngang * E-Sekou * Sx đến 2021 * Chống nấm mốc * Chống bám bẩn * Chống vi khuẩn * Khử mùi * Kiểm soát độ ẩm * Bề mặt giấy cứng * Chống cháy lan * Giá";
        $scope.tab = 1;
    }
    if ($rootScope.groupCode == "REM") {
        $rootScope.structNote = "Trang * Category * Giá * Khổ rộng(mm) * Bước hoa dọc * Bước hoa ngang * Chiều dài cuộn * Trọng lượng * Chất liệu * Xuất xứ";
        $scope.tab = 2;
    }
    if ($rootScope.groupCode == "THAM") {
        $rootScope.structNote = "Trang * Category * Giá Catalogue2 *  Giá Catalogue1 * Đơn vị * Khổ rộng * Chiều dài * Số tấm/hộp *  Số m2/hộp * Độ dầy TT * Tổng độ dày * Cấu tạo * Kiểu dệt * Gauge * Sticth * Formaldehyde * Chống cháy lan * Chống tĩnh điện * Thân thiện MT * ECO MARK * Tiêu chuẩn JIS * Tiêu chuẩn CRI * Kháng khuẩn * Mật độ đi lại";
        $scope.tab = 3;
    }
    if ($rootScope.groupCode == "SAN") {
        $rootScope.structNote = "Trang * Category * Giá Catalogue2 * Giá Catalogue1 * Đơn vị * Chiều rộng * Tổng độ dày *  Trọng lượng * Bước hoa dọc * Bước hoa ngang * Kháng khuẩn * Kháng hóa chất * Chống tĩnh điện * Không cần sáp * Dùng ngoài trời * Dễ lau chùi * Chống nấm mốc * Chống shock * Chịu vật nặng *  Chống cháy lan";
        $scope.tab = 4;
    }
    $scope.productType = "FE1000";
    $scope.groupCode1 = "";

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.model = {
        Inheritance: '_',
        Page: 1,
        Category: '',
        PricePerM2: 0,
        PricePerM: 0,
        Unit: '',
        Width: 1,
        Length: 1,
        Weight: 1,
        VerticalStroke: 1,
        HorizontalStroke: 1,
        Note: '',
        ESekou: '_',
        Sx2021: '_',
        AntiMold: '_',
        AntiFouling: '_',
        AntiBacteria: '_',
        Deodorant: '_',
        HumidityControl: '_',
        HardPaperSurface: '_',
        FireSpread: '_',
        AntiScatter: '_',
        UVProtection: '_',
        InsectRepellent: '_',
        BrigthnessControl: '_',
        HeatReflection: '_',
        OutsideInstallation: '_',
        StrongCoated: '_',
        LowReflection: '_',
        LowReflection: '_',
        Material: '_',
        Origin: '_',
        Value: '',
        ForecastInStock: 0,
        sForeCastTime: ''
    }
    $scope.model1 = {
        Inheritance: '_',
        Page: 1,
        Category: '',
        PricePerM2: 0,
        PricePerM: 0,
        Unit: '',
        Width: 1,
        Length: 1,
        Weight: 1,
        VerticalStroke: 1,
        HorizontalStroke: 1,
        Note: '',
        ESekou: '_',
        Sx2021: '_',
        AntiMold: '_',
        AntiFouling: '_',
        AntiBacteria: '_',
        Deodorant: '_',
        HumidityControl: '_',
        HardPaperSurface: '_',
        FireSpread: '_',
        AntiScatter: '_',
        UVProtection: '_',
        InsectRepellent: '_',
        BrigthnessControl: '_',
        HeatReflection: '_',
        OutsideInstallation: '_',
        StrongCoated: '_',
        LowReflection: '_',
        LowReflection: '_',
        Material: '_',
        Origin: '_',
        Value: ''

    }
    $scope.ImageBase = "";
    $scope.initData = function () {
        dataserviceCardJob.getAttributeItem(para, function (rs) {
            rs = rs.data;

            $scope.groupCode1 = rs.Object.Type;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                $scope.model = rs.Object;
                $scope.model1 = rs.Object;
                try {
                    ////
                    var data = $scope.model.Value.split('*');
                    if ($scope.groupCode1 == "GIAY_DAN_TUONG") {
                        $scope.model1.Page = parseFloat(data[0]);
                        $scope.model1.Category = data[1];
                        $scope.model1.Width = parseFloat(data[2]);
                        $scope.model1.Length = parseFloat(data[3]);
                        $scope.model1.Weight = parseFloat(data[4]);
                        $scope.model1.VerticalStroke = parseFloat(data[5]);
                        $scope.model1.HorizontalStroke = parseFloat(data[6]);
                        $scope.model1.ESekou = data[7];
                        $scope.model1.Sx2021 = data[8];
                        $scope.model1.AntiMold = data[9];
                        $scope.model1.AntiFouling = data[10];
                        $scope.model1.AntiBacteria = data[11];
                        $scope.model1.Deodorant = data[12];
                        $scope.model1.HumidityControl = data[13];
                        $scope.model1.HardPaperSurface = data[14];
                        $scope.model1.FireSpread = data[15];
                        if (data.length == 17)
                            $scope.model1.PricePerM = parseFloat(data[16]);
                    }
                    if ($scope.groupCode1 == "REM") {
                        //

                        $scope.model1.Page = parseInt(data[0]);
                        $scope.model1.Category = data[1];
                        $scope.model1.PricePerM = parseFloat(data[2].replace(',', ''));
                        $scope.model1.Width = parseFloat(data[3]);
                        $scope.model1.VerticalStroke = parseFloat(data[4]);
                        $scope.model1.HorizontalStroke = parseFloat(data[5]);
                        $scope.model1.Length = parseFloat(data[6]);
                        $scope.model1.Weight = parseFloat(data[7]);
                        $scope.model1.Material = data[8];
                        $scope.model1.Origin = data[9];
                    }
                    if ($scope.groupCode1 == "THAM") {
                        $scope.model1.Page = parseInt(data[0]);
                        $scope.model1.Category = data[1];
                        $scope.model1.PricePerM2 = parseFloat(data[2].replace(',', ''));
                        $scope.model1.PricePerM = parseFloat(data[3].replace(',', ''));
                        $scope.model1.Unit = data[4];
                        $scope.model1.Width = parseFloat(data[5]);
                        $scope.model1.Length = parseFloat(data[6]);
                        $scope.model1.CountPerBox = parseFloat(data[7]);
                        $scope.model1.M2PerBox = parseFloat(data[8]);
                        $scope.model1.Deep = parseFloat(data[9]);
                        $scope.model1.TotalDeep = parseFloat(data[10]);
                        $scope.model1.Structure = data[11];
                        $scope.model1.TextileType = data[12];
                        $scope.model1.Gauge = parseFloat(data[13]);
                        $scope.model1.Sticth = parseFloat(data[14]);
                        $scope.model1.Formaldehyde = data[15];
                        $scope.model1.FireSpread = data[16];
                        $scope.model1.Antistatic = data[17];
                        $scope.model1.Friendly = data[18];
                        $scope.model1.ECO_MARK = data[19];
                        $scope.model1.JIS = data[20];
                        $scope.model1.CRI = data[21];
                        $scope.model1.AntiBacteria = data[22];
                        $scope.model1.TravelDensity = data[23];

                    }
                    if ($scope.groupCode1 == "SAN") {
                        $scope.model1.Page = parseInt(data[0]);
                        $scope.model1.Category = data[1];
                        $scope.model1.PricePerM2 = parseFloat(data[2].replace(',', ''));
                        $scope.model1.PricePerM = parseFloat(data[3].replace(',', ''));
                        $scope.model1.Unit = data[4];
                        $scope.model1.Width = parseFloat(data[5]);
                        $scope.model1.Deep = parseFloat(data[6]);
                        $scope.model1.Weight = parseFloat(data[7]);
                        $scope.model1.VerticalStroke = parseFloat(data[8]);
                        $scope.model1.HorizontalStroke = parseFloat(data[9]);
                        $scope.model1.AntiBacteria = data[10];
                        $scope.model1.ChemicalResistance = data[11];
                        $scope.model1.Antistatic = data[12];
                        $scope.model1.Wax = data[13];
                        $scope.model1.OutSide = data[14];
                        $scope.model1.AntiFouling = data[15];
                        $scope.model1.AntiMold = data[16];
                        $scope.model1.AntiShock = data[17];
                        $scope.model1.ObjectMoving = data[18];
                        $scope.model1.FireSpread = data[19];;
                    }
                    if ($scope.groupCode1 == "GIAY_DAN_TUONG") {
                        $scope.tab = 1;
                    }
                    if ($scope.groupCode1 == "REM") {
                        $scope.tab = 2;
                    }
                    if ($scope.groupCode1 == "THAM") {
                        $scope.tab = 3;
                    }
                    if ($scope.groupCode1 == "SAN") {
                        $scope.tab = 4;
                    }
                }
                catch (Exception) { }
                $scope.getQrCodeFromString($scope.model.ProductQrCode);
            }
        });
    }
    $scope.initData();
    $scope.forms = {};

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
    var init = function () {
        dataserviceCardJob.gettreedataLevel(function (result) {
            result = result.data;
            $scope.treedataLevel = result;
        });
        dataserviceCardJob.getproductgroup(function (result) {
            result = result.data;
            $scope.productgroup = result;
        });
    }
    init();
    $scope.selectImage = function () {
        var fileuploader = angular.element("#file");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageId').src = reader.result;
                document.getElementById('imageId1').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.COM_MSG_INVALID_FORMAT);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click');
    }

    $scope.submit = function () {
        var msg = $rootScope.checkDataMore($scope.model);
        if (msg.Status) {
            App.toastrError(msg.Title);
            return;
        }
        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }

        if ($scope.addform.validate()) {
            var fileName = $('input[type=file]').val();
            var idxDot = fileName.lastIndexOf(".") + 1;
            var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
            if (extFile !== "") {
                if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                    App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
                } else {
                    var fi = document.getElementById('file');
                    var fsize = (fi.files.item(0).size) / 1024;
                    if (fsize > 1024) {
                        App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                    } else {
                        var fileUpload = $("#file").get(0);
                        var reader = new FileReader();
                        reader.readAsDataURL(fileUpload.files[0]);
                        reader.onload = function (e) {

                            //Initiate the JavaScript Image object.
                            var image = new Image();
                            //Set the Base64 string return from FileReader as source.
                            image.src = e.target.result;
                            image.onload = function () {
                                //Determine the Height and Width.
                                var height = this.height;
                                var width = this.width;
                                if (width > 5000 || height > 5000) {
                                    App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                                } else {
                                    var data = new FormData();
                                    file = fileUpload.files[0];
                                    data.append("FileUpload", file);
                                    dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                            return;
                                        }
                                        else {

                                            $scope.model.Image = '/uploads/images/' + rs.Object;
                                            dataserviceCardJob.updateAttribute($scope.model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                            });
                                        }
                                    })
                                }
                            };
                        }
                    }
                }
            } else {
                dataserviceCardJob.updateAttribute($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                });
            }
        }
    }
    $scope.getQrCodeFromString = function () {
        dataserviceCardJob.getQrCodeFromString($rootScope.ProductCode + "_" + $scope.model.AttributeCode, function (rs) {
            rs = rs.data;
            if (rs == null || rs == "")
                $scope.ImageBase = "";
            else
                $scope.ImageBase = rs;
        });
    }

    $scope.onTextChange = function () {
        if ($scope.productType == "FE1000") {
            $scope.model.Value =
                //$scope.model.Inheritance + "*" +
                $scope.model.Page + "*" +
                $scope.model.Category + "*" +
                //$scope.model.PricePerM2 + "*" +
                //$scope.model.PricePerM + "*" +
                //$scope.model.Unit + "*" +
                $scope.model.Width + "*" +
                $scope.model.Length + "*" +
                $scope.model.Weight + "*" +
                $scope.model.VerticalStroke + "*" +
                $scope.model.HorizontalStroke + "*" +
                //$scope.model.Note + "*" +
                $scope.model.ESekou + "*" +
                $scope.model.Sx2021 + "*" +
                $scope.model.AntiMold + "*" +
                $scope.model.AntiFouling + "*" +
                $scope.model.AntiBacteria + "*" +
                $scope.model.Deodorant + "*" +
                $scope.model.HumidityControl + "*" +
                $scope.model.HardPaperSurface + "*" +
                $scope.model.FireSpread;
            //$scope.model.AntiScatter + "*" +
            //$scope.model.UVProtection + "*" +
            //$scope.model.InsectRepellent + "*" +
            //$scope.model.BrigthnessControl + "*" +
            //$scope.model.HeatReflection + "*" +
            //$scope.model.OutsideInstallation + "*" +
            //$scope.model.StrongCoated + "*" +
            //$scope.model.LowReflection + "*" +
            //$scope.model.LowReflection + "*" +
            //$scope.model.Material + "*" +
            //$scope.model.Origin;
        }
    }

    $scope.submit1 = function () {

        //if ($scope.tab == 0) {
        if ($scope.forms.addC1more.validate()) {
            $scope.updateTabZero();
        }
        //} else {
        //    if ($scope.groupCode1 == "GIAY_DAN_TUONG") {
        //        $scope.updateFine1000();
        //    }
        //    if ($scope.groupCode1 == "REM") {
        //        $scope.updateSimpleOrder();
        //    }
        //    if ($scope.groupCode1 == "THAM") {
        //        $scope.updateCarpet();
        //    }
        //    if ($scope.groupCode1 == "SAN") {
        //        $scope.updateSfloor();
        //    }
        //}
    }
    $scope.changeTab = function (tab) {
        $scope.tab = tab;
    }
    $scope.updateFine1000 = function () {
        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;
            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;

            model.Value = $scope.model.Page + "*" +
                model.Category + "*" +
                model.Width + "*" +
                model.Length + "*" +
                model.Weight + "*" +
                model.VerticalStroke + "*" +
                model.HorizontalStroke + "*" +
                model.ESekou + "*" +
                model.Sx2021 + "*" +
                model.AntiMold + "*" +
                model.AntiFouling + "*" +
                model.AntiBacteria + "*" +
                model.Deodorant + "*" +
                model.HumidityControl + "*" +
                model.HardPaperSurface + "*" +
                model.FireSpread + "*" +
                model.PricePerM;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}

        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;

                                        model.Image = '/uploads/images/' + rs.Object;
                                        if ($scope.forms.addC2more.validate()) {
                                            dataserviceCardJob.updateAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }
                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {
            if ($scope.forms.addC2more.validate()) {
                dataserviceCardJob.updateAttribute(model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });
            }

        }
    }
    $scope.updateSimpleOrder = function () {
        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;
            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;
            model.Value = model.Page + "*" +
                model.Category + "*" +
                model.PricePerM + "*" +
                model.Width + "*" +
                model.VerticalStroke + "*" +
                model.HorizontalStroke + "*" +
                model.Length + "*" +
                model.Weight + "*" +
                model.Material + "*" +
                model.Origin;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}
        //else {

        //}

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object; s
                                        model.Image = '/uploads/images/' + rs.Object;
                                        if ($scope.forms.simpleOrderform.validate()) {
                                            dataserviceCardJob.updateAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }
                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {

            if ($scope.forms.simpleOrderform.validate()) {
                dataserviceCardJob.updateAttribute(model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });
            }
        }
    }
    $scope.updateSfloor = function () {
        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;
            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;
            model.Value = model.Page + "*" +
                model.Category + "*" +
                model.PricePerM2 + "*" +
                model.PricePerM + "*" +
                model.Unit + "*" +
                model.Width + "*" +
                model.Deep + "*" +
                model.Weight + "*" +
                model.VerticalStroke + "*" +
                model.HorizontalStroke + "*" +
                model.AntiBacteria + "*" +
                model.ChemicalResistance + "*" +
                model.Antistatic + "*" +
                model.Wax + "*" +
                model.OutSide + "*" +
                model.AntiFouling + "*" +
                model.AntiMold + "*" +
                model.AntiShock + "*" +
                model.ObjectMoving + "*" +
                model.FireSpread;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}
        //else {

        //}

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;

                                        model.Image = '/uploads/images/' + rs.Object;
                                        if ($scope.forms.floormore.validate()) {
                                            dataserviceCardJob.updateAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }
                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {

            if ($scope.forms.floormore.validate()) {
                dataserviceCardJob.updateAttribute(model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });
            }
        }
    }
    $scope.updateCarpet = function () {

        var msg = {};
        var model;
        if ($scope.tab == 0) {
            model = $scope.model;
            msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        }
        else {
            model = $scope.model1;
            model.Value = model.Page + "*" +
                model.Category + "*" +
                model.PricePerM2 + "*" +
                model.PricePerM + "*" +
                model.Unit + "*" +
                model.Width + "*" +
                model.Length + "*" +
                model.CountPerBox + "*" +
                model.M2PerBox + "*" +
                model.Deep + "*" +
                model.TotalDeep + "*" +
                ((model.Structure == null || model.Structure == '' || model.Structure == undefined) ? "_" : model.Structure) + "*" +
                ((model.TextileType == null || model.TextileType == '' || model.TextileType == undefined) ? "_" : model.TextileType) + "*" +
                ((model.Gauge == null || model.Gauge == '' || model.Gauge == undefined) ? "_" : model.Gauge) + "*" +
                ((model.Sticth == null || model.Sticth == '' || model.Sticth == undefined) ? "_" : model.Sticth) + "*" +
                model.Formaldehyde + "*" +
                model.FireSpread + "*" +
                model.Antistatic + "*" +
                model.Friendly + "*" +
                model.ECO_MARK + "*" +
                model.JIS + "*" +
                model.CRI + "*" +
                model.AntiBacteria + "*" +
                model.TravelDensity;
            msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        }
        //if (msg.Status == true) {
        //    App.toastrError(msg.Title);
        //    return;
        //}
        //else {

        //}

        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        model.Type = $rootScope.groupCode;
        model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;

                                        model.Image = '/uploads/images/' + rs.Object;
                                        if ($scope.forms.carpetmore.validate()) {
                                            dataserviceCardJob.updateAttribute(model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                                App.unblockUI("#contentMain");
                                            });
                                        }

                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {

            if ($scope.forms.carpetmore.validate()) {
                dataserviceCardJob.updateAttribute(model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                    App.unblockUI("#contentMain");
                });
            }


        }
    }
    $scope.updateTabZero = function () {
        var msg = {};
        var model;
        //if ($scope.tab == 0) {
        //    model = $scope.model;
        //    msg = $rootScope.checkDataMore1($scope.model, $scope.tab);
        //}
        //else {
        //    model = $scope.model1;
        //    msg = $rootScope.checkDataMore1($scope.model1, $scope.tab);
        //}

        msg = $rootScope.checkValidateValue($scope.model.Value);

        if (msg.Status == true) {
            App.toastrError(msg.Title);
            return;
        }
        if ($rootScope.ProductID == '') {
            App.toastrError(caption.COM_MSG_ADD_BEFORE);
        }
        $scope.model.ProductCode = $rootScope.ProductCode;
        $scope.model.Type = $rootScope.groupCode;
        $scope.model.ProductCode = $rootScope.ProductCode;
        var fileName = $('input[type=file]').val();
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile !== "") {
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
            } else {
                var fi = document.getElementById('file');
                var fsize = (fi.files.item(0).size) / 1024;
                if (fsize > 1024) {
                    App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXXIMUM);
                } else {
                    var fileUpload = $("#file").get(0);
                    var reader = new FileReader();
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        ////
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (width > 5000 || height > 5000) {
                                App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                            } else {
                                var data = new FormData();
                                file = fileUpload.files[0];
                                data.append("FileUpload", file);
                                dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                        return;
                                    }
                                    else {
                                        ////
                                        $scope.model.Image = '/uploads/images/' + rs.Object;

                                        model.Image = '/uploads/images/' + rs.Object;

                                        dataserviceCardJob.updateAttribute(model, function (rs) {
                                            rs = rs.data;
                                            if (rs.Error) {
                                                App.toastrError(rs.Title);
                                            } else {
                                                App.toastrSuccess(rs.Title);
                                                $uibModalInstance.close();
                                            }
                                            App.unblockUI("#contentMain");
                                        });

                                    }
                                })
                            }
                        };
                    }
                }
            }
        } else {
            dataserviceCardJob.updateAttribute($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
                App.unblockUI("#contentMain");
            });

        }
    }

    //Load init date
    function loadDate() {
        $("#ForeCastTime").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        });
        //var today = new Date(new Date());
        //$('#ForeCastTime').datepicker('setStartDate', today);
        //$('#ForeCastTime').datepicker('update', new Date());

        setModalMaxHeight('.modal');
        setModalDraggable('.modal-dialog');
    }
    setTimeout(function () {
        loadDate();
    }, 200);

});

app.controller('materialTabFile', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter) {
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    $scope.model = {
        FromDate: '',
        ToDate: '',
    }
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/MaterialProduct/JTableFileNew",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.ProductCode = $rootScope.ProductCode;
                d.FromDate = $scope.model.FromDate;
                d.ToDate = $scope.model.ToDate;
            },
            complete: function () {
                App.unblockUI("#contentMain");
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(5)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row))($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
        });
    //end option table
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle(titleHtml).notSortable().renderWith(function (data, type, full, meta) {
        $scope.selected[full.id] = false;
        return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.ContractFileID + ']" ng-click="toggleOne(selected)"/><span></span></label>';
    }).withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileName').withTitle('{{"MLP_CURD_TAB_FILE_LIST_COL_NAME" | translate}}').renderWith(function (data, type, full) {
        var excel = ['.XLSM', '.XLSX', '.XLS'];
        var document = ['.TXT'];
        var word = ['.DOCX', '.DOC'];
        var pdf = ['.PDF'];
        var powerPoint = ['.PPS', '.PPTX', '.PPT'];
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];
        var icon = "";
        if (excel.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(106,170,89);font-size: 15px;" class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp;';
        } else if (word.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(13,118,206);font-size: 15px;" class="fa fa-file-word-o" aria-hidden="true"></i>&nbsp;';
        } else if (document.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(0,0,0);font-size: 15px;" class="fa fa-file-text-o" aria-hidden="true"></i>&nbsp;';
        } else if (pdf.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-pdf-o" aria-hidden="true"></i>&nbsp;';
        } else if (powerPoint.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-powerpoint-o" aria-hidden="true"></i>&nbsp;';
        } else if (image.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fa fa-picture-o" aria-hidden="true"></i>&nbsp;';
        } else {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fas fa-align-justify" aria-hidden="true"></i>&nbsp;';
        }
        return icon + data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedTime').withTitle('{{"MLP_CURD_TAB_FILE_LIST_COL_CREATED_TIME" | translate}}').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('ReposName').withTitle('{{"MLP_CURD_TAB_FILE_LIST_COL_CATEGORY_NAME" | translate}}').renderWith(function (data, type, full) {
        return '<i class="fa fa-folder-open icon-state-warning"></i>&nbsp' + data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('Desc').withTitle('{{"MLP_CURD_TAB_FILE_LIST_COL_DESCRIPTION" | translate}}').notSortable().renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('TypeFile').withTitle('{{"MLP_TAB_FILE_LIST_COL_FILE_TYPE" | translate}}').renderWith(function (data, type, full) {
        if (data == "SHARE") {
            return "<label class='text-primary'>Tệp được chia sẻ</label>";
        } else {
            return "Tệp gốc";
        }
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('action').withTitle('{{"COM_LIST_COL_ACTION" | translate}}').withOption('sClass', 'w75').renderWith(function (data, type, full) {
        if (full.TypeFile == "SHARE") {
            return '<a ng-click="dowload(\'' + full.FileCode + '\')" target="_blank" style="width: 25px; height: 25px; padding: 0px" title="Tải xuống - ' + full.FileName + '" class="btn btn-icon-only btn-circle btn-outline green " download><i class="fa fa-download pt5"></i></a>';
        } else {
            return '<button title="Sửa" ng-click="edit(\'' + full.FileName + '\',' + full.Id + ')" style = "width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit"></i></button>' +
                '<a ng-click="dowload(\'' + full.FileCode + '\')"  style="width: 25px; height: 25px; padding: 0px" title="Tải xuống - ' + full.FileName + '" class="btn btn-icon-only btn-circle btn-outline green"><i class="fa fa-download pt5"></i></a>' +
                '<button title="Xoá" ng-click="delete(' + full.Id + ')" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline red"><i class="fa fa-trash"></i></button>';
        }
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};

    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }

    $scope.reload = function () {
        reloadData(true);
    }
    $rootScope.reloadFile = function () {
        $scope.reload();
    }

    $scope.search = function () {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderCardJob + '/contractTabFileSearch.html',
            windowClass: 'modal-file',
            backdrop: 'static',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '30',
        });
        modalInstance.result.then(function (d) {
            reloadData()
        }, function () { });
    }
    $scope.add = function () {
        if ($scope.file == '' || $scope.file == undefined) {
            App.toastrError(caption.COM_MSG_CHOSE_FILE);
        } else {
            var data = new FormData();
            data.append("FileUpload", $scope.file);
            data.append("ProductCode", $rootScope.ProductCode);
            data.append("IsMore", false);
            dataserviceCardJob.insertProductFile(data, function (result) {
                result = result.data;
                if (result.Error) {
                    App.toastrError(result.Title);
                } else {
                    App.toastrSuccess(result.Title);
                    $scope.reload();
                }
            });
        }
    }
    $scope.edit = function (fileName, id) {
        dataserviceCardJob.getProductFile(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                rs.Object.FileName = fileName;
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/materialTabFileEdit.html',
                    controller: 'materialTabFileEdit',
                    windowClass: "modal-file",
                    backdrop: 'static',
                    size: '60',
                    resolve: {
                        para: function () {
                            return rs.Object;
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    reloadData()
                }, function () { });
            }
        })
    }
    $scope.delete = function (id) {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            controller: function ($scope, $uibModalInstance) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteProductFile(id, function (result) {
                        result = result.data;
                        if (result.Error) {
                            App.toastrError(result.Title);
                        } else {
                            App.toastrSuccess(result.Title);
                            $uibModalInstance.close();
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    }
    $scope.share = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderFileShare + '/fileShare.html',
            controller: 'fileShare',
            windowClass: 'modal-center',
            backdrop: 'static',
            size: '60',
        });
        modalInstance.result.then(function (d) {
            reloadData()
        }, function () { });
    }
    $scope.viewFile = function (id) {
        //dataserviceCardJob.getByteFile(id, function (rs) {rs=rs.data;
        //    
        //    var blob = new Blob([rs.Object], { type: "application/msword;charset=utf-8" });
        //    var blobUrl = URL.createObjectURL(blob);
        //    var url = window.encodeURIComponent(blobUrl);
        //    window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
        //})
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //
        //var dt = userModel.Url;
        //dt = dt.replace("\/", "\\");
        //var url1 = "upload\\repository" + dt;
        //url1 = "\\uploads\\repository\\3.THÔNG TIN CHUNG\\mail vib.docx";
        //var url = window.encodeURIComponent(url1);
        //window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
    }
    $scope.viewImage = function (id) {
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //toDataUrl(window.location.origin + userModel.Url, function (myBase64) {
        //    var modalInstance = $uibModal.open({
        //        templateUrl: '/views/admin/edmsRepository/imageViewer.html',
        //        controller: 'contractTabFileImageViewer',
        //        backdrop: 'static',
        //        size: '40',
        //        resolve: {
        //            para: function () {
        //                return myBase64;
        //            }
        //        }
        //    });
        //    modalInstance.result.then(function (d) {
        //    }, function () {
        //    });
        //});
    }
    $scope.dowload = function (fileCode) {
        location.href = "/Admin/EDMSRepository/DownloadFile?fileCode="
            + fileCode;
    }
    $scope.extend = function (id) {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderCardJob + '/materialTabFileAdd.html',
            controller: 'materialTabFileAdd',
            windowClass: 'modal-file',
            backdrop: 'static',
            size: '60',
            resolve: {
                para: function () {
                    return "";
                }
            }
        });
        modalInstance.result.then(function (d) {
            reloadData()
        }, function () { });
    }
    $scope.loadFile = function (event) {
        $scope.file = event.target.files[0];
    }
    function loadDate() {
        $("#FromTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#DateTo').datepicker('setStartDate', maxDate);
        });
        $("#DateTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#FromTo').datepicker('setEndDate', maxDate);
        });
        $('.end-date').click(function () {
            $('#FromTo').datepicker('setEndDate', null);
        });
        $('.start-date').click(function () {
            $('#DateTo').datepicker('setStartDate', null);
        });
    }
    setTimeout(function () {
        loadDate();
    }, 200);
});

app.controller('materialTabFileAdd', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModalInstance, dataserviceCardJob, para) {
    $scope.treeDataCategory = [];
    $scope.catCode = para.CatCode;
    $scope.model = {
        NumberDocument: '',
        Tags: '',
        Desc: ''
    };
    var vm = $scope;
    vm.dt = {};
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/EDMSRepository/JtableFolderSettingWithCategory",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.CatCode = $scope.catCode;
                $scope.selected = [];
            },
            complete: function () {
                App.unblockUI("#contentMain");
                $(".dataTables_scrollBody").addClass('scroller-sm-fade');
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(30)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('scrollY', "340px")
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row).contents())($scope);
            if (data.FolderId == '' || data.FolderId == null) {
                if (para.Path == data.Path) {
                    angular.element(row).addClass('selected');
                }
            } else {
                if (para.FolderId == data.FolderId) {
                    angular.element(row).addClass('selected');
                }
            }
            $(row).find('td:not(:has(label.mt-checkbox))').on('click', function (evt) {
                if (evt.target.localName == 'input' && evt.target.type == 'checkbox') {
                } else {
                    var self = $(this).parent();
                    if ($(self).hasClass('selected')) {
                        $(self).removeClass('selected');
                        $scope.selected[data.Id] = false;
                    } else {
                        $('#tblDataFolder').DataTable().$('tr.selected').removeClass('selected');
                        $scope.selected.forEach(function (obj, index) {
                            if ($scope.selected[index])
                                $scope.selected[index] = false;
                        });
                        $(self).addClass('selected');
                        $scope.selected[data.Id] = true;
                    }
                }
                $scope.$apply();
            });
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle('').notSortable()
        .renderWith(function (data, type, full, meta) {
            if (full.FolderId == '' || full.FolderId == null) {
                if (para.Path == full.Path) {
                    $scope.selected[full.Id] = true;
                } else {
                    $scope.selected[full.Id] = false;
                }
            } else {
                if (para.FolderId == full.FolderId) {
                    $scope.selected[full.Id] = true;
                } else {
                    $scope.selected[full.Id] = false;
                }
            }

            return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-click="toggleOne(selected,$event,' + full.Id + ')"/><span></span></label>';
        }).withOption('sWidth', '30px').withOption('sClass', ''));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FolderName').notSortable().withTitle(caption.MLP_VALIDATE_FOLDER_STORAGE).withOption('sClass', 'nowrap').renderWith(function (data, type, full) {
        return '<i class="jstree-icon jstree-themeicon fa fa-folder icon-state-warning jstree-themeicon-custom" aria-hidden="true"></i>&nbsp;' + data;
    }));
    vm.reloadData = reloadData;
    vm.dt.dtInstance = {};
    function reloadData(resetPaging) {
        vm.dt.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems, evt, itemId) {
        $('#tblDataFolder').DataTable().$('tr.selected').removeClass('selected');
        for (var id in selectedItems) {
            if (id != itemId) {
                selectedItems[id] = false;
            } else {
                if (selectedItems[id]) {
                    $(evt.target).closest('tr').toggleClass('selected');
                }
            }
        }
    }

    $scope.loadFile = function (event) {

        $scope.file = event.target.files[0];
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.submit = function () {
        if ($scope.file == '' || $scope.file == undefined) {
            App.toastrError(caption.COM_MSG_CHOSE_FILE);
        } else {
            var itemSelect = [];
            for (var id in $scope.selected) {
                if ($scope.selected.hasOwnProperty(id)) {
                    if ($scope.selected[id]) {
                        itemSelect.push(id);
                    }
                }
            }
            if (itemSelect.length == 0) {
                App.toastrError(caption.MLP_MSG_CHOOSE_FOLDER_STORAGE);
                return;
            } else if (itemSelect.length > 1) {
                App.toastrError(caption.MLP_MSG_CHOOSE_FOLDER_STORAGE);
                return;
            }

            var data = new FormData();
            data.append("CateRepoSettingId", itemSelect.length != 0 ? itemSelect[0] : "");
            data.append("FileUpload", $scope.file);
            data.append("FileName", $scope.file.name);
            data.append("Desc", $scope.model.Desc);
            data.append("Tags", $scope.model.Tags);
            data.append("NumberDocument", $scope.model.NumberDocument);
            data.append("ProductCode", $rootScope.ProductCode);
            data.append("IsMore", true);
            dataserviceCardJob.insertProductFile(data, function (result) {
                result = result.data;
                if (result.Error) {
                    App.toastrError(result.Title);
                } else {
                    App.toastrSuccess(result.Title);
                    $uibModalInstance.close();
                }
            });
        }
    };

    //treeview
    $scope.ctr = {};
    $scope.readyCB = function () {
        if ($scope.treeDataCategory.length == 0) {
            App.blockUI({
                target: "#contentMainRepository",
                boxed: true,
                message: 'loading...'
            });
            dataserviceCardJob.getTreeCategory(function (result) {
                result = result.data;
                if (!result.Error) {
                    var root = {
                        id: 'root',
                        parent: "#",
                        text: "Tất cả danh mục",//"Tất cả kho dữ liệu"
                        state: { selected: false, opened: true, checkbox_disabled: true, disabled: true }
                    }
                    $scope.treeDataCategory.push(root);
                    var index = 0;
                    $scope.ListParent = result.filter(function (item) {
                        return (item.ParentCode == '#');
                    });
                    for (var i = 0; i < result.length; i++) {
                        if (result[i].ParentCode == '#') {
                            var stt = $scope.ListParent.length - index;
                            if (stt.toString().length == 1) {
                                stt = "0" + stt;
                            }
                            index = index + 1;
                            var data = {
                                id: result[i].Code,
                                parent: 'root',
                                text: stt + ' - ' + result[i].Title,
                                catId: result[i].Id,
                                catCode: result[i].Code,
                                catName: result[i].Title,
                                catParent: result[i].ParentCode,
                                listRepository: result[i].ListRepository,
                                state: { selected: result[i].Code == para.CatCode ? true : false, opened: true }
                            }
                            $scope.treeDataCategory.push(data);
                        } else {
                            var data = {
                                id: result[i].Code,
                                parent: result[i].ParentCode,
                                text: result[i].Code + ' - ' + result[i].Title,
                                catId: result[i].Id,
                                catCode: result[i].Code,
                                catName: result[i].Title,
                                catParent: result[i].ParentCode,
                                listRepository: result[i].ListRepository,
                                state: { selected: result[i].Code == para.CatCode ? true : false, opened: true }
                            }
                            $scope.treeDataCategory.push(data);
                        }
                    }
                    App.unblockUI("#contentMainRepository");
                }
            });
        }
    }
    $scope.selectNodeCategory = function () {
        var listNoteSelect = $scope.ctr.treeInstance.jstree(true).get_checked(true);
        $scope.catCode = listNoteSelect[0].id;
        reloadData(true);
    }
    $scope.deselectNodeCategory = function () {
        $scope.catCode = "";
        reloadData(true);
    }
    $scope.treeConfig = {
        core: {
            multiple: false,
            animation: true,
            error: function (error) {
                $log.error('treeCtrl: error from js tree - ' + angular.toJson(error));
            },
            check_callback: true,
            worker: true,

        },
        types: {
            default: {
                icon: 'fa fa-folder icon-state-warning'
            }
        },
        version: 1,
        plugins: ['checkbox', 'types', 'sort'],
        checkbox: {
            "three_state": false,
            "whole_node": true,
            "keep_selected_style": true,
            "cascade": "undetermined",
        }
    };
    $scope.treeEvents = {
        'ready': $scope.readyCB,
        'select_node': $scope.selectNodeCategory,
        'deselect_node': $scope.deselectNodeCategory,
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('materialTabFileEdit', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.treeDataCategory = [];
    $scope.catCode = para.CateRepoSettingCode;
    $scope.model = {
        NumberDocument: '',
        Tags: '',
        Desc: '',
        FileName: ''
    };
    var vm = $scope;
    vm.dt = {};
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/EDMSRepository/JtableFolderSettingWithCategory",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.CatCode = $scope.catCode;
                $scope.selected = [];
            },
            complete: function () {
                App.unblockUI("#contentMain");
                $(".dataTables_scrollBody").addClass('scroller-sm-fade');
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(30)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('scrollY', "340px")
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row).contents())($scope);
            if (para.Path != null && para.Path != "") {
                if (para.Path == data.Path) {
                    angular.element(row).addClass('selected');
                }
            } else {
                if (para.FolderId == data.FolderId) {
                    angular.element(row).addClass('selected');
                }
            }
            $(row).find('td:not(:has(label.mt-checkbox))').on('click', function (evt) {
                if (evt.target.localName == 'input' && evt.target.type == 'checkbox') {
                } else {
                    var self = $(this).parent();
                    if ($(self).hasClass('selected')) {
                        $(self).removeClass('selected');
                        $scope.selected[data.Id] = false;
                    } else {
                        $('#tblDataFolder').DataTable().$('tr.selected').removeClass('selected');
                        $scope.selected.forEach(function (obj, index) {
                            if ($scope.selected[index])
                                $scope.selected[index] = false;
                        });
                        $(self).addClass('selected');
                        $scope.selected[data.Id] = true;
                    }
                }
                $scope.$apply();
            });
        });

    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle('').notSortable()
        .renderWith(function (data, type, full, meta) {
            if (para.Path != null && para.Path != "") {
                if (para.Path == full.Path) {
                    $scope.selected[full.Id] = true;
                } else {
                    $scope.selected[full.Id] = false;
                }
            }
            else {
                if (para.FolderId == full.FolderId) {
                    $scope.selected[full.Id] = true;
                } else {
                    $scope.selected[full.Id] = false;
                }
            }
            return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-click="toggleOne(selected,$event,' + full.Id + ')"/><span></span></label>';
        }).withOption('sWidth', '30px').withOption('sClass', ''));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FolderName').withOption('sClass', '').withTitle('Thư mục').withOption('sClass', 'nowrap').renderWith(function (data, type, full) {
        return '<i class="jstree-icon jstree-themeicon fa fa-folder icon-state-warning jstree-themeicon-custom" aria-hidden="true"></i>&nbsp;' + data;
    }));
    vm.reloadData = reloadData;
    vm.dt.dtInstance = {};
    function reloadData(resetPaging) {
        vm.dt.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {
        if (selectAll)
            $('#tblDataDetailRepository').DataTable().$('tr:not(.selected)').addClass('selected');
        else
            $('#tblDataDetailRepository').DataTable().$('tr.selected').removeClass('selected');
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems, evt, itemId) {
        $('#tblDataFolder').DataTable().$('tr.selected').removeClass('selected');
        for (var id in selectedItems) {
            if (id != itemId) {
                selectedItems[id] = false;
            } else {
                if (selectedItems[id]) {
                    $(evt.target).closest('tr').toggleClass('selected');
                }
            }
        }
    }

    $scope.init = function () {
        $scope.model.FileName = para.FileName;
        $scope.model.NumberDocument = para.NumberDocument;
        $scope.model.Tags = (para.Tags != '' && para.Tags != null) ? para.Tags.split(',') : [];
        $scope.model.Desc = para.Desc;
    }
    $scope.init();
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.submit = function () {
        var itemSelect = [];
        for (var id in $scope.selected) {
            if ($scope.selected.hasOwnProperty(id)) {
                if ($scope.selected[id]) {
                    itemSelect.push(id);
                }
            }
        }
        if (itemSelect.length == 0) {
            App.toastrError(caption.MLP_MSG_CHOOSE_FOLDER_STORAGE);
        } else if (itemSelect.length > 1) {
            App.toastrError(caption.MLP_MSG_CHOOSE_FOLDER_STORAGE);
        } else {
            if ($scope.editformfile.validate()) {
                var data = new FormData();
                data.append("CateRepoSettingId", itemSelect[0]);
                data.append("FileCode", para.FileCode);
                data.append("Desc", $scope.model.Desc);
                data.append("Tags", $scope.model.Tags);
                data.append("NumberDocument", $scope.model.NumberDocument);
                data.append("ProductCode", $rootScope.ProductCode);
                dataserviceCardJob.updateProductFile(data, function (result) {
                    result = result.data;
                    if (result.Error) {
                        App.toastrError(result.Title);
                    } else {
                        App.toastrSuccess(result.Title);
                        $uibModalInstance.close();
                    }
                });
            }
        }
    };
    //treeview
    $scope.ctr = {};
    $scope.readyCB = function () {
        if ($scope.treeDataCategory.length == 0) {
            App.blockUI({
                target: "#contentMainRepository",
                boxed: true,
                message: 'loading...'
            });
            dataserviceCardJob.getTreeCategory(function (result) {
                result = result.data;
                if (!result.Error) {
                    var root = {
                        id: 'root',
                        parent: "#",
                        text: "Tất cả danh mục",//"Tất cả kho dữ liệu"
                        state: { selected: false, opened: true, checkbox_disabled: true, disabled: true }
                    }
                    $scope.treeDataCategory.push(root);
                    var index = 0;
                    $scope.ListParent = result.filter(function (item) {
                        return (item.ParentCode == '#');
                    });
                    for (var i = 0; i < result.length; i++) {
                        if (result[i].ParentCode == '#') {
                            var stt = $scope.ListParent.length - index;
                            if (stt.toString().length == 1) {
                                stt = "0" + stt;
                            }
                            index = index + 1;
                            var data = {
                                id: result[i].Code,
                                parent: 'root',
                                text: stt + ' - ' + result[i].Title,
                                catId: result[i].Id,
                                catCode: result[i].Code,
                                catName: result[i].Title,
                                catParent: result[i].ParentCode,
                                listRepository: result[i].ListRepository,
                                state: { selected: result[i].Code == para.CateRepoSettingCode ? true : false, opened: true }
                            }
                            $scope.treeDataCategory.push(data);
                        } else {
                            var data = {
                                id: result[i].Code,
                                parent: result[i].ParentCode,
                                text: result[i].Code + ' - ' + result[i].Title,
                                catId: result[i].Id,
                                catCode: result[i].Code,
                                catName: result[i].Title,
                                catParent: result[i].ParentCode,
                                listRepository: result[i].ListRepository,
                                state: { selected: result[i].Code == para.CateRepoSettingCode ? true : false, opened: true }
                            }
                            $scope.treeDataCategory.push(data);
                        }
                    }
                    App.unblockUI("#contentMainRepository");
                    console.log($scope.treeDataCategory);
                }
            });
        }
    }
    $scope.selectNodeCategory = function () {
        var listNoteSelect = $scope.ctr.treeInstance.jstree(true).get_checked(true);
        $scope.catCode = listNoteSelect[0].id;
        reloadData(true);
    }
    $scope.deselectNodeCategory = function () {
        $scope.catCode = "";
        reloadData(true);
    }
    $scope.treeConfig = {
        core: {
            multiple: false,
            animation: true,
            error: function (error) {
                $log.error('treeCtrl: error from js tree - ' + angular.toJson(error));
            },
            check_callback: true,
            worker: true,

        },
        types: {
            default: {
                icon: 'fa fa-folder icon-state-warning'
            }
        },
        version: 1,
        plugins: ['checkbox', 'types', 'sort'],
        checkbox: {
            "three_state": false,
            "whole_node": true,
            "keep_selected_style": true,
            "cascade": "undetermined",
        }
    };
    $scope.treeEvents = {
        'ready': $scope.readyCB,
        'select_node': $scope.selectNodeCategory,
        'deselect_node': $scope.deselectNodeCategory,
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
        //setModalMaxHeight('.modal-file');
    }, 200);
});

app.controller('addProductGroup', function ($scope, $rootScope, $compile, $uibModal, $confirm, $uibModalInstance, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter) {
    $scope.model = {
        ParentID: '',
        Code: '',
        Name: '',
        Description: ''
    }
    $scope.initData = function () {
        dataserviceCardJob.gettreedataCoursetype(function (result) {
            result = result.data;
            $scope.treedataCoursetype = result.Object;
        });
    }
    $scope.initData();
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }
    $scope.submit = function () {
        if ($scope.addform.validate()) {
            dataserviceCardJob.insertProductGroup($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();

                }
            });
        }
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('addSupplier', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, $window) {
    $scope.model = {
        GoogleMap: '',
        SupGroup: '',
        Status: '',
        Address: '',
        CusType: '',
        Role: '',
        Area: ''
    }
    $scope.initLoad = function () {
        $rootScope.ObjectSupplier.SupplierId = '';
        $rootScope.ObjectSupplier.SupplierCode = '';
        dataserviceCardJob.getSupplierArea(function (rs) {
            rs = rs.data;
            $rootScope.SupplierAreas = rs.Object;
            $scope.model.Area = rs.Object.length != 0 ? rs.Object[0].Code : '';
        });
        dataserviceCardJob.getSupplierType(function (rs) {
            rs = rs.data;
            $rootScope.SupplierTypes = rs.Object;
            $scope.model.CusType = rs.Object.length != 0 ? rs.Object[0].Code : '';
        });
        dataserviceCardJob.getSupplierRole(function (rs) {
            rs = rs.data;
            $rootScope.SupplierRoles = rs.Object;
            $scope.model.Role = rs.Object.length != 0 ? rs.Object[0].Code : '';
        });
        dataserviceCardJob.getSupplierGroup(function (rs) {
            rs = rs.data;
            $rootScope.SupplierGroup = rs;
            $scope.model.SupGroup = rs.length != 0 ? rs[0].Code : '';
        });
        dataserviceCardJob.getSupplierStatus(function (rs) {
            rs = rs.data;
            $scope.SupplierStatus = rs;
            $rootScope.StatusData = rs;
            $scope.model.Status = rs.length != 0 ? rs[0].Code : '';
        });
    }
    $scope.initLoad();
    $scope.openMap = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderSupplier + '/googleMap.html',
            controller: 'googleMap',
            backdrop: 'static',
            size: '80',
            resolve: {
                para: function () {
                    if ($scope.model.GoogleMap != '') {
                        return {
                            lt: parseFloat($scope.model.GoogleMap.split(',')[0]),
                            lg: parseFloat($scope.model.GoogleMap.split(',')[1]),
                            address: $scope.model.Address,
                        };
                    } else {
                        return '';
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            if (d != undefined) {
                $scope.model.GoogleMap = d.lat + ',' + d.lng;
                $scope.model.Address = d.address;
            }
        }, function () { });
    }
    $scope.tinymceOptions = {
        plugins: 'print preview searchreplace autolink directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount imagetools contextmenu colorpicker textpattern help',
        toolbar: "formatselect bold italic strikethrough forecolor link  alignleft aligncenter alignright alignjustify numlist bullist outdent indent removeformat fullscreen"
    };
    $scope.taxCodeChange = function (taxCode) {
        dataserviceCardJob.getInfoWithTaxCode(taxCode, function (rs) {
            rs = rs.data;
            if (rs.Title != null) {
                $scope.model.SupName = rs.Title;
                $scope.model.Fax = rs.NoiDangKyQuanLy_Fax;
                $scope.model.Address = rs.DiaChiCongTy;
                $scope.model.Mobile = rs.NoiDangKyQuanLy_DienThoai;
            }
        })
    }
    $scope.addCommonSettingArea = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'AREA',
                        GroupNote: 'Khu vực nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierArea(function (rs) {
                rs = rs.data;
                $rootScope.SupplierAreas = rs.Object;
            });
        }, function () { });
    }
    $scope.addCommonSettingSupplierGroup = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_GROUP',
                        GroupNote: 'Nhóm nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierGroup(function (rs) {
                rs = rs.data;
                $rootScope.SupplierGroup = rs;
            })
        }, function () { });
    }
    $scope.addCommonSettingSupplierRole = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_ROLE',
                        GroupNote: 'Vai trò nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierRole(function (rs) {
                rs = rs.data;
                $rootScope.SupplierRoles = rs.Object;
            });
        }, function () { });
    }
    $scope.addCommonSettingSupplierType = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_TYPE',
                        GroupNote: 'Loại nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierType(function (rs) {
                rs = rs.data;
                $rootScope.SupplierTypes = rs.Object;
            });
        }, function () { });
    }
    $scope.addCommonSettingSupplierStatus = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_STATUS',
                        GroupNote: 'Trạng thái nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierStatus(function (rs) {
                rs = rs.data;
                $rootScope.StatusData = rs;
            })
        }, function () { });
    }
    $scope.chkSubTab = function () {
        if ($rootScope.ObjectSupplier.SupplierId == '') {
            App.toastrError("Vui lòng tạo trước nhà cung cấp!");
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.close();
    };
    $scope.changleSelect = function (SelectType) {
        if (SelectType == "Area" && $scope.model.Area != "") {
            $scope.errorArea = false;
        }
        if (SelectType == "SupGroup" && $scope.model.SupGroup != "") {
            $scope.errorSupGroup = false;
        }
        if (SelectType == "Role" && $scope.model.Role != "") {
            $scope.errorRole = false;
        }
        if (SelectType == "CusType" && $scope.model.CusType != "") {
            $scope.errorCusType = false;
        }

        if (SelectType == "Status" && $scope.model.Status != "") {
            $scope.errorStatus = false;
        }
        if (SelectType == "Mobile" && $scope.model.Mobile && $rootScope.partternPhone.test($scope.model.Mobile)) {
            $scope.errorMobile = false;
        } else if (SelectType == "Mobile") {
            $scope.errorMobile = true;
        }
        if (SelectType == "TaxCode" && $scope.model.TaxCode && $rootScope.partternNumber.test($scope.model.TaxCode) || $scope.model.TaxCode == "") {
            $scope.errorTaxCode = false;
        } else if (SelectType == "TaxCode") {
            $scope.errorTaxCode = true;
        }

        if (SelectType == "Fax" && $scope.model.Fax && $rootScope.partternPhone.test($scope.model.Fax)) {
            $scope.errorFax = false;
        } else if (SelectType == "Fax") {
            $scope.errorFax = true;
        }
    }
    $scope.submit = function () {

        validationSelect($scope.model);
        if ($scope.addform.validate() && validationSelect($scope.model).Status == false) {
            var msg = $rootScope.checkDataSupplier($scope.model);
            if (msg.Status) {
                App.toastrError(msg.Title);
                return;
            }
            var mmsg = $rootScope.checkTelephone($scope.model.Mobile);
            if (mmsg.Status) {
                App.toastrError(mmsg.Title);
                return;
            }
            var mmsg1 = $rootScope.checkTelephone($scope.model.Telephone);
            if (mmsg1.Status) {
                App.toastrError(mmsg1.Title);
                return;
            }
            if ($rootScope.ObjectSupplier.SupplierId == '') {
                dataserviceCardJob.insertSupplier($scope.model, function (result) {
                    result = result.data;
                    if (result.Error) {
                        App.toastrError(result.Title);
                    } else {
                        App.toastrSuccess(result.Title);
                        $rootScope.ObjectSupplier.SupplierId = result.ID;
                        $rootScope.ObjectSupplier.SupplierCode = $scope.model.SupCode;
                    }
                });
            } else {
                dataserviceCardJob.updateSupplier($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $rootScope.reloadSupplier(false);
                    }
                });
            }
        }
    }
    function validationSelect(data) {
        var mess = { Status: false, Title: "" };

        if (data.Area == "") {
            $scope.errorArea = true;
            mess.Status = true;
        } else {
            $scope.errorArea = false;

        }
        if (data.SupGroup == "") {
            $scope.errorSupGroup = true;
            mess.Status = true;
        } else {
            $scope.errorSupGroup = false;

        }
        if (data.Role == "") {
            $scope.errorRole = true;
            mess.Status = true;
        } else {
            $scope.errorRole = false;

        }
        if (data.CusType == "") {
            $scope.errorCusType = true;
            mess.Status = true;
        } else {
            $scope.errorCusType = false;

        }
        if (data.Status == "") {
            $scope.errorStatus = true;
            mess.Status = true;
        } else {
            $scope.errorStatus = false;

        }

        if (data.Mobile && !$rootScope.partternPhone.test(data.Mobile)) {
            $scope.errorMobile = true;
            mess.Status = true;
        } else {
            $scope.errorMobile = false;
        }
        if (data.TaxCode && !$rootScope.partternNumber.test(data.TaxCode)) {
            $scope.errorTaxCode = true;
            mess.Status = true;
        } else {
            $scope.errorTaxCode = false;
        }
        if (data.Fax && !$rootScope.partternPhone.test(data.Fax)) {
            $scope.errorFax = true;
            mess.Status = true;
        } else {
            $scope.errorFax = false;
        }

        return mess;
    };
    function initAutocomplete() {
        var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-33.8902, 151.1759), new google.maps.LatLng(-33.8474, 151.2631));
        var options = {
            bounds: defaultBounds,
            types: ['geocode']
        };

        var autocomplete = new google.maps.places.Autocomplete(document.getElementById('textAreaAddress'), options);

        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            lat = place.geometry.location.lat();
            lng = place.geometry.location.lng();
            $("#locationGPS").val(lat + ',' + lng);
            $scope.model.GoogleMap = lat + ',' + lng
            $scope.model.Address = document.getElementById('textAreaAddress').value;
            console.log(lat + ',' + lng);
        });
    }
    setTimeout(function () {
        setModalMaxHeight('.modal');
        setModalDraggable('.modal-dialog');
        //initAutocomplete();
    }, 200);
});

app.controller('editOrderRQ', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    var fileId = -1;
    $scope.entities = [{
        name: 'Thấp',
        checked: false,
        value: 0,
    }, {
        name: 'Trung bình',
        checked: false,
        value: 1,
    }, {
        name: 'Rất cao',
        checked: false,
        value: 2,
    }]
    $scope.key = '';
    $scope.initLoad = function () {

        dataserviceCardJob.getItemOrderRQ(para, function (rs) {
            rs = rs.data;
            rs = rs.Object;
            $scope.model = rs;
            if ($scope.model.Priority == "0") {
                $scope.entities[0].checked = true;
            } else if ($scope.model.Priority == "1") {
                $scope.entities[1].checked = true;
            } else {
                $scope.entities[2].checked = true;
            }
        });
    }
    $scope.initLoad();
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.isMasterFile = function (position, files) {

        // $scope.model.ListFile.splice(0);
        angular.forEach(files, function (file, index) {
            if (position != index) {
                //file.checked = false;
                file.IsMaster = false;
                $scope.model.IsMaster = false;
                file.IsMaster = $scope.model.IsMaster;
            } else {
                //file.checked = true;
                file.IsMaster = true;
                $scope.model.IsMaster = true;
                file.IsMaster = $scope.model.IsMaster;
            }
        })
    }
    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.editform.validate() && validationSelect($scope.model).Status == false) {
            var msg = $rootScope.checkData($scope.model);
            if (msg.Status) {
                App.toastrError(msg.Title);
                return;
            }
            var getPriority = $scope.entities.find(function (element) {
                if (element.checked == true) return true;
            });
            if (getPriority) {
                $scope.model.Priority = getPriority.value;
            }

            //var getMasterFile = $scope.ListFile.find(function (element) {
            //    if (element.checked == true) return true;
            //});
            //if (getMasterFile) {
            //    $scope.model.IsMaster = getMasterFile.value;
            //}
            dataserviceCardJob.updateOrderRQ($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    $scope.addKey = function () {
        var str = $("#key").val();
        if (str != '') {
            $("#key").val("");
            $('#Key input').val(str);

            e = jQuery.Event("keypress");
            e.which = 13;
            $("#Key input").keypress(function () {
            }).trigger(e);
        } else {
            App.toastrError(caption.ORR_MSG_INPUT_INFOMATION);
        }
    }
    $scope.googleSearch = function (id) {
        dataserviceCardJob.getAutocomplete($scope.key, function (rs) {
            rs = rs.data;
            if (rs.length != 0) {
                $('#' + id).autocomplete({
                    source: rs
                });
            } else {
                var str = document.getElementById(id).value;
                $.getJSON("https://suggestqueries.google.com/complete/search?callback=?",
                    {
                        "hl": "vi",
                        "q": str,
                        "client": "chrome"
                    }
                )
                    .done(function (data) {
                        data[1].length = 7;
                        $('#' + id).autocomplete({
                            source: data[1]
                        });
                    });
            }
        });
    }
    $scope.updateSelection = function (position, entities) {
        angular.forEach(entities, function (subscription, index) {
            if (position != index) {
                subscription.checked = false;
            }
        });
    }
    $scope.uploadFile = function (event) {
        var files = event.target.files;
        var idxDot = files[0].name.lastIndexOf(".") + 1;
        var name = files[0].name.substr(0, idxDot - 1).toLowerCase();
        var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
        var exist = false;
        for (var i = 0; i < $scope.model.ListFile.length; i++) {
            if ($scope.model.ListFile[i].FileName == name) {
                exist = true;
            }
        }
        if (exist) {
            App.toastrError(caption.COM_MSG_FILE_EXISTS);
        } else {
            var formData = new FormData();
            formData.append("file", files[0]);
            dataserviceCardJob.uploadFile(formData, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    var input = $("#File");
                    input.replaceWith(input.val('').clone(true));
                    $scope.file = {
                        Id: fileId++,
                        FileName: name,
                        FileType: extFile,
                        //User: rs.Object != null ? rs.Object.User : null,
                        //CreatedTime: new Date(),
                        FilePath: rs.Object != null ? rs.Object.Source : null
                    }
                    $scope.model.ListFile.push($scope.file);
                    App.toastrSuccess(rs.Title);
                }
            })
        }
    };
    $scope.deleteFile = function (index, id) {

        if ($scope.model.ListFile[index].IsMaster == false) {
            $scope.model.ListFile.splice(index, 1);
            if (id > 0) {
                $scope.model.ListDeletedFile.push(id);
            }
            App.toastrSuccess(caption.COM_MSG_DELETE_SUCCESS.replace('{0}', caption.COM_FILE));
        } else {
            App.toastrError(caption.ORR_DENY_DELETE);
        }

    }
    setTimeout(function () {
        var numberPeriod = document.getElementById('Phone');
        numberPeriod.onkeydown = function (e) {
            if (!((e.keyCode > 95 && e.keyCode < 106)
                || (e.keyCode > 47 && e.keyCode < 58)
                || e.keyCode == 8)) {
                return false;
            }
        }
        $("#requestTime").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        });
        $('.tag-input').tagsinput();
        setModalDraggable('.modal-dialog');
        setModalMaxHeight('.modal');
    }, 200);
    function validationSelect(data) {
        var mess = { Status: false, Title: "" };

        if (data.Phone && !$rootScope.partternPhone.test(data.Phone)) {
            $scope.errorPhone = true;
            mess.Status = true;
        } else {
            $scope.errorPhone = false;
        }

        return mess;
    };
});

app.controller('editService', function ($scope, $rootScope, $compile, $uibModal, $confirm, $uibModalInstance, dataserviceCardJob, para) {
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }
    $scope.addCommonSettingUnit = function () {

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SERVICE_UNIT',
                        GroupNote: 'Đơn vị dịch vụ',
                        AssetCode: 'SERVICE'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceSVC.getServiceUnit(function (rs) {
                rs = rs.data;
                $rootScope.ServiceUnitData = rs;
            });
        }, function () { });
    }

    $scope.ServiceCategoryParent = [];
    $scope.ServiceCategoryGroup = [];
    $scope.ServiceCategoryType = [];

    $scope.initData = function () {
        dataserviceCardJob.getServiceCategoryParent(function (rs) {
            rs = rs.data;
            $scope.ServiceCategoryParent = rs;
        });
        dataserviceCardJob.getServiceUnit(function (rs) {
            rs = rs.data;
            $rootScope.ServiceUnitData = rs;
        });
        dataserviceCardJob.getItem(para, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                $scope.model = rs;
                if ($scope.model.PathImg == '/images/default/no_image.png') {
                    $scope.model.PathImg = '/images/default/uploadimg.png';
                }

                $rootScope.ServiceCode = $scope.model.ServiceCode;
            }
        });
        dataserviceCardJob.getServiceCategoryGroup(function (rs) {
            rs = rs.data;
            $scope.ServiceCategoryGroup = rs;
        });
        dataserviceCardJob.getServiceCategoryType(function (rs) {
            rs = rs.data;
            $scope.ServiceCategoryType = rs;
        });
    }
    $scope.initData();
    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.editform.validate() && !validationSelect($scope.model).Status) {
            dataserviceCardJob.update($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    $rootScope.reload();
                }
            });
        }
    }
    $scope.changleSelect = function (SelectType) {
        if (SelectType == "ServiceType" && $scope.model.ServiceType != "") {
            $scope.errorServiceType = false;
        }
        if (SelectType == "ServiceGroup" && $scope.model.ServiceGroup != "") {
            $scope.errorServiceGroup = false;
        }
        //if (SelectType == "Unit" && $scope.model.Unit != "") {
        //    $scope.errorUnit = false;
        //}
    }
    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.ServiceType == "") {
            $scope.errorServiceType = true;
            mess.Status = true;
        } else {
            $scope.errorServiceType = false;
        }
        if (data.ServiceGroup == "") {
            $scope.errorServiceGroup = true;
            mess.Status = true;
        } else {
            $scope.errorServiceGroup = false;
        }
        //if (data.Unit == "") {
        //    $scope.errorUnit = true;
        //    mess.Status = true;
        //} else {
        //    $scope.errorUnit = false;
        //}
        return mess;
    };
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('editMaterial', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.model = para;

    $rootScope.groupCode = para.GroupCode;
    $scope.inheritances = [];
    $scope.productCategoryTypes = [];
    $scope.productTypes = [];
    $scope.productImpType = [];
    $rootScope.ProductID = $scope.model.Id;
    $rootScope.isShowInheritance = true;
    $scope.initData = function () {
        dataserviceCardJob.getItemMaterial(para, function (rs) {

            rs = rs.data;
            $scope.model = rs;
            $rootScope.ProductID = $scope.model.Id;
            $rootScope.ProductCode = $scope.model.ProductCode;
            dataserviceCardJob.gettreedataLevel(function (result) {
                result = result.data;
                $scope.treedataLevel = result;
            });
            dataserviceCardJob.getProductImpType(function (result) {
                result = result.data;
                $scope.productImpType = result;
            });
            dataserviceCardJob.getproductgroup(function (result) {
                result = result.data;
                $scope.productgroup = result;
            });
            dataserviceCardJob.getInheritances($scope.model.ProductCode, function (result) {
                result = result.data;
                $scope.inheritances = result;
            });

            dataserviceCardJob.getProductTypes(function (result) {
                result = result.data;
                $scope.productTypes = result;
            });

            $rootScope.Inheritance = $scope.model.Inheritance;
        });
    }
    $scope.initData();
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }

    $scope.selectImage = function () {
        var fileuploader = angular.element("#file");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageId').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                App.toastrError(caption.COM_MSG_INVALID_FORMAT);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click');
    }
    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.addform.validate() && validationSelect($scope.model).Status == false) {
            var msgPrice = $rootScope.checkDataPrice($scope.model);
            if (msgPrice.Status) {
                App.toastrError(msgPrice.Title);
                return;
            }
            var fileName = $('input[type=file]').val();
            var idxDot = fileName.lastIndexOf(".") + 1;
            var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
            if (extFile !== "") {
                if (extFile !== "jpg" && extFile !== "jpeg" && extFile !== "png" && extFile !== "gif" && extFile !== "bmp") {
                    App.toastrError(caption.MLP_MSG_FORMAT_REQUIRED);
                } else {
                    var fi = document.getElementById('file');
                    var fsize = (fi.files.item(0).size) / 1024;
                    if (fsize > 1024) {
                        App.toastrError(caption.MLP_MSG_FILE_SIZE_MAXIMUM);
                    } else {
                        var fileUpload = $("#file").get(0);
                        var reader = new FileReader();
                        reader.readAsDataURL(fileUpload.files[0]);
                        reader.onload = function (e) {
                            //Initiate the JavaScript Image object.
                            var image = new Image();
                            //Set the Base64 string return from FileReader as source.
                            image.src = e.target.result;
                            image.onload = function () {
                                //Determine the Height and Width.
                                var height = this.height;
                                var width = this.width;
                                if (width > 5000 || height > 5000) {
                                    App.toastrError(caption.MLP_MSG_IMG_SIZE_MAXIMUM);
                                } else {
                                    var data = new FormData();
                                    file = fileUpload.files[0];
                                    data.append("FileUpload", file);
                                    dataserviceCardJob.uploadImageMaterial(data, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                            return;
                                        }
                                        else {
                                            $scope.model.Image = '/uploads/images/' + rs.Object;
                                            dataserviceCardJob.update($scope.model, function (rs) {
                                                rs = rs.data;
                                                if (rs.Error) {
                                                    App.toastrError(rs.Title);
                                                } else {
                                                    App.toastrSuccess(rs.Title);
                                                    $uibModalInstance.close();
                                                }
                                            });
                                        }
                                    })
                                }
                            };
                        }
                    }
                }
            } else {
                dataserviceCardJob.updateMaterial($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                        $uibModalInstance.close();
                    }
                });
            }
        }
    }

    $scope.getQrCodeFromString = function () {
        dataserviceCardJob.getQrCodeFromString($scope.model.ProductCode, function (rs) {
            rs = rs.data;
            if (rs == null || rs == "")
                $scope.ImageBase = "";
            else
                $scope.ImageBase = rs;
        });
        dataserviceCardJob.getBarCodeFromString($scope.model.ProductCode, function (rs) {
            rs = rs.data;
            $scope.ImageBase1 = rs;
        });
    }
    $scope.getQrCodeFromString();
    $scope.addGroup = function () {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMaterialProd + '/productGroupAdd.html',
            controller: 'addProductGroup',
            size: '40',
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getproductgroup(function (rs) {
                rs = rs.data;
                $scope.productgroup = rs;
            });
        }, function () {
        });
    }
    $scope.addUnit = function () {

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'UNIT',
                        GroupNote: 'Đơn vị sản phẩm',
                        AssetCode: 'WAREHOUSE'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.gettreedataLevel(function (result) {
                result = result.data;
                $scope.treedataLevel = result;
            });
        }, function () { });
    }
    $scope.addProductImpType = function () {

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'PRODUCT_IMP_TYPE',
                        GroupNote: 'Loại hình nhập kho',
                        AssetCode: 'MATERIAL_PRODUCT'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.gettreedataLevel(function (result) {
                result = result.data;
                $scope.treedataLevel = result;
            });
        }, function () { });
    }
    $scope.addStatus = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'CAT_STATUS',
                        GroupNote: 'Trạng thái sản phẩm',
                        AssetCode: 'WAREHOUSE'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListStatus(function (result) {
                result = result.data;
                $rootScope.StatusData = result;
            });

        }, function () { });
    }

    $scope.clone = function (id) {
        dataserviceCardJob.getItemMaterial(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                $scope.model = rs;
                $rootScope.ProductID = $scope.model.Id;
                $rootScope.ProductCode = $scope.model.ProductCode;
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderMaterialProd + '/add.html',
                    controller: 'add',
                    backdrop: 'static',
                    size: '60',
                    resolve: {
                        para: function () {
                            return $scope.model;
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    $rootScope.reloadBase();
                }, function () {
                });
            }
        });
    }
    $scope.changleSelect = function (SelectType) {
        if (SelectType == "ProductGroup" && $scope.model.ProductGroup != "") {
            $scope.errorProductGroup = false;
        }
        if (SelectType == "unit" && $scope.model.unit != "") {
            $scope.errorUnit = false;
        }

        if (SelectType == "ImpType" && $scope.model.ImpType != "") {
            $scope.errorImpType = false;
        }
        if (SelectType == "GroupCode" && $scope.model.GroupCode != "") {
            $scope.errorGroupCode = false;
            $rootScope.groupCode = $scope.model.GroupCode;

        }
        if (SelectType == "TypeCode" && $scope.model.TypeCode != "") {
            $scope.errorTypeCode = false;
        }
        if (SelectType == "Inheritance" && $scope.model.Inheritance != "") {
            dataserviceCardJob.getInheritancesDetail($scope.model.Inheritance, function (result) {
                result = result.data;
                $scope.model.GroupCode = result[0].GroupCode;
                $scope.model.TypeCode = result[0].TypeCode;
                $scope.model.Unit = result[0].Unit;
                $scope.model.Material = result[0].Material;
                $scope.model.Pattern = result[0].Pattern;
                $scope.model.Size = result[0].Size;
                $scope.model.Note = result[0].Note;
            });
        }
    }
    $scope.viewQrCode = function (code) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderQrCode + '/qrViewerBase64.html',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                $scope.data = code;
                setTimeout(function () {
                    setModalDraggable('.modal-dialog');
                }, 200);
            },
            backdrop: 'static',
            size: '25',
        });
    }
    $scope.viewBarCode = function (code) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderQrCode + '/brViewerBase64.html',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                $scope.data = code;
                setTimeout(function () {
                    setModalDraggable('.modal-dialog');
                }, 200);
            },
            backdrop: 'static',
            size: '25',
        });
    }
    //Load init date
    function validationSelect(data) {
        var mess = { Status: false, Title: "" };

        if (data.Unit == "") {
            $scope.errorUnit = true;
            mess.Status = true;
        } else {
            $scope.errorUnit = false;

        }
        if (data.ImpType == "" || data.ImpType == null) {
            $scope.errorImpType = true;
            mess.Status = true;
        } else {
            $scope.errorImpType = false;
        }
        if (data.GroupCode == "") {
            $scope.errorGroupCode = true;
            mess.Status = true;
        } else {
            $scope.errorGroupCode = false;

        }
        if (data.TypeCode == "") {
            $scope.errorTypeCode = true;
            mess.Status = true;
        } else {
            $scope.errorTypeCode = false;
        }
        return mess;
    };
    function loadDate() {
        $("#ForeCastTime").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        });
        setModalMaxHeight('.modal');
        setModalDraggable('.modal-dialog');
    }
    setTimeout(function () {
        loadDate();
    }, 200);
});

app.controller('editSupplier', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, DTColumnBuilder, DTInstances, dataserviceCardJob, para) {
    $scope.initData = function () {
        $scope.initLoad = function () {
            dataserviceCardJob.getSupplierArea(function (rs) {
                rs = rs.data;
                $rootScope.SupplierAreas = rs.Object;
            });
            dataserviceCardJob.getSupplierType(function (rs) {
                rs = rs.data;
                $rootScope.SupplierTypes = rs.Object;
            });
            dataserviceCardJob.getSupplierRole(function (rs) {
                rs = rs.data;
                $rootScope.SupplierRoles = rs.Object;
            });
        }
        $scope.initLoad();
        dataserviceCardJob.getItemSupplier(para, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                $scope.model = rs;
                $rootScope.ObjectSupplier.SupplierCode = $scope.model.SupCode;
            }
        });
    }
    $scope.initData();
    $scope.openMap = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderSupplier + '/googleMap.html',
            controller: 'googleMap',
            backdrop: 'static',
            size: '80',
            resolve: {
                para: function () {
                    return {
                        lt: $scope.model.GoogleMap != null && $scope.model.GoogleMap != '' ? parseFloat($scope.model.GoogleMap.split(',')[0]) : '',
                        lg: $scope.model.GoogleMap != null && $scope.model.GoogleMap != '' ? parseFloat($scope.model.GoogleMap.split(',')[1]) : '',
                        address: $scope.model.GoogleMap != null && $scope.model.GoogleMap != '' ? $scope.model.Address : '',
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            if (d != undefined) {
                $scope.model.GoogleMap = d.lat + ',' + d.lng;
                $scope.model.Address = d.address;
            }
        }, function () { });
    }
    $scope.tinymceOptions = {
        plugins: 'print preview searchreplace autolink directionality visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount imagetools contextmenu colorpicker textpattern help',
        toolbar: "formatselect bold italic strikethrough forecolor link  alignleft aligncenter alignright alignjustify numlist bullist outdent indent removeformat fullscreen"
    };
    $scope.taxCodeChange = function (taxCode) {
        dataserviceCardJob.getInfoWithTaxCode(taxCode, function (rs) {
            rs = rs.data;
            if (rs.Title != null) {
                $scope.model.SupName = rs.Title;
                $scope.model.Fax = rs.NoiDangKyQuanLy_Fax;
                $scope.model.Address = rs.DiaChiCongTy;
                $scope.model.Mobile = rs.NoiDangKyQuanLy_DienThoai;
            }
        })
    }
    $scope.addCommonSettingArea = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'AREA',
                        GroupNote: 'Khu vực nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierArea(function (rs) {
                rs = rs.data;
                $rootScope.SupplierAreas = rs.Object;
            });
        }, function () { });
    }
    $scope.addCommonSettingSupplierGroup = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_GROUP',
                        GroupNote: 'Nhóm nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierGroup(function (rs) {
                rs = rs.data;
                $rootScope.SupplierGroup = rs;
            })
        }, function () { });
    }
    $scope.addCommonSettingSupplierRole = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_ROLE',
                        GroupNote: 'Vai trò nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierRole(function (rs) {
                rs = rs.data;
                $rootScope.SupplierRoles = rs.Object;
            });
        }, function () { });
    }
    $scope.addCommonSettingSupplierType = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_TYPE',
                        GroupNote: 'Loại nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierType(function (rs) {
                rs = rs.data;
                $rootScope.SupplierTypes = rs.Object;
            });
        }, function () { });
    }
    $scope.addCommonSettingSupplierStatus = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'SUPPLIER_STATUS',
                        GroupNote: 'Trạng thái nhà cung cấp',
                        AssetCode: 'SUPPLIER'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getSupplierStatus(function (rs) {
                rs = rs.data;
                $rootScope.StatusData = rs;
            })
        }, function () { });
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.changleSelect = function (SelectType) {
        if (SelectType == "Area" && $scope.model.Area != "") {
            $scope.errorArea = false;
        }
        if (SelectType == "SupGroup" && $scope.model.SupGroup != "") {
            $scope.errorSupGroup = false;
        }
        if (SelectType == "Role" && $scope.model.Role != "") {
            $scope.errorRole = false;
        }
        if (SelectType == "CusType" && $scope.model.CusType != "") {
            $scope.errorCusType = false;
        }

        if (SelectType == "Status" && $scope.model.Status != "") {
            $scope.errorStatus = false;
        }

        if (SelectType == "Mobile" && $scope.model.Mobile && $rootScope.partternPhone.test($scope.model.Mobile)) {
            $scope.errorMobile = false;
        } else if (SelectType == "Mobile") {
            $scope.errorMobile = true;
        }
        if (SelectType == "Fax" && $scope.model.Fax && $rootScope.partternPhone.test($scope.model.Fax)) {
            $scope.errorFax = false;
        } else if (SelectType == "Fax") {
            $scope.errorFax = true;
        }
        if (SelectType == "TaxCode" && $scope.model.TaxCode && $rootScope.partternNumber.test($scope.model.TaxCode) || $scope.model.TaxCode == "") {
            $scope.errorTaxCode = false;
        } else if (SelectType == "TaxCode") {
            $scope.errorTaxCode = true;
        }

    }
    $scope.addCardJob = function () {
        var userModel = {};
        var listdata = $('#tblData').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].SupID == para) {
                userModel = listdata[i];
                break;
            }
        }
        var obj = {
            Code: userModel.Code,
            Name: userModel.Name,
            TabBoard: 8
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + "/add-card.html",
            controller: 'add-cardCardJob',
            backdrop: 'static',
            size: '80',
            resolve: {
                para: function () {
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (d) {
            //$scope.reload();
        }, function () { });
    };
    $scope.submit = function () {
        validationSelect($scope.model);
        if ($scope.addform.validate() && validationSelect($scope.model).Status == false) {
            var msg = $rootScope.checkDataSupplier($scope.model);
            if (msg.Status) {
                App.toastrError(msg.Title);
                return;
            }
            dataserviceCardJob.updateSupplier($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                }
            });
        }

    }

    function validationSelect(data) {
        var mess = { Status: false, Title: "" };

        if (data.Area == "") {
            $scope.errorArea = true;
            mess.Status = true;
        } else {
            $scope.errorArea = false;

        }
        if (data.SupGroup == "") {
            $scope.errorSupGroup = true;
            mess.Status = true;
        } else {
            $scope.errorSupGroup = false;

        }
        if (data.Role == "") {
            $scope.errorRole = true;
            mess.Status = true;
        } else {
            $scope.errorRole = false;

        }
        if (data.CusType == "") {
            $scope.errorCusType = true;
            mess.Status = true;
        } else {
            $scope.errorCusType = false;

        }
        if (data.Status == "") {
            $scope.errorStatus = true;
            mess.Status = true;
        } else {
            $scope.errorStatus = false;

        }

        if (data.Mobile && !$rootScope.partternPhone.test(data.Mobile)) {
            $scope.errorMobile = true;
            mess.Status = true;
        } else {
            $scope.errorMobile = false;
        }
        if (data.TaxCode && !$rootScope.partternNumber.test(data.TaxCode)) {
            $scope.errorTaxCode = true;
            mess.Status = true;
        } else {
            $scope.errorTaxCode = false;
        }
        if (data.Fax && !$rootScope.partternPhone.test(data.Fax)) {
            $scope.errorFax = true;
            mess.Status = true;
        } else {
            $scope.errorFax = false;
        }

        return mess;
    };
    function initAutocomplete() {
        var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-33.8902, 151.1759), new google.maps.LatLng(-33.8474, 151.2631));
        var options = {
            bounds: defaultBounds,
            types: ['geocode']
        };

        var autocomplete = new google.maps.places.Autocomplete(document.getElementById('textAreaAddress'), options);

        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            lat = place.geometry.location.lat();
            lng = place.geometry.location.lng();
            $("#locationGPS").val(lat + ',' + lng);
            $scope.model.GoogleMap = lat + ',' + lng
            $scope.model.Address = document.getElementById('textAreaAddress').value;
            console.log(lat + ',' + lng);
        });
    }
    setTimeout(function () {
        setModalMaxHeight('.modal');
        setModalDraggable('.modal-dialog');
        //initAutocomplete();
    }, 200);
});

app.controller('add-check-in-out', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, $filter, dataserviceCardJob) {
    $scope.model = {
        ChkinTime: '',
        ChkinLocationTxt: '',
        ChkoutTime: '',
        ChkoutLocationTxt: '',
        ChkinPicRealtime: '',
        ChkoutPicRealtime: '',
        ShiftCode: '',
        Note: '',
        IsChkinRealTime: true
    }
    $scope.cancel = function () {
        var data = {
            ShiftCode: $scope.model.ShiftCode,
            TimeIn: $scope.model.ChkinTime,
            TimeOut: $scope.model.ChkoutTime,
        };
        $uibModalInstance.close(data);
    }
    $scope.isAdd = false;
    $scope.initData = function () {
        dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
            rs = rs.data;
            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.model.ShiftCode = $scope.listShift[0].ShiftCode;
                dataserviceCardJob.getCheckInOutManual($scope.model.ShiftCode, function (rs) {
                    rs = rs.data;
                    $scope.model = rs;
                })

                var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')

                var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                $scope.model.In = inTime;
                $scope.model.Out = outTime;
                if (inDate != outDate && outDate != null) {
                    $scope.model.DateIn = inDate;
                    $scope.model.DateOut = outDate;
                    $scope.isSameDate = false;
                } else {
                    $scope.model.DateInOut = inDate;
                }
                $scope.listShiftFormat = []
                for (var i = 0; i < $scope.listShift.length; i++) {
                    var code = $scope.listShift[i].ShiftCode
                    var dateIn = $filter('date')($scope.listShift[i].ChkinTime, 'HH:mm dd/MM/yyyy');
                    var dateOut = $filter('date')($scope.listShift[i].ChkoutTime, 'HH:mm dd/MM/yyyy')
                    var obj = {
                        ShiftCode: code,
                        DateIn: dateIn,
                        DateOut: dateOut
                    }
                    $scope.listShiftFormat.push(obj);
                }
            }
        })
    }
    $scope.initData();

    $scope.editCheckInOut = function () {
        if ($scope.model.IsChkinRealTime == false) {
            if ($scope.addCheckInOut.validate()) {
                var temp = $rootScope.checkData($scope.model);
                if (temp.Status) {
                    App.toastrError(temp.Title);
                    return;
                }
                var files = $('#FileChkIn').get(0);
                var fileIn = files.files[0];
                var filesOut = $('#FileChkOut').get(0);
                var fileOut = filesOut.files[0];

                var dataOut = new FormData();
                dataOut.append("FileUpload", fileOut);

                var data = new FormData();
                data.append("FileUpload", fileIn);
                if (fileIn != null && fileOut != null) {
                    dataserviceCardJob.uploadImageInOut(data, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        }
                        else {
                            $scope.model.ChkinPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.uploadImageInOut(dataOut, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                    return;
                                }
                                else {
                                    $scope.model.ChkoutPicRealtime = '/uploads/images/' + rs.Object;
                                    dataserviceCardJob.updateCheckInOutManual($scope.model, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                        } else {
                                            var data = {
                                                ShiftCode: $scope.model.ShiftCode,
                                                TimeIn: $scope.model.ChkinTime,
                                                TimeOut: $scope.model.ChkoutTime,
                                            };
                                            App.toastrSuccess(rs.Title);
                                            $uibModalInstance.close(data);
                                        }
                                    })
                                }
                            });
                        }
                    });
                } else if (fileIn != null && fileOut == null) {
                    dataserviceCardJob.uploadImageInOut(data, function (rs) {
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        } else {
                            $scope.model.ChkinPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.updateCheckInOutManual($scope.model, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                    var data = {
                                        ShiftCode: $scope.model.ShiftCode,
                                        TimeIn: $scope.model.ChkinTime,
                                        TimeOut: $scope.model.ChkoutTime,
                                    };
                                    $uibModalInstance.close(data);
                                }
                            })
                        }
                    });
                } else if (fileIn == null && fileOut != null) {
                    dataserviceCardJob.uploadImageInOut(dataOut, function (rs) {
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        } else {
                            $scope.model.ChkoutPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.updateCheckInOutManual($scope.model, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    var data = {
                                        ShiftCode: $scope.model.ShiftCode,
                                        TimeIn: $scope.model.ChkinTime,
                                        TimeOut: $scope.model.ChkoutTime,
                                    };
                                    App.toastrSuccess(rs.Title);
                                    $uibModalInstance.close(data);
                                }
                            })
                        }
                    });
                } else {
                    dataserviceCardJob.updateCheckInOutManual($scope.model, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            var data = {
                                ShiftCode: $scope.model.ShiftCode,
                                TimeIn: $scope.model.ChkinTime,
                                TimeOut: $scope.model.ChkoutTime,
                            };
                            App.toastrSuccess(rs.Title);
                            $uibModalInstance.close(data);
                        }
                    })
                }
            }
        } else {
            App.toastrError(caption.CJ_MSG_CANNOT_EDIT_WORK_SHIFT);
        }
    };
    $scope.add = function () {
        if ($scope.isAdd == false) {
            $scope.model.ChkinTime = "";
            $scope.model.ChkinLocationTxt = "";
            $scope.model.ChkoutTime = "";
            $scope.model.ChkoutLocationTxt = "";
            $scope.model.ChkinPicRealtime = null;
            $scope.model.ChkoutPicRealtime = null;
            $scope.model.ShiftCode = "";
            $scope.model.Note = "";
            $scope.isAdd = true;
        } else {
            if ($scope.addCheckInOut.validate()) {
                var temp = $rootScope.checkData($scope.model);
                if (temp.Status) {
                    App.toastrError(temp.Title);
                    return;
                }
                var files = $('#FileChkIn').get(0);
                var fileIn = files.files[0];
                var filesOut = $('#FileChkOut').get(0);
                var fileOut = filesOut.files[0];

                var dataOut = new FormData();
                dataOut.append("FileUpload", fileOut);

                var data = new FormData();
                data.append("FileUpload", fileIn);
                if (fileIn != null && fileOut != null) {
                    dataserviceCardJob.uploadImageInOut(data, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        }
                        else {
                            $scope.model.ChkinPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.uploadImageInOut(dataOut, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                    return;
                                }
                                else {
                                    $scope.model.ChkoutPicRealtime = '/uploads/images/' + rs.Object;
                                    dataserviceCardJob.checkInOutManual($scope.model, function (rs) {
                                        rs = rs.data;
                                        if (rs.Error) {
                                            App.toastrError(rs.Title);
                                        } else {
                                            var data = {
                                                ShiftCode: rs.Object.ShiftCode,
                                                TimeIn: $scope.model.ChkinTime,
                                                TimeOut: $scope.model.ChkoutTime,
                                            };
                                            App.toastrSuccess(rs.Title);
                                            $uibModalInstance.close(data);
                                        }
                                    })
                                }
                            });
                        }
                    });
                } else if (fileIn != null && fileOut == null) {
                    dataserviceCardJob.uploadImageInOut(data, function (rs) {
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        } else {
                            $scope.model.ChkinPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.checkInOutManual($scope.model, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    App.toastrSuccess(rs.Title);
                                    $uibModalInstance.close();
                                }
                            })
                        }
                    });
                } else if (fileIn == null && fileOut != null) {
                    dataserviceCardJob.uploadImageInOut(dataOut, function (rs) {
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                            return;
                        } else {
                            $scope.model.ChkoutPicRealtime = '/uploads/images/' + rs.Object;
                            dataserviceCardJob.checkInOutManual($scope.model, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    App.toastrError(rs.Title);
                                } else {
                                    var data = {
                                        ShiftCode: rs.Object.ShiftCode,
                                        TimeIn: $scope.model.ChkinTime,
                                        TimeOut: $scope.model.ChkoutTime,
                                    };
                                    App.toastrSuccess(rs.Title);
                                    $uibModalInstance.close(data);
                                }
                            })
                        }
                    });
                } else {
                    dataserviceCardJob.checkInOutManual($scope.model, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            var data = {
                                ShiftCode: rs.Object.ShiftCode,
                                TimeIn: $scope.model.ChkinTime,
                                TimeOut: $scope.model.ChkoutTime,
                            };
                            App.toastrSuccess(rs.Title);
                            $uibModalInstance.close(data);
                        }
                    })
                }
            }
        }
    };
    $scope.changeShift = function (select) {
        if (select == "ShiftCode" && $scope.model.ShiftCode != "") {
            dataserviceCardJob.getCheckInOutManual($scope.model.ShiftCode, function (rs) {
                rs = rs.data;
                $scope.model = rs;
            })
            $scope.isAdd = false;
        }
    }
    $scope.loadImageCheckIn = function () {
        var fileuploader = angular.element("#FileChkIn");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageIn').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile != "jpg" && extFile != "jpeg" && extFile != "png" && extFile != "gif" && extFile != "bmp") {
                App.toastrError(caption.COM_MSG_CHECK_ADD_FILEIMAGE);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click')
    }
    $scope.loadImageCheckOut = function () {
        var fileuploader = angular.element("#FileChkOut");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageOut').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile != "jpg" && extFile != "jpeg" && extFile != "png" && extFile != "gif" && extFile != "bmp") {
                App.toastrError(caption.COM_MSG_CHECK_ADD_FILEIMAGE);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click')
    }
    function loadDate() {
        $("#chkinTime").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii:ss",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#chkoutTime').datetimepicker('setStartDate', maxDate);
        });
        $("#chkoutTime").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy hh:ii:ss",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#chkinTime').datetimepicker('setEndDate', maxDate);
        });
    }
    setTimeout(function () {
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('edit-check-in-out', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, shiftCode) {
    $scope.model = {
        ChkinTime: '',
        ChkinLocationTxt: '',
        ChkoutTime: '',
        ChkoutLocationTxt: '',
        ChkinPicRealtime: '',
        ChkoutPicRealtime: '',
        ShiftCode: '',
        Note: ''
    }
    $scope.initData = function () {
        dataserviceCardJob.getCheckInOutManual(shiftCode, function (rs) {
            rs = rs.data;
            $scope.model = rs;
        })
    }
    $scope.initData();

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }
    $scope.submit = function () {

    }

    $scope.loadImageCheckIn = function () {
        var fileuploader = angular.element("#FileChkIn");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageIn').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile != "jpg" && extFile != "jpeg" && extFile != "png" && extFile != "gif" && extFile != "bmp") {
                App.toastrError(caption.COM_MSG_CHECK_ADD_FILEIMAGE);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click')
    }
    $scope.loadImageCheckOut = function () {
        var fileuploader = angular.element("#FileChkOut");
        fileuploader.on('click', function () {
        });
        fileuploader.on('change', function (e) {
            var reader = new FileReader();
            reader.onload = function () {
                document.getElementById('imageOut').src = reader.result;
            }
            var files = fileuploader[0].files;
            var idxDot = files[0].name.lastIndexOf(".") + 1;
            var extFile = files[0].name.substr(idxDot, files[0].name.length).toLowerCase();
            if (extFile != "jpg" && extFile != "jpeg" && extFile != "png" && extFile != "gif" && extFile != "bmp") {
                App.toastrError(caption.COM_MSG_CHECK_ADD_FILEIMAGE);
                return;
            }
            reader.readAsDataURL(files[0]);
        });
        fileuploader.trigger('click')
    }
    function loadDate() {
        $("#chkinTime").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy HH:ii:ss",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#chkoutTime').datetimepicker('setStartDate', maxDate);
        });
        $("#chkoutTime").datetimepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy HH:ii:ss",
            //dateFormat: "dd/mm/yyyy hh:mm",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#chkinTime').datetimepicker('setEndDate', maxDate);
        });
    }
    setTimeout(function () {
        loadDate();
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('add-card-inherit', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, $uibModalInstance, dataserviceCardJob, cardJob) {
    $scope.model = {
        CardCode: ''
    }

    $scope.cardJob = cardJob;

    $scope.listCardJob = [];

    $scope.initload = function () {
        dataserviceCardJob.scopeCardProject(function (rs) {
            rs = rs.data;
            $scope.listCardInScope = rs;
        })
    }

    $scope.initload();

    $scope.cancel = function () {
        $uibModalInstance.close("cancel");
    };

    $scope.add = function () {
        if ($scope.model.CardCode == "") {
            App.toastrError("Vui lòng chọn việc kế thừa");
        } else {
            var card = $scope.listCardInScope.find(function (element) {
                if (element.CardCode == $scope.model.CardCode) return true;
            });
            $rootScope.CardInherit.Code = $scope.model.CardCode;
            $rootScope.CardInherit.Name = card.CardName;
            dataserviceCardJob.updateCardInheritReal($rootScope.CardCode, $scope.model.CardCode, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                }
            })
            $uibModalInstance.close();
        }
    }
});

app.controller('log-user-activity', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, $uibModalInstance, dataserviceCardJob, cardCode) {
    $scope.initload = function () {
        dataserviceCardJob.logActivityUser(cardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs.Log;
            $scope.countView = rs.CountView
            $scope.countReject = rs.CountReject
            $scope.countAccept = rs.CountAccept
        });
        //dataserviceCardJob.insertCardAuto(function (rs) {
        //    rs = rs.data;
        //    App.toastrSuccess(rs.Title);
        //})
    }
    $scope.initload();
    $scope.cancel = function () {
        $uibModalInstance.close();
    };
});

app.controller('schedule-card', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, $filter, dataserviceCardJob) {
    $scope.model = {
        MemberId: '',
        FromDate: '',
        ToDate: ''
    }
    //$scope.cancel = function () {
    //    $uibModalInstance.close();
    //};
    $scope.statistical = function () {
        dataservice.getWorkTimeOfUser('', '', '', function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolder + '/statistical.html',
                    controller: 'statistical',
                    backdrop: 'static',
                    resolve: {
                        para: function () {
                            return {
                                data: rs.Object.Data,
                                user: rs.Object.User
                            };
                        }
                    },
                    size: '70'
                });
                modalInstance.result.then(function (d) {

                }, function () {
                });
            }
        })
    }
    function loadDate() {
        $("#FromTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#DateTo').datepicker('setStartDate', maxDate);
        });
        $("#DateTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#FromTo').datepicker('setEndDate', maxDate);
        });
        //$('#DateTo').datepicker('update', $rootScope.DateNow);
        $('.end-date').click(function () {
            $('#FromTo').datepicker('setEndDate', null);
        });
        $('.start-date').click(function () {
            $('#DateTo').datepicker('setStartDate', null);
        });
    }
    $rootScope.loadCalendar = function (id) {
        $('#' + id).fullCalendar({
            defaultView: 'month',
            selectable: true,
            editable: true,
            eventLimit: true,
            header: {
                left: 'prev,next,today',
                right: 'prevYear, nextYear',
                center: 'title',
            },
            dayNames: [caption.CJ_LBL_SUNDAY, caption.CJ_LBL_MONDAY, caption.CJ_LBL_TUESDAY, caption.CJ_LBL_WEDNESDAY, caption.CJ_LBL_THUSDAY, caption.CJ_LBL_FRIDAY, caption.CJ_LBL_SATURDAY],
            monthNames: [caption.CJ_LBL_JANUARY + ' - ', caption.CJ_LBL_FEBRUARY + ' - ', caption.CJ_LBL_MARCH + ' - ', caption.CJ_LBL_APRIL + ' - ', caption.CJ_LBL_MAY + ' - ', caption.CJ_LBL_JUNE + ' - ', caption.CJ_LBL_JULY + ' - ', caption.CJ_LBL_AUGUST + ' - ', caption.CJ_LBL_SEPTEMBER + ' - ', caption.CJ_LBL_OCTOBER + ' - ', caption.CJ_LBL_NOVEMBER + ' - ', caption.CJ_LBL_DECEMBER + ' - '],
            monthNamesShort: [caption.CJ_LBL_JAN + ' - ', caption.CJ_LBL_FEB + ' - ', caption.CJ_LBL_MAR + ' - ', caption.CJ_LBL_APR + ' - ', caption.CJ_LBL_MA + ' - ', caption.CJ_LBL_JUN + ' - ', caption.CJ_LBL_JUL + ' - ', caption.CJ_LBL_AUG + ' - ', caption.CJ_LBL_SEP + ' - ', caption.CJ_LBL_OCT + ' - ', caption.CJ_LBL_NOV + ' - ', caption.CJ_LBL_DEC + ' - '],
            dayNamesShort: [caption.CJ_LBL_SUNDAY, caption.CJ_LBL_MON, caption.CJ_LBL_TUE, caption.CJ_LBL_WED, caption.CJ_LBL_THUS, caption.CJ_LBL_FRI, caption.CJ_LBL_SAT],

            buttonText: {
                today: caption.CJ_LBL_TODAY,
                icon: 'far fa-calendar-check'
            },
            events: function (start, end, timezone, callback) {
                var month = $('#calendarCard').fullCalendar('getDate').format('MM');
                var year = $('#calendarCard').fullCalendar('getDate').format('YYYY');
                dataserviceCardJob.scheduleCard(month, year, function (rs) {
                    rs = rs.data;
                    var event = [];
                    angular.forEach(rs.Object, function (value, key) {
                        var created = {
                            value: 4,
                            title: caption.CJ_LBL_CREATE + ": " + value.Created,
                            start: value.Date,
                            className: 'fc-event-event-green',
                            date: value.Date,
                            type: caption.CJ_LBL_CREATE,
                            displayEventTime: false,
                        }
                        var start = {
                            value: 3,
                            title: caption.CJ_LBL_PENDING + ": " + value.Started,
                            start: value.Date,
                            className: 'fc-event-event-orange',
                            date: value.Date,
                            type: caption.CJ_LBL_PENDING,
                            displayEventTime: false,
                        }
                        var done = {
                            value: 2,
                            title: caption.CJ_LBL_SUCCESS + ": " + value.Done,
                            start: value.Date,
                            className: 'fc-event-event-azure',
                            date: value.Date,
                            type: caption.CJ_LBL_SUCCESS,
                            displayEventTime: false,
                        }
                        var cancle = {
                            value: 1,
                            title: caption.CJ_LBL_CANCLE + ": " + value.Canceled,
                            start: value.Date,
                            className: 'fc-event-event-pink',
                            date: value.Date,
                            type: caption.CJ_LBL_CANCLE,
                            displayEventTime: false,
                        }

                        if ($rootScope.searchObj.Status === 'CREATED' || $rootScope.searchObj.Status === undefined || $rootScope.searchObj.Status === null || $rootScope.searchObj.Status === '')
                            event.push(created);

                        if ($rootScope.searchObj.Status === 'START' || $rootScope.searchObj.Status === undefined || $rootScope.searchObj.Status === null || $rootScope.searchObj.Status === '')
                            event.push(start);

                        if ($rootScope.searchObj.Status === 'DONE' || $rootScope.searchObj.Status === undefined || $rootScope.searchObj.Status === null || $rootScope.searchObj.Status === '')
                            event.push(done);

                        if ($rootScope.searchObj.Status === 'CANCLED' || $rootScope.searchObj.Status === undefined || $rootScope.searchObj.Status === null || $rootScope.searchObj.Status === '')
                            event.push(cancle);
                    })
                    callback(event);
                })
            },
            eventClick: function (calEvent) {
                var date = $filter('date')(new Date(calEvent.date), 'dd/MM/yyyy');
                var value = calEvent.value;
                console.log(calEvent);
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/view-card-calendar.html',
                    controller: 'grid-view-card-calendar',
                    size: '70',
                    resolve: {
                        para: function () {
                            return {
                                Date: date,
                                Value: value,
                                Type: calEvent.type
                            }
                        }
                    }
                });
                modalInstance.result.then(function (d) {

                });
            },
            eventOrder: "-value",
        })
    }
    function gotoDate(date) {
        if (!$rootScope.isNext) {
            $('#calendarCard').fullCalendar('gotoDate', date);
        }
    }
    setTimeout(function () {
        $rootScope.loadCalendar("calendarCard");
        setModalDraggable(".modal-dialog");
        $('.fc-prev-button').click(function () {
            $rootScope.isNext = true;
        });
        $('.fc-next-button').click(function () {
            $rootScope.isNext = true;
        });
        $('.fc-today-button').click(function () {
            $rootScope.isNext = true;
        });
        $('.fc-prevYear-button').click(function () {
            $rootScope.isNext = true;
        });
        $('.fc-nextYear-button').click(function () {
            $rootScope.isNext = true;
        });
    }, 200);
});

app.controller('grid-view-card-calendar', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, $uibModalInstance, $filter, dataserviceCardJob, para) {
    $scope.cancel = function () {
        $uibModalInstance.close();
    };
    $scope.date = para.Date;
    $scope.type = para.Type;
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CardJob/GetCardInCalendar",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.Date = para.Date;
                d.Value = para.Value;
            },
            complete: function () {
                App.unblockUI("#contentMain");
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(10)
        .withOption('order', [0, 'asc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            $compile(angular.element(row))($scope);
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("CardID").withTitle(titleHtml).notSortable().renderWith(function (data, type, full, meta) {
        $scope.selected[full.id] = false;
        return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.id + ']" ng-click="toggleOne(selected)"/><span></span></label>';
    }).withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CardName').withTitle('<i class="fa fa-paper-plane mr5"></i>{{"CJ_COL_CARD_NAME" | translate}}').renderWith(function (data, type, full) {
        var deadLine = '';
        if (full.EndTime == '') {
            deadLine = '<span class="badge-customer badge-customer-success fs9 ml5">Không đặt thời hạn</span>'
        } else {
            var created = new Date(full.EndTime);
            var now = new Date();
            var diffMs = (created - now);
            var diffDay = Math.floor((diffMs / 86400000));
            if ((diffDay + 1) < 0) {
                deadLine = '<span class="badge-customer badge-customer-danger fs9 ml5">Đã quá hạn</span>';
            } else if ((diffDay + 1) > 0) {
                deadLine = '<span class="badge-customer badge-customer-success fs9 ml5">Còn ' + (diffDay + 1) + ' ngày</span>'
            } else {
                var end = new Date(new Date().setHours(23, 59, 59, 999));
                var diffMs1 = (end - now);

                var diffHrs = Math.floor((diffMs1 % 86400000) / 3600000);
                var diffMins = Math.round(((diffMs1 % 86400000) % 3600000) / 60000);
                deadLine = '<span class="badge-customer badge-customer-success fs9 ml5">Còn ' + diffHrs + 'h ' + diffMins + 'p</span>'
            }
        }

        if (full.Status == 'Hoàn thành') {
            var cardName = data.length > 40 ? data.substr(0, 40) + " ..." : data;
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                '<span> ' + cardName + '</span >' +
                '<div class="pt5"><span class="badge-customer badge-customer-success fs9">&nbsp;Hoàn thành</span>' +
                '</div';
            //'<span class="badge-customer badge-customer-success fs9 ml5"> ' + $filter('currency')(full.Completed, '', 0) + '%</span></div>';
        } else if (full.Status == 'Đang triển khai') {
            var cardName = data.length > 40 ? data.substr(0, 40) + " ..." : data;
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                '<span> ' + cardName + '</span >' +
                '<div class="pt5"><span class="badge-customer badge-customer-warning">&nbsp;Đang triển khai</span>' + deadLine +
                //'<span class="badge-customer badge-customer-warning fs9 ml5"> ' + $filter('currency')(full.Completed, '', 0) + '%</span></div>' +
                '</div>';
        } else if (full.Status == 'Bị hủy') {
            var cardName = data.length > 40 ? data.substr(0, 40) + " ..." : data;
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                '<span> ' + cardName + '</span >' +
                '<div class="pt5"><span class="badge-customer badge-customer-warning">&nbsp;Bị hủy</span>' +
                //'<span class="badge-customer badge-customer-warning fs9 ml5" > ' + $filter('currency')(full.Completed, '', 0) + '%</span>' +
                '</div>';
        }
        else if (full.Status == 'Mới tạo') {
            var cardName = data.length > 40 ? data.substr(0, 40) + " ..." : data;
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                '<span> ' + cardName + '</span >' +
                '<div class="pt5"><span class="badge-customer badge-customer-danger fs9">&nbsp;Mới tạo</span>' + deadLine +
                //'<span class="badge-customer badge-customer-danger fs9 ml5" > ' + $filter('currency')(full.Completed, '', 0) + '%</span>' +
                '</div>';
        } else if (full.Status == 'Thẻ rác') {
            var cardName = data.length > 40 ? data.substr(0, 40) + " ..." : data;
            return '<span class="bold text-underline" style="color:#ab7474">#' + full.CardCode + ': </span>' +
                '<span> ' + cardName + '</span >' +
                '<div class="pt5"><span class="badge-customer badge-customer-danger fs9">&nbsp;Thẻ rác</span>' + deadLine +
                '</div>';
        }
    }).withOption('sClass', 'nowrap'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('BeginTime').withTitle('<i class="fa fa-calendar mr5"></i>{{"CJ_LIST_COL_START" | translate}}').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('Deadline').withTitle('<i class="fa fa-calendar mr5"></i>{{"CJ_LIST_COL_DEADLINE" | translate}}').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('EndTime').withTitle('<i class="fa fa-calendar mr5"></i>{{"CJ_LIST_COL_END" | translate}}').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    //vm.dtColumns.push(DTColumnBuilder.newColumn('').notSortable().withTitle('<i class="fa fa-recycle mr5"></i>{{"COM_LIST_COL_ACTION" | translate}}').withOption('sClass', 'dataTable-pr0  d-flex w250').renderWith(function (data, type, full, meta) {
    //    return '<div class="pr5"><button title= "Nhóm" ng-click="cardMember(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: #009432;border-color: #009432;" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-users white fs10"></i></button><p class="fs8 text-underline">{{"CJ_BTN_GROUP" | translate}}</p></div>' +
    //        '<div class="pr5 text-center"><button title="Phòng ban" ng-click="cardGroupUser(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: #3598dc;border-color: #3598dc;" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-warehouse white fs10"></i></button><p class="fs8 text-underline nowrap">{{"CJ_BTN_DEPARTMENT" | translate}}</p></div>' +
    //        '<div class="pr5"><button title="Liên kết" ng-click="cardRelative(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: #009432;border-color: #009432;" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-link white fs10"></i></button><p class="fs8 text-underline nowrap">{{"CJ_BTN_LINK" | translate}}</p></div>' +
    //        '<div class="pr5"><button title="Copy" ng-click="cardCopy(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: #8e44ad;border-color: #8e44ad;" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-percent white fs10"></i></button><p class="fs8 text-underline">{{"CJ_BTN_COPY" | translate}}</p></div>' +
    //        '<div class="pr5 text-center"><button title="Sửa" ng-click="edit(\'' + full.CardCode + '\')" style = "width: 25px; height: 25px; padding: 0px;background: #3598dc;border-color: #3598dc;" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit white fs10"></i></button><p class="fs8 text-underline">{{"CJ_BTN_EDIT" | translate}}</p></div>' +
    //        '<div class="text-center"><button title="Xoá" ng-click="delete(' + full.CardID + ')" style="width: 25px; height: 25px; padding: 0px;background: #e7505a;border-color: ##e7505a;" class="btn btn-icon-only btn-circle btn-outline red"><i class="fa fa-trash white fs10"></i></button><p class="fs8 text-underline">{{"COM_BTN_DELETE" | translate}}</p></div>';
    //}));
    vm.reloadData = reloadData;
    vm.dtInstance = {};
    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }
    $scope.edit = function (CardCode) {
        $rootScope.titleModalAssign = 3;
        $rootScope.CardCode = CardCode;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-buffer.html',
            controller: 'edit-cardCardJob',
            backdrop: 'static',
            keyboard: false,
            size: '80',
            resolve: {
                para: function () {
                    return CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            reloadData(false);
            updateNotify();
            $rootScope.reloadWFBoard($rootScope.searchObj.Object);
        }, function () { });
    };
    setTimeout(function () {
        setModalDraggable(".modal-dialog");
    }, 200);
});

app.controller('assign-user-to-file', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, cardCodeAssign) {
    $scope.model = {
        CardCode: cardCodeAssign.CardCode,
        UserId: '',
        CheckListCode: cardCodeAssign.ChkListCode,
        CheckItem: '',
        Unit: '',
        EstimateTime: ''
    }
    $scope.cancel = function () {
        var lstUser = "";
        for (var i = 0; i < $scope.listUserFile.length; i++) {
            lstUser += $scope.listUserFile[i].Id + ","
        }
        dataserviceCardJob.updateListPermissionViewFile(cardCodeAssign.Id, lstUser, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            } else {
                App.toastrSuccess(rs.Title);
            }
        })
        $uibModalInstance.close(true);
    }
    $scope.initData = function () {
        dataserviceCardJob.getMemberInCardJob(cardCodeAssign.CardCode, function (rs) {
            rs = rs.data;
            $scope.listUsers = rs;
        });
        dataserviceCardJob.getListUserFile(cardCodeAssign.Id, function (rs) {
            rs = rs.data;
            $scope.listUserFile = rs.Object;
        })
    }
    $scope.initData();
    $scope.submit = function () {
        var isExist = false;
        validationSelect($scope.model)
        if (!validationSelect($scope.model).Status) {
            for (var i = 0; i < $scope.listUserFile.length; i++) {
                if ($scope.listUserFile[i].Id == $scope.model.UserId) {
                    isExist = true;
                    break;
                }
            }
            if (!isExist) {
                var user = $scope.listUsers.find(function (element) {
                    if (element.UserId == $scope.model.UserId) return true;
                });
                var obj = {
                    Id: $scope.model.UserId,
                    UserName: "",
                    GivenName: user.GivenName
                }
                $scope.listUserFile.push(obj);
            } else {
                App.toastrError("Nhân viên đã tồn tại");
            }
        }
    }
    $scope.delete = function (id) {
        for (var i = 0; i < $scope.listUserFile.length; i++) {
            if ($scope.listUserFile[i].Id == id) {
                $scope.listUserFile.splice(i, 1);
                break;
            }
        }
    }
    $scope.changeSelect = function (selecType) {
        if (selecType == "UserId" && $scope.model.UserId != "") {
            $scope.errorUserId = false;
        }
    }
    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.UserId == "") {
            $scope.errorUserId = true;
            mess.Status = true;
        } else {
            $scope.errorUserId = false;
        }
        return mess;
    };
    setTimeout(function () {
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('send-notifi-card', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, cardCode) {
    $scope.cancel = function () {
        $uibModalInstance.close(true);
    }
    $scope.initData = function () {
        dataserviceCardJob.getMemberSendNotification(cardCode, function (rs) {
            rs = rs.data;
            $scope.listUsers = rs;
        });
    }
    $scope.initData();

    $scope.approve = function (uId, isCheck) {

        for (var i = 0; i < $scope.listUsers.length; i++) {
            if ($scope.listUsers[i].UserId == uId) {
                if (!isCheck) {
                    $scope.listUsers[i].IsCheck = true;
                }
                else {
                    $scope.listUsers[i].IsCheck = false;
                }
                break;
            }
        }
    }

    $scope.lstData = [];

    $scope.submit = function () {
        if ($scope.listUsers.length > 0) {
            for (var i = 0; i < $scope.listUsers.length; i++) {
                if ($scope.listUsers[i].IsCheck) {
                    $scope.lstData.push($scope.listUsers[i]);
                }
            }
            var data = { CardCode: cardCode, LstUser: $scope.lstData };
            dataserviceCardJob.sendNotification(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    $uibModalInstance.close();
                } else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }
    setTimeout(function () {
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('approve-item-work', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.cancel = function () {
        $uibModalInstance.close(true);
    }

    $scope.chkTitle = para.Title;

    $scope.initData = function () {
        dataserviceCardJob.getItemApprove(para.ChkListCode, function (rs) {
            rs = rs.data;
            $scope.listProgress = rs;
        })
    }

    $scope.initData();

    $scope.approve = function (wSession, progress, isAllow) {

        if (progress == null || progress == "" || progress == undefined) {
            progress = 0;
        }

        var numPro = parseFloat(progress);
        if (numPro > 100) {
            return App.toastrWarning(caption.CJ_MSG_PLS_ENTER_PROGRESS_LESS_THAN_100);
        }
        var data = {
            WorkSession: wSession,
            ProgressFromLeader: progress,
            IsAllow: isAllow
        }
        dataserviceCardJob.approve(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initData();
            }
        })
    }

    $scope.approveAll = function () {
        dataserviceCardJob.approveAll(para.ChkListCode, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initData();
            }
        })
    }

    $scope.enable = function (id, allow, user) {
        if (user != "") {
            var itemActivity = $scope.listProgress.find(function (element) {
                if (element.Id == id) return true;
            });
            if (!allow) {
                itemActivity.IsAllow = true;
                App.toastrWarning(caption.CJ_MSG_WARNING_APPROVE_PROGRESS);
            }
            else {
                itemActivity.IsAllow = false;
            }
        }
    }

    setTimeout(function () {
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('view-detail-job-user', function ($scope, $rootScope, $compile, $filter, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob) {
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CardJob/DetailOfEmploy",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.UserId = $rootScope.listSelectBoardCommon[0].Code;
                d.FromDate = $rootScope.searchObj.FromDate;
                d.ToDate = $rootScope.searchObj.ToDate;
            },
            complete: function (d) {
                App.unblockUI("#contentMain");
                heightTableAuto();
                if (d.responseJSON !== undefined && d.responseJSON !== null) {
                    if (d.responseJSON.data.length > 0) {

                        var total = d.responseJSON.data[0];
                        $rootScope.totalMoney = total.TotalCostValue;
                        $rootScope.totalTimeWork = total.TotalTimeWork;
                    } else {

                    }
                }
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(10)
        .withOption('order', [1, 'asc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row))($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
        })
        .withOption('footerCallback', function (tfoot, data) {

        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("ID").withTitle(titleHtml).notSortable()
        .renderWith(function (data, type, full, meta) {
            $scope.selected[full.ID] = false;
            return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.ID + ']" ng-click="toggleOne(selected)"/><span></span></label>';
        }).withOption('sWidth', '30px').withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('ShiftCode').withTitle('{{"Ca làm việc" | translate}}').renderWith(function (data, full, type) {

        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('TimeWorkShift').withTitle('{{"Số giờ" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('LstCardName').withTitle('{{"Thẻ việc" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('Address').withTitle('{{"Địa điểm làm việc" | translate}}').renderWith(function (data, type) {
        return data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CostValue').withTitle('{{"Kinh phí dự kiến" | translate}}').renderWith(function (data, type) {
        var dt = data != "" ? $filter('currency')(data, '', 0) : 0;
        return '<span class= "text-danger bold">' + dt + '</span>';
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};
    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }
    $rootScope.reloadDetailEmployee = function () {
        $rootScope.totalMoney = 0;
        $rootScope.totalTimeWork = 0;
        reloadData(true);
    }
});

app.controller('fileManage', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, $translate, cardCode) {
    var vm = $scope;
    $scope.selected = [];
    $scope.treeData = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-change="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CardJob/GetFileByObjShare",
            beforeSend: function (jqXHR, settings) {
                resetCheckbox();
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.ObjCode = $scope.model.ObjFileShare;
                d.LstObjCode = $scope.model.ListRepository
            },
            complete: function () {
                App.unblockUI("#contentMain");
                $(".dataTables_scrollBody").addClass('scroller-sm-fade');
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(15)
        .withOption('order', [1, 'desc'])
        .withOption('serverSide', true)
        .withOption('scrollY', "290px")
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row).contents())($scope);
            $(row).find('td:not(:has(label.mt-checkbox))').on('dblclick', function (evt) {
                if (evt.target.localName == 'input' && evt.target.type == 'checkbox') {

                } else {

                    if (data.IsDirectory == 'True') {
                        $scope.breadcrumb.push({ Id: data.Id, Path: data.FileName, Name: data.FileName });
                        $scope.$apply();
                        //(2:Server, 1:Google driver)
                        if ($scope.repository.TypeRepos == 'SERVER') {
                            var folder = '';
                            for (var i = 0; i < $scope.breadcrumb.length; i++) {
                                if ($scope.breadcrumb[i].Path != '') {
                                    folder += "/" + $scope.breadcrumb[i].Path;
                                }
                            }
                            $scope.repository.Folder = folder;
                        } else if ($scope.repository.TypeRepos == 'DRIVER') {
                            $scope.repository.ParentId = data.Id;
                        }
                        $scope.reload();
                    }
                    else if (data.IsDirectory == 'False') {
                        $scope.path = "/" + $scope.breadcrumb[1].Path + "/" + data.FileName;
                        dataserviceCardJob.getFileEDMS($scope.path, data.FileSize, data.LastModifiedDate, cardCode, function (rs) {
                            rs = rs.data;
                            if (rs.Error) {
                                App.toastrError(rs.Title);
                            } else {
                                App.toastrSuccess(rs.Title);
                            }
                        })
                    }
                }
            });
        });

    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle(titleHtml).notSortable()
        .renderWith(function (data, type, full, meta) {
            $scope.selected[full.Id] = false;
            return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-change="toggleOne(selected)"/><span></span></label>';
        }).withOption('sWidth', '30px').withOption('sClass'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileName').withOption('sClass', '').withTitle($translate('EDMSR_LIST_COL_FILE_NAME')).withOption('sClass', 'nowrap').renderWith(function (data, type, full) {
        var dataSubstr = data.length > 80 ? data.substr(0, 80) + " ..." : data;
        var excel = ['XLSM', 'XLSX', 'XLS'];
        var document = ['TXT'];
        var word = ['DOCX', 'DOC'];
        var pdf = ['PDF'];
        var powerPoint = ['PPS', 'PPTX', 'PPT'];
        var image = ['JPG', 'PNG', 'TIF', 'TIFF'];
        var icon = "";
        var idxDot = full.FileUrl.lastIndexOf(".") + 1;
        var extFile = full.FileUrl.substr(idxDot, full.FileUrl.length).toUpperCase();

        if (excel.indexOf(extFile.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(106,170,89);font-size: 15px;" class="fa fa-file-excel-o pr5" aria-hidden="true"></i>';
        } else if (word.indexOf(extFile.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(13,118,206);font-size: 15px;" class="fa fa-file-word-o pr5" aria-hidden="true"></i>';
        } else if (document.indexOf(extFile.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(0,0,0);font-size: 15px;" class="fa fa-file-text-o pr5" aria-hidden="true"></i>';
        } else if (pdf.indexOf(extFile.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-pdf-o pr5" aria-hidden="true"></i>';
        } else if (powerPoint.indexOf(extFile.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-powerpoint-o pr5" aria-hidden="true"></i>';
        } else if (image.indexOf(extFile.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fa fa-picture-o pr5" aria-hidden="true"></i>';
        } else {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fas fa-align-justify pr5" aria-hidden="true"></i>';
        }
        return icon + dataSubstr;
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};
    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {

        if (selectAll)
            $('#tblDataDetailRepository').DataTable().$('tr:not(.selected)').addClass('selected');
        else
            $('#tblDataDetailRepository').DataTable().$('tr.selected').removeClass('selected');
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems) {

        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }
    function resetCheckbox() {
        $scope.selected = [];
        vm.selectAll = false;
    }
    $scope.reload = function () {
        reloadData(true);
    }
    $scope.cancel = function () {
        $uibModalInstance.close('cancel');
    }

    $scope.initData = function () {
        dataserviceCardJob.getObjFileShare(function (rs) {
            rs = rs.data;
            $scope.lstObjFileShare = rs;
        })
    }
    $scope.initData();

    //treeview
    $scope.model = {
        ListRepository: []
    }
    var nodeBefore = "";

    $scope.readyCB = function () {
        App.blockUI({
            target: "#contentMainRepository",
            boxed: true,
            message: 'loading...'
        });
        dataserviceCardJob.getTreeCategory(function (result) {
            result = result.data;

            if (!result.Error) {
                var root = {
                    id: 'root',
                    parent: "#",
                    text: "Tất cả kho dữ liệu",//"Tất cả kho dữ liệu"
                    state: { selected: false, opened: true, checkbox_disabled: true, disabled: true }
                }
                $scope.treeData.push(root);
                var index = 0;
                $scope.ListParent = result.filter(function (item) {
                    return (item.ParentCode == '#');
                });
                for (var i = 0; i < result.length; i++) {
                    if (result[i].ParentCode == '#') {
                        var stt = $scope.ListParent.length - index;
                        if (stt.toString().length == 1) {
                            stt = "0" + stt;
                        }
                        index = index + 1;
                        var data = {
                            id: result[i].Code,
                            parent: 'root',
                            text: stt + ' - ' + result[i].Title,
                            catId: result[i].Id,
                            catCode: result[i].Code,
                            catName: result[i].Title,
                            catParent: result[i].ParentCode,
                            listRepository: result[i].ListRepository,
                            state: { selected: false, opened: true }
                        }
                        $scope.treeData.push(data);
                    } else {
                        var data = {
                            id: result[i].Code,
                            parent: result[i].ParentCode,
                            text: result[i].Code + ' - ' + result[i].Title,
                            catId: result[i].Id,
                            catCode: result[i].Code,
                            catName: result[i].Title,
                            catParent: result[i].ParentCode,
                            listRepository: result[i].ListRepository,
                            state: { selected: false, opened: true }
                        }
                        $scope.treeData.push(data);
                    }
                }
                App.unblockUI("#contentMainRepository");
            }
        });
    }

    $scope.selectNodeRepository = function (e, data) {

        var listSelect = [];
        $scope.model.ObjFileShare = "";
        var idCurrentNode = data.node.id;
        if (nodeBefore != idCurrentNode) {
            $("#" + nodeBefore + "_anchor").removeClass('bold');

            nodeBefore = idCurrentNode;
            $scope.recentFile = false;
            var listNoteSelect = $scope.treeInstance.jstree(true).get_checked(true);
            for (var i = 0; i < listNoteSelect.length; i++) {
                listSelect.push(listNoteSelect[i].id);
            }
            $scope.model.ListRepository = listSelect;
            $scope.reload();
        }
        else {
            $scope.recentFile = false;
            listSelect = [];
            $("#" + idCurrentNode + "_anchor").addClass('bold');
            listSelect.push(idCurrentNode);
            $scope.model.ListRepository = listSelect;
            $scope.reload();
        }
    }

    $scope.deselectNodeRepository = function (e, data) {
        $scope.recentFile = false;
        var listSelect = [];
        var listNoteSelect = $scope.treeInstance.jstree(true).get_checked(true);
        if (listNoteSelect.length > 0) {
            for (var i = 0; i < listNoteSelect.length; i++) {
                listSelect.push(listNoteSelect[i].id);
                dataserviceCardJob.getTreeInNode(listNoteSelect[i].id, function (rs) {
                    rs = rs.data;
                    if (rs.length > 0) {
                        for (var i = 0; i < rs.length; i++) {
                            listSelect.push(rs[i].Code);
                        }
                    }
                    $scope.model.ListRepository = listSelect;
                    $scope.reload();
                })
            }
        } else {
            $scope.model.ListRepository = listSelect;
            $scope.reload();
        }


    }

    $scope.treeConfig = {
        core: {
            multiple: true,
            animation: true,
            error: function (error) {
                //$log.error('treeCtrl: error from js tree - ' + angular.toJson(error));
            },
            check_callback: true,
            worker: true,

        },
        types: {
            default: {
                icon: 'fa fa-folder icon-state-warning'
            }
        },
        version: 1,
        plugins: ['checkbox', 'types', 'contextmenu'],
        checkbox: {
            "three_state": false,
            "whole_node": false,
            "keep_selected_style": false,
            "cascade": "undetermined",
        },
        contextmenu: {
            items: customMenu
        }
    };

    $scope.treeEvents = {
        'ready': $scope.readyCB,
        'select_node': $scope.selectNodeRepository,
        'deselect_node': $scope.deselectNodeRepository,
    }

    $scope.ac = function () {
        return true;
    }

    function customMenu(node) {
        var items = {
            'item1': {
                'label': caption.COM_BTN_EDIT,
                'icon': "fa fa-edit",
                'action': function (data) {
                    dataservice.getItemCategory(node.original.catId, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: ctxfolder + '/editCategory.html',
                                controller: 'editCategory',
                                backdrop: 'static',
                                size: '70',
                                resolve: {
                                    para: function () {
                                        return rs.Object;
                                    }
                                }
                            });
                            modalInstance.result.then(function (d) {
                                $('#treeDiv').jstree(true).refresh();
                                setTimeout(function () {
                                    $scope.readyCB();
                                }, 200);
                            }, function () {
                            });
                        }
                    })
                }
            },
            'item2': {
                'label': caption.COM_BTN_DELETE,
                'icon': "fa fa-trash",
                'action': function (data) {
                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
                        windowClass: "message-center",
                        resolve: {
                            para: function () {
                                return node.original.catCode;
                            }
                        },
                        controller: function ($scope, $uibModalInstance, para) {
                            $scope.message = caption.EDMSR_MSG_DELETE_CATEGORIES;
                            $scope.ok = function () {

                                dataservice.deleteCategory(para, function (rs) {
                                    rs = rs.data;
                                    if (rs.Error) {
                                        App.toastrError(rs.Title);
                                    } else {
                                        App.toastrSuccess(rs.Title);
                                        $uibModalInstance.close();
                                    }
                                });
                            };

                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        },
                        size: '25',
                    });
                    modalInstance.result.then(function (d) {
                        $('#treeDiv').jstree(true).refresh();
                        setTimeout(function () {
                            $scope.readyCB();
                            $scope.reload();
                        }, 200);
                    }, function () {
                    });
                }
            }
        }
        return items;
    }

    $scope.changeObj = function () {
        $scope.treeInstance.jstree(true).uncheck_all();
        $scope.model.ListRepository = [];
        $scope.reload();
    }

    $scope.addFile = function () {
        var data = [];
        var listdata = $('#tblDataFileShare').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            for (var id in $scope.selected) {
                if ($scope.selected.hasOwnProperty(id)) {
                    if ($scope.selected[id] && listdata[i].Id == id) {
                        if (listdata[i].Id == id) {
                            var obj = {
                                FileID: listdata[i].FileCode,
                                ObjectType: "JOBCARD",
                                ObjectInstance: cardCode,
                                FileCreated: listdata[i].FileCreated,
                                FileUrl: listdata[i].FileUrl,
                                FileName: listdata[i].FileName
                            };
                            data.push(obj);
                            break;
                        }
                    }
                }
            }
        }
        dataserviceCardJob.insertFileShare(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('select-check-item', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.cancel = function () {
        $uibModalInstance.close(true);
    }
    $scope.initData = function () {
        dataserviceCardJob.getCheckListInCard(para, function (rs) {
            rs = rs.data;
            $scope.checkLists = rs;
        });
    }
    $scope.initData();

    $scope.selectChkList = function (id, isChecked) {
        for (var i = 0; i < $scope.checkLists.length; i++) {
            if ($scope.checkLists[i].Id == id) {
                if (!isChecked) {
                    $scope.checkLists[i].IsChecked = true;
                }
                else {
                    $scope.checkLists[i].IsChecked = false;
                }
                break;
            }
        }
    }

    $scope.lstData = [];

    $scope.submit = function () {
        if ($scope.checkLists.length > 0) {
            for (var i = 0; i < $scope.checkLists.length; i++) {
                if ($scope.checkLists[i].IsChecked) {
                    $scope.lstData.push($scope.checkLists[i]);
                }
            }
            $uibModalInstance.close($scope.lstData);
        }
    }
    setTimeout(function () {
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('log-status', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, cardCode) {
    $scope.cancel = function () {
        $uibModalInstance.close();
    }
    $scope.initData = function () {
        dataserviceCardJob.getLogStatusCard(cardCode, function (rs) {
            rs = rs.data;
            $scope.lstStatus = rs;
        });
    }
    $scope.initData();
    setTimeout(function () {
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('log-activity-wf', function ($scope, $rootScope, $compile, $uibModal, $uibModalInstance, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, para) {
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.initLoad = function () {
        dataserviceCardJob.viewLogWF(para.CardCode, para.WfInstCode, function (rs) {
            rs = rs.data;
            $scope.lstAct = rs.Object;
            if ($scope.lstAct.length > 0) {
                for (var i = 0; i < $scope.lstAct.length; i++) {
                    $scope.lstAct[i].StartTime = $scope.timeRemaining($scope.lstAct[i].StartTime, $scope.lstAct[i].Unit);
                }
            }
        })
    }

    $scope.timeRemaining = function (date, type) {
        var dateNow = new Date();
        var date22 = new Date(date);

        var dateNow_s = dateNow.getTime();
        var date22_s = date22.getTime();
        var offset = date22_s - dateNow_s;
        if (offset > 0) {
            if (type == "Phút") {
                var totalMinutes = Math.round(offset / 1000 / 60);
                return totalMinutes;
            }
            if (type == "Giờ") {
                var totalMinutes = Math.round(offset / 1000 / 60 / 60);
                return totalMinutes;
            }
            if (type == "Ngày") {
                var totalMinutes = Math.round(offset / 1000 / 60 / 60 / 24);
                return totalMinutes;
            }
            if (type == "Giây") {
                var totalMinutes = Math.round(offset / 1000);
                return totalMinutes;
            }
            return 0;
        }
        else {
            return 0;
        }
    };

    setTimeout(function () {
        $scope.initLoad();
        setModalDraggable('.modal-dialog');
        setModalMaxHeight('.modal');
    }, 300);
});

app.controller('fileCardJob', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, $translate, dataserviceSupplier, $window) {
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    $scope.model = {
        FromDate: '',
        ToDate: '',
    }
    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CardJob/JTableFile",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#fileCardJob",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.CardCode = $rootScope.CardCode;
                d.FromDate = $scope.model.FromDate;
                d.ToDate = $scope.model.ToDate;
            },
            complete: function () {
                App.unblockUI("#fileCardJob");
                heightTableManual(335, "#tblDataCustomerFile");
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(5)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row))($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle(titleHtml).notSortable().renderWith(function (data, type, full, meta) {
        $scope.selected[full.Id] = false;
        return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-click="toggleOne(selected)"/><span></span></label>';
    }).withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileName').withTitle("{{'CJ_LBL_TITLE' | translate}}").renderWith(function (data, type, full) {
        var excel = ['.XLSM', '.XLSX', '.XLS'];
        var document = ['.TXT'];
        var word = ['.DOCX', '.DOC'];
        var pdf = ['.PDF'];
        var powerPoint = ['.PPS', '.PPTX', '.PPT'];
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];
        var icon = "";
        if (excel.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(106,170,89);font-size: 15px;" class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp;';
        } else if (word.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(13,118,206);font-size: 15px;" class="fa fa-file-word-o" aria-hidden="true"></i>&nbsp;';
        } else if (document.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(0,0,0);font-size: 15px;" class="fa fa-file-text-o" aria-hidden="true"></i>&nbsp;';
        } else if (pdf.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-pdf-o" aria-hidden="true"></i>&nbsp;';
        } else if (powerPoint.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-powerpoint-o" aria-hidden="true"></i>&nbsp;';
        } else if (image.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fa fa-picture-o" aria-hidden="true"></i>&nbsp;';
        } else {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fas fa-align-justify" aria-hidden="true"></i>&nbsp;';
        }
        return icon + data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('ReposName').withTitle("{{'CJ_LIST_COL_CAT' | translate}}").renderWith(function (data, type, full) {
        return '<i class="fa fa-folder-open icon-state-warning"></i>&nbsp' + data;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileID').withOption('sClass', 'nowrap w50 text-center').withTitle("{{'CJ_LIST_COL_VIEW_CONTENT' | translate}}").notSortable().renderWith(function (data, type, full) {
        var excel = ['.XLSM', '.XLSX', '.XLS'];
        var document = ['.TXT'];
        var word = ['.DOCX', '.DOC'];
        var pdf = ['.PDF'];
        var powerPoint = ['.PPS', '.PPTX', '.PPT'];
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];

        var mode = 2;
        if (full.ListUserShare != "" && full.ListUserShare != null && full.ListUserShare != undefined) {
            var lstShare = JSON.parse(full.ListUserShare);
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (lstShare[i].Permission != null) {
                            if (!lstShare[i].Permission.Write) {
                                mode = 0;
                                break;
                            }
                        }
                    }
                }
            }
        }

        if (excel.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'excel';
            return '<a ng-click="viewExcel(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-edit fs20"></i></a>';
        } else if (word.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'Syncfusion';
            return '<a ng-click="viewWord(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-edit fs20"></i></a>';
        } else if (pdf.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'pdf';
            return '<a ng-click="viewPDF(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-edit fs20"></i></a>';
        } else if (document.indexOf(full.FileTypePhysic.toUpperCase()) !== -1 || image.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            return '<a ng-click="view(' + full.Id + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-eye fs20"></i></a>';
        } else {
            return '<a ng-click="getObjectFile(0)" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fa-eye fs20"></i></a>';
        }
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('').withTitle('{{"CJ_LIST_COL_DES" | translate}}').withOption('sClass', 'w50 nowrap text-center').notSortable().renderWith(function (data, type, full) {
        return '<a title="Mô tả" ng-click="extension(' + full.FileID + ')" style1="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline blue"><i class="fas fs25 fa-info-circle"></i></a>';
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedTime').withTitle("{{'CJ_COL_CREATE_DATE' | translate}}").withOption('sClass', 'w50 nowrap text-center').renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('action').withTitle($translate('COM_LIST_COL_ACTION')).withOption('sClass', 'w100 nowrap text-center').renderWith(function (data, type, full) {
        if (full.TypeFile == "SHARE") {
            return '<a ng-click="dowload(\'' + full.FileCode + '\')" target="_blank" style="width: 25px; height: 25px; padding: 0px" title="Tải xuống - ' + full.FileName + '" class="btn btn-icon-only btn-circle btn-outline green " download><i class="fa fa-download pt5"></i></a>';
        } else {
            return '<a ng-click="share(' + full.Id + ')" style1="width: 25px; height: 25px; padding: 0px" title="{{&quot; COM_BTN_SHARE &quot; | translate}} - ' + full.FileName + '" class1="btn btn-icon-only btn-circle btn-outline blue "><i class="fas fs25 fa-share-alt pr20 pt5"></i></a>' +
                '<a ng-click="dowload(\'' + full.FileCode + '\')" style1="width: 25px; height: 25px; padding: 0px" title="{{&quot; COM_BTN_DOWNLOAD &quot; | translate}} - ' + full.FileName + '" class1="btn btn-icon-only btn-circle btn-outline green"><i class="fas fs25 pr20 fa-download pt5"></i></a>' +
                '<a title="{{&quot; COM_BTN_DELETE &quot; | translate}}" ng-click="delete(' + full.Id + ')" style1="width: 25px; height: 25px; padding: 0px" class1="btn btn-icon-only btn-circle btn-outline red"><i class="fas fs25 fa-trash-alt text-danger"></i></a>';
        }
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};

    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }

    function callback(json) {

    }

    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }

    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }

    $scope.reload = function () {
        reloadData(true);
    }

    $rootScope.reloadFile = function () {
        $scope.reload();
    }

    $scope.search = function () {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderCustomer + '/file_search.html',
            windowClass: 'modal-file',
            backdrop: 'static',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '30',
        });
        modalInstance.result.then(function (d) {
            reloadData()
        }, function () { });
    }

    $scope.add = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        debugger

        if ($scope.file == '' || $scope.file == undefined) {
            App.toastrError(caption.COM_MSG_CHOSE_FILE);
        } else {
            App.blockUI({
                target: "#modal-body",
                boxed: true,
                message: 'loading...'
            });
            var data = new FormData();
            data.append("FileUpload", $scope.file);
            data.append("CardCode", $rootScope.CardCode);
            data.append("IsMore", false);
            dataserviceCardJob.insertCardJobFile(data, function (result) {
                result = result.data;
                if (result.Error) {
                    App.toastrError(result.Title);
                    App.unblockUI("#modal-body");
                } else {
                    App.toastrSuccess(result.Title);
                    defaultShareFile(result.Object);
                    $scope.reload();
                    App.unblockUI("#modal-body");
                    $scope.file = null;
                    $rootScope.getLogActivity();
                }
            }, function (error) {
                console.log(error);
                App.unblockUI("#modal-body");
                App.toastrError('Hệ thống quản lý file đang gặp sự cố, vui lòng liên hệ administrator');
            });
        }
    }

    $scope.edit = function (fileName, id) {
        dataserviceCardJob.getCardFile(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/file_edit.html',
                    controller: 'fileEditCardJob',
                    windowClass: "modal-file",
                    backdrop: 'static',
                    size: '60',
                    resolve: {
                        para: function () {
                            return {
                                data: rs.Object,
                                FileName: fileName
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    reloadData()
                }, function () { });
            }
        })
    }

    $scope.delete = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }
        if (userModel.TypeFile == "NO_SHARE") {
            dataserviceCardJob.checkPermissionFileNoShare(userModel.FileCode, function (rs) {
                rs = rs.data;
                if (rs == true) {
                    if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                        var lstShare = JSON.parse(userModel.ListUserShare);
                        var isDelete = true;
                        if (lstShare.length > 0) {
                            for (var i = 0; i < lstShare.length; i++) {
                                if (lstShare[i].Code == userName) {
                                    if (!lstShare[i].Permission.Delete) {
                                        isDelete = false;
                                        break;
                                    }
                                }
                            }
                            if (!isDelete) {
                                return App.toastrError("Bạn không có quyền xóa tệp tin");
                            }
                        }
                    }

                    var modalInstance = $uibModal.open({
                        templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
                        windowClass: "message-center",
                        controller: function ($scope, $uibModalInstance) {
                            $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                            $scope.ok = function () {
                                dataserviceCardJob.deleteCardFile(id, function (result) {
                                    result = result.data;
                                    if (result.Error) {
                                        App.toastrError(result.Title);
                                    } else {
                                        App.toastrSuccess(result.Title);
                                        $uibModalInstance.close();
                                        $rootScope.getLogActivity();
                                    }
                                });
                            };
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        },
                        size: '25',
                    });
                    modalInstance.result.then(function (d) {
                        $scope.reload();
                    }, function () {
                    });
                }
                else {
                    App.toastrError(caption.COM_MSG_NO_PERMISSION);
                }
            })
        }
    }

    //$scope.share = function () {
    //    var modalInstance = $uibModal.open({
    //        animation: true,
    //        templateUrl: ctxfolderFileShare + '/fileShare.html',
    //        controller: 'fileShare',
    //        windowClass: 'modal-center',
    //        backdrop: 'static',
    //        size: '60',
    //    });
    //    modalInstance.result.then(function (d) {
    //        $scope.reload();
    //    }, function () { });
    //}

    $scope.viewFile = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        //dataserviceHrEmployeeCustomer.getByteFile(id, function (rs) {rs=rs.data;
        //    
        //    var blob = new Blob([rs.Object], { type: "application/msword;charset=utf-8" });
        //    var blobUrl = URL.createObjectURL(blob);
        //    var url = window.encodeURIComponent(blobUrl);
        //    window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
        //})
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //
        //var dt = userModel.Url;
        //dt = dt.replace("\/", "\\");
        //var url1 = "upload\\repository" + dt;
        //url1 = "\\uploads\\repository\\3.THÔNG TIN CHUNG\\mail vib.docx";
        //var url = window.encodeURIComponent(url1);
        //window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
    }

    $scope.viewImage = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //toDataUrl(window.location.origin + userModel.Url, function (myBase64) {
        //    var modalInstance = $uibModal.open({
        //        templateUrl: '/views/admin/edmsRepository/imageViewer.html',
        //        controller: 'contractTabFileImageViewer',
        //        backdrop: 'static',
        //        size: '40',
        //        resolve: {
        //            para: function () {
        //                return myBase64;
        //            }
        //        }
        //    });
        //    modalInstance.result.then(function (d) {
        //    }, function () {
        //    });
        //});
    }

    $scope.dowload = function (fileCode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].FileCode == fileCode) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.TypeFile == "NO_SHARE") {
            dataserviceCardJob.checkPermissionFileNoShare(userModel.FileCode, function (rs) {
                rs = rs.data;
                if (rs == true) {
                    if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                        var lstShare = JSON.parse(userModel.ListUserShare);
                        var isDownload = true;
                        if (lstShare.length > 0) {
                            for (var i = 0; i < lstShare.length; i++) {
                                if (lstShare[i].Code == userName) {
                                    if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                        isDownload = false;
                                        break;
                                    }
                                }
                            }
                            if (!isDownload) {
                                return App.toastrError("Bạn không có quyền tải tệp tin");
                            }
                        }
                    }

                    location.href = "/Admin/EDMSRepository/DownloadFile?fileCode="
                        + fileCode;
                }
                else {
                    return App.toastrError(caption.COM_MSG_NO_PERMISSION);
                }
            })
        }
        else {
            if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                var lstShare = JSON.parse(userModel.ListUserShare);
                var isDownload = true;
                if (lstShare.length > 0) {
                    for (var i = 0; i < lstShare.length; i++) {
                        if (lstShare[i].Code == userName) {
                            if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                isDownload = false;
                                break;
                            }
                        }
                    }
                    if (!isDownload) {
                        return App.toastrError("Bạn không có quyền tải tệp tin");
                    }
                }
            }

            location.href = "/Admin/EDMSRepository/DownloadFile?fileCode="
                + fileCode;
        }
    }

    $scope.extend = function (id) {
        //dataserviceCardJob.getSuggestionsCardFile($rootScope.CardCode, function (rs) {
        //    rs = rs.data;
        //    var data = rs !== '' ? rs : { CatCode: '', ObjectCode: $rootScope.CardCode, ObjectType: 'CARDJOB' };
        //    var modalInstance = $uibModal.open({
        //        templateUrl: ctxfolderRepository + '/addFile.html',
        //        controller: 'addFile',
        //        windowClass: 'modal-file',
        //        backdrop: 'static',
        //        size: '60',
        //        resolve: {
        //            para: function () {
        //                return data;
        //            }
        //        }
        //    });
        //    modalInstance.result.then(function (d) {
        //        reloadData();
        //        defaultShareFile(d);
        //    }, function () { });
        //})
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceSupplier.getDefaultRepo($rootScope.CardCode, 'CARDJOB', function (rs) {
            rs = rs.data;
            var data = rs !== null ? rs : { CatCode: '', ObjectCode: $rootScope.CardCode, ObjectType: 'CARDJOB' };
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderSupplier + '/addFile.html',
                controller: 'setupRepoDefault',
                windowClass: 'modal-file',
                backdrop: 'static',
                size: '60',
                resolve: {
                    para: function () {
                        return data;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                reloadData();
            }, function () { });
        })
    }

    $scope.loadFile = function (event) {
        $scope.file = event.target.files[0];
    }

    $scope.getObjectFile = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            dataserviceCardJob.getItemFile(id, true, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return null;
                }
            });
        }
    };

    $scope.viewExcel = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.TypeFile == "NO_SHARE") {
            dataserviceCardJob.checkPermissionFileNoShare(userModel.FileCode, function (rs) {
                rs = rs.data;
                if (rs == true) {
                    if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                        var lstShare = JSON.parse(userModel.ListUserShare);
                        var isView = true;
                        if (lstShare.length > 0) {
                            for (var i = 0; i < lstShare.length; i++) {
                                if (lstShare[i].Code == userName) {
                                    if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                        isView = false;
                                        break;
                                    }
                                }
                            }
                            if (!isView) {
                                return App.toastrError("Bạn không có quyền xem tệp tin");
                            }
                        }
                    }

                    if (id === 0) {
                        App.toastrError(caption.COM_MSG_NOT_SUPPORT);
                        return null;
                    } else {
                        if (userModel.SizeOfFile < 20971520) {
                            dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    if (rs.ID === -1) {
                                        App.toastrError(rs.Title);
                                        var object = rs.Object;
                                        if (object != null && object.Type == "DRIVER") {
                                            console.log(object.Link);
                                            $window.open(object.Link, '_blank');
                                        } else {
                                            setTimeout(function () {
                                                window.open('/Admin/Excel#', '_blank');
                                            }, 2000);
                                        }
                                    } else {
                                        App.toastrError(rs.Title);
                                    }
                                    return null;
                                } else {
                                    var object = rs.Object;
                                    if (object != null && object.Type == "DRIVER") {
                                        $window.open(object.Link, '_blank');
                                    } else {
                                        window.open('/Admin/Excel#', '_blank');
                                    }
                                }
                            });
                        } else {
                            App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
                        }

                    }
                }
                else {
                    App.toastrError(caption.COM_MSG_NO_PERMISSION);
                }
            })
        }
        else {
            if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                var lstShare = JSON.parse(userModel.ListUserShare);
                var isView = true;
                if (lstShare.length > 0) {
                    for (var i = 0; i < lstShare.length; i++) {
                        if (lstShare[i].Code == userName) {
                            if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                isView = false;
                                break;
                            }
                        }
                    }
                    if (!isView) {
                        return App.toastrError("Bạn không có quyền xem tệp tin");
                    }
                }
            }

            if (id === 0) {
                App.toastrError(caption.COM_MSG_NOT_SUPPORT);
                return null;
            } else {
                if (userModel.SizeOfFile < 20971520) {
                    dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            if (rs.ID === -1) {
                                App.toastrError(rs.Title);
                                var object = rs.Object;
                                if (object != null && object.Type == "DRIVER") {
                                    console.log(object.Link);
                                    $window.open(object.Link, '_blank');
                                } else {
                                    setTimeout(function () {
                                        window.open('/Admin/Excel#', '_blank');
                                    }, 2000);
                                }
                            } else {
                                App.toastrError(rs.Title);
                            }
                            return null;
                        } else {
                            var object = rs.Object;
                            if (object != null && object.Type == "DRIVER") {
                                $window.open(object.Link, '_blank');
                            } else {
                                window.open('/Admin/Excel#', '_blank');
                            }
                        }
                    });
                } else {
                    App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
                }

            }
        }
    };

    $scope.viewWord = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.TypeFile == "NO_SHARE") {
            dataserviceCardJob.checkPermissionFileNoShare(userModel.FileCode, function (rs) {
                rs = rs.data;
                if (rs == true) {
                    if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                        var lstShare = JSON.parse(userModel.ListUserShare);
                        var isView = true;
                        if (lstShare.length > 0) {
                            for (var i = 0; i < lstShare.length; i++) {
                                if (lstShare[i].Code == userName) {
                                    if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                        isView = false;
                                        break;
                                    }
                                }
                            }
                            if (!isView) {
                                return App.toastrError("Bạn không có quyền xem tệp tin");
                            }
                        }
                    }

                    if (id === 0) {
                        App.toastrError(caption.COM_MSG_NOT_SUPPORT);
                        return null;
                    } else {
                        if (userModel.SizeOfFile < 20971520) {
                            dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    if (rs.ID === -1) {
                                        App.toastrError(rs.Title);
                                        var object = rs.Object;
                                        if (object != null && object.Type == "DRIVER") {
                                            console.log(object.Link);
                                            $window.open(object.Link, '_blank');
                                        } else {
                                            setTimeout(function () {
                                                window.open('/Admin/Docman#', '_blank');
                                            }, 2000);
                                        }
                                    } else {
                                        App.toastrError(rs.Title);
                                    }
                                    return null;
                                } else {
                                    var object = rs.Object;
                                    if (object != null && object.Type == "DRIVER") {
                                        $window.open(object.Link, '_blank');
                                    } else {
                                        window.open('/Admin/Docman#', '_blank');
                                    }
                                }
                            });
                        } else {
                            App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
                        }
                    }
                }
                else {
                    App.toastrError(caption.COM_MSG_NO_PERMISSION);
                }
            })
        }
        else {
            if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                var lstShare = JSON.parse(userModel.ListUserShare);
                var isView = true;
                if (lstShare.length > 0) {
                    for (var i = 0; i < lstShare.length; i++) {
                        if (lstShare[i].Code == userName) {
                            if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                isView = false;
                                break;
                            }
                        }
                    }
                    if (!isView) {
                        return App.toastrError("Bạn không có quyền xem tệp tin");
                    }
                }
            }

            if (id === 0) {
                App.toastrError(caption.COM_MSG_NOT_SUPPORT);
                return null;
            } else {
                if (userModel.SizeOfFile < 20971520) {
                    dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            if (rs.ID === -1) {
                                App.toastrError(rs.Title);
                                var object = rs.Object;
                                if (object != null && object.Type == "DRIVER") {
                                    console.log(object.Link);
                                    $window.open(object.Link, '_blank');
                                } else {
                                    setTimeout(function () {
                                        window.open('/Admin/Docman#', '_blank');
                                    }, 2000);
                                }
                            } else {
                                App.toastrError(rs.Title);
                            }
                            return null;
                        } else {
                            var object = rs.Object;
                            if (object != null && object.Type == "DRIVER") {
                                $window.open(object.Link, '_blank');
                            } else {
                                window.open('/Admin/Docman#', '_blank');
                            }
                        }
                    });
                } else {
                    App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
                }
            }
        }
    };

    $scope.viewPDF = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.TypeFile == "NO_SHARE") {
            dataserviceCardJob.checkPermissionFileNoShare(userModel.FileCode, function (rs) {
                rs = rs.data;
                if (rs == true) {
                    if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                        var lstShare = JSON.parse(userModel.ListUserShare);
                        var isView = true;
                        if (lstShare.length > 0) {
                            for (var i = 0; i < lstShare.length; i++) {
                                if (lstShare[i].Code == userName) {
                                    if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                        isView = false;
                                        break;
                                    }
                                }
                            }
                            if (!isView) {
                                return App.toastrError("Bạn không có quyền xem tệp tin");
                            }
                        }
                    }

                    if (id === 0) {
                        App.toastrError(caption.COM_MSG_NOT_SUPPORT);
                        return null;
                    } else {
                        if (userModel.SizeOfFile < 20971520) {
                            dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                                rs = rs.data;
                                if (rs.Error) {
                                    if (rs.ID === -1) {
                                        App.toastrError(rs.Title);
                                        var object = rs.Object;
                                        if (object != null && object.Type == "DRIVER") {
                                            console.log(object.Link);
                                            $window.open(object.Link, '_blank');
                                        } else {
                                            setTimeout(function () {
                                                window.open('/Admin/PDF#', '_blank');
                                            }, 2000);
                                        }
                                    } else {
                                        App.toastrError(rs.Title);
                                    }
                                    return null;
                                } else {
                                    var object = rs.Object;
                                    if (object != null && object.Type == "DRIVER") {
                                        $window.open(object.Link, '_blank');
                                    } else {
                                        window.open('/Admin/PDF#', '_blank');
                                    }
                                }
                            });
                        } else {
                            App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
                        }
                    }
                }
                else {
                    App.toastrError(caption.COM_MSG_NO_PERMISSION);
                }
            })
        }
        else {
            if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                var lstShare = JSON.parse(userModel.ListUserShare);
                var isView = true;
                if (lstShare.length > 0) {
                    for (var i = 0; i < lstShare.length; i++) {
                        if (lstShare[i].Code == userName) {
                            if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                isView = false;
                                break;
                            }
                        }
                    }
                    if (!isView) {
                        return App.toastrError("Bạn không có quyền xem tệp tin");
                    }
                }
            }

            if (id === 0) {
                App.toastrError(caption.COM_MSG_NOT_SUPPORT);
                return null;
            } else {
                if (userModel.SizeOfFile < 20971520) {
                    dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            if (rs.ID === -1) {
                                App.toastrError(rs.Title);
                                var object = rs.Object;
                                if (object != null && object.Type == "DRIVER") {
                                    console.log(object.Link);
                                    $window.open(object.Link, '_blank');
                                } else {
                                    setTimeout(function () {
                                        window.open('/Admin/PDF#', '_blank');
                                    }, 2000);
                                }
                            } else {
                                App.toastrError(rs.Title);
                            }
                            return null;
                        } else {
                            var object = rs.Object;
                            if (object != null && object.Type == "DRIVER") {
                                $window.open(object.Link, '_blank');
                            } else {
                                window.open('/Admin/PDF#', '_blank');
                            }
                        }
                    });
                } else {
                    App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
                }
            }
        }
    };

    $scope.view = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var isImage = false;
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.TypeFile == "NO_SHARE") {
            dataserviceCardJob.checkPermissionFileNoShare(userModel.FileCode, function (rs) {
                rs = rs.data;
                if (rs == true) {
                    if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                        var lstShare = JSON.parse(userModel.ListUserShare);
                        var isView = true;
                        if (lstShare.length > 0) {
                            for (var i = 0; i < lstShare.length; i++) {
                                if (lstShare[i].Code == userName) {
                                    if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                        isView = false;
                                        break;
                                    }
                                }
                            }
                            if (!isView) {
                                return App.toastrError("Bạn không có quyền xem tệp tin");
                            }
                        }
                    }

                    if (image.indexOf(userModel.FileTypePhysic.toUpperCase()) !== -1) {
                        isImage = true;
                    }
                    if (userModel.CloudFileId != null && userModel.CloudFileId != "") {
                        //SHOW LÊN MÀN HÌNH LUÔN
                        // window.open(" https://drive.google.com/file/d/" + userModel.CloudFileId + "/view", "_blank");
                        //$scope.openViewer("https://drive.google.com/file/d/"+userModel.CloudFileId + "/view");3
                        dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                            rs = rs.data;
                            rs.Object = encodeURI(rs.Object);
                            if (rs.Error == false) {
                                if (isImage == false) {
                                    window.open(rs.Object, '_blank')
                                    //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                                } else
                                    $scope.openViewer(rs.Object, isImage);
                                //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                            }
                            else {

                            }
                        });
                    }
                    else {
                        dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                            rs = rs.data;
                            rs.Object = encodeURI(rs.Object);
                            if (rs.Error == false) {
                                if (isImage == false) {
                                    var url = window.location.origin + '/' + rs.Object;
                                    window.open(url, '_blank')
                                    //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                                }
                                else
                                    $scope.openViewer(rs.Object, isImage);
                                //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                            }
                            else {

                            }
                        });
                    }
                }
                else {
                    App.toastrError(caption.COM_MSG_NO_PERMISSION);
                }
            })
        }
        else {
            if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
                var lstShare = JSON.parse(userModel.ListUserShare);
                var isView = true;
                if (lstShare.length > 0) {
                    for (var i = 0; i < lstShare.length; i++) {
                        if (lstShare[i].Code == userName) {
                            if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                                isView = false;
                                break;
                            }
                        }
                    }
                    if (!isView) {
                        return App.toastrError("Bạn không có quyền xem tệp tin");
                    }
                }
            }

            if (image.indexOf(userModel.FileTypePhysic.toUpperCase()) !== -1) {
                isImage = true;
            }
            if (userModel.CloudFileId != null && userModel.CloudFileId != "") {
                //SHOW LÊN MÀN HÌNH LUÔN
                // window.open(" https://drive.google.com/file/d/" + userModel.CloudFileId + "/view", "_blank");
                //$scope.openViewer("https://drive.google.com/file/d/"+userModel.CloudFileId + "/view");3
                dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                    rs = rs.data;
                    rs.Object = encodeURI(rs.Object);
                    if (rs.Error == false) {
                        if (isImage == false) {
                            window.open(rs.Object, '_blank')
                            //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                        } else
                            $scope.openViewer(rs.Object, isImage);
                        //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                    }
                    else {

                    }
                });
            }
            else {
                dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                    rs = rs.data;
                    rs.Object = encodeURI(rs.Object);
                    if (rs.Error == false) {
                        if (isImage == false) {
                            var url = window.location.origin + '/' + rs.Object;
                            window.open(url, '_blank')
                            //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                        }
                        else
                            $scope.openViewer(rs.Object, isImage);
                        //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                    }
                    else {

                    }
                });
            }
        }
    }

    $scope.openViewer = function (url, isImage) {
        var data = {};
        data.url = url;
        data.isImage = isImage;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/viewer.html',
            controller: 'viewer',
            backdrop: 'false',
            size: '60',
            resolve: {
                para: function () {
                    return data;
                }
            }
        });
    }

    $scope.extension = function (item) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderRepository + '/extension.html',
            controller: 'extension',
            backdrop: 'static',
            size: '55',
            resolve: {
                para: function () {
                    return {
                        Type: 'LIST',
                        Object: item
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    $scope.share = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.TypeFile == "NO_SHARE") {
            dataserviceCardJob.checkPermissionFileNoShare(userModel.FileCode, function (rs) {
                rs = rs.data;
                if (rs == true) {
                    if (!$rootScope.isApprove && userModel.CreatedBy != userName) {
                        return App.toastrError("Bạn không có quyền thực hiện chức năng này");
                    }

                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: ctxfolderCardJob + '/shareFile.html',
                        controller: 'shareFile',
                        backdrop: 'static',
                        size: '40',
                        resolve: {
                            para: function () {
                                return {
                                    Id: id,
                                    CardCode: $rootScope.CardCode
                                };
                            }
                        }
                    });
                    modalInstance.result.then(function (d) {
                        $scope.reload();
                    }, function () {
                    });
                }
                else {
                    App.toastrError(caption.COM_MSG_NO_PERMISSION);
                }
            })
        }
    };

    $scope.fileManage = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if ($rootScope.isUpdate) {
            return App.toastrError("Vui lòng vào phiên");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/fileManage.html',
            controller: 'fileManage',
            backdrop: 'static',
            size: '50',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    }

    function loadDate() {
        $("#FromTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#DateTo').datepicker('setStartDate', maxDate);
        });
        $("#DateTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#FromTo').datepicker('setEndDate', maxDate);
        });
        $('.end-date').click(function () {
            $('#FromTo').datepicker('setEndDate', null);
        });
        $('.start-date').click(function () {
            $('#DateTo').datepicker('setStartDate', null);
        });
    }

    $scope.modelShare = {
        Id: '',
        LstShare: ''
    };

    $scope.permission = {
        Read: true,
        Write: true,
        Delete: true
    };

    function defaultShareFile(id) {
        dataserviceCardJob.getListUserShare($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listUser = rs;
            $scope.lstUserShare = [];
            if ($scope.listUser.length > 0) {
                for (var i = 0; i < $scope.listUser.length; i++) {
                    var item = {
                        Code: $scope.listUser[i].Code,
                        Name: $scope.listUser[i].Name,
                        DepartmentName: $scope.listUser[i].DepartmentName,
                        Permission: $scope.permission
                    }
                    $scope.lstUserShare.push(item);
                }
                $scope.modelShare.Id = id;
                $scope.modelShare.LstShare = JSON.stringify($scope.lstUserShare);
                dataserviceCardJob.autoShareFilePermission($scope.modelShare, function (rs) { })
            }
        });
    }

    setTimeout(function () {
        loadDate();
    }, 200);
});

app.controller('fileEditCardJob', function ($scope, $rootScope, $compile, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModal, $uibModalInstance, dataserviceCardJob, para) {
    $scope.treeDataCategory = [];
    $scope.catCode = para.data.CateRepoSettingCode;
    $scope.model = {
        NumberDocument: '',
        Tags: '',
        Desc: '',
        FileName: ''
    };
    var vm = $scope;
    vm.dt = {};
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/EDMSRepository/JtableFolderSettingWithCategory",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#contentMain",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.CatCode = $scope.catCode;
                $scope.selected = [];
            },
            complete: function () {
                App.unblockUI("#contentMain");
                $(".dataTables_scrollBody").addClass('scroller-sm-fade');
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(30)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('scrollY', "340px")
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row).contents())($scope);
            if (para.Path != null && para.Path != "") {
                if (para.Path == data.Path) {
                    angular.element(row).addClass('selected');
                }
            } else {
                if (para.FolderId == data.FolderId) {
                    angular.element(row).addClass('selected');
                }
            }
            $(row).find('td:not(:has(label.mt-checkbox))').on('click', function (evt) {
                if (evt.target.localName == 'input' && evt.target.type == 'checkbox') {
                } else {
                    var self = $(this).parent();
                    if ($(self).hasClass('selected')) {
                        $(self).removeClass('selected');
                        $scope.selected[data.Id] = false;
                    } else {
                        $('#tblDataFolder').DataTable().$('tr.selected').removeClass('selected');
                        $scope.selected.forEach(function (obj, index) {
                            if ($scope.selected[index])
                                $scope.selected[index] = false;
                        });
                        $(self).addClass('selected');
                        $scope.selected[data.Id] = true;
                    }
                }
                $scope.$apply();
            });
        });

    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle('').notSortable()
        .renderWith(function (data, type, full, meta) {
            if (para.Path != null && para.Path != "") {
                if (para.Path == full.Path) {
                    $scope.selected[full.Id] = true;
                } else {
                    $scope.selected[full.Id] = false;
                }
            }
            else {
                if (para.FolderId == full.FolderId) {
                    $scope.selected[full.Id] = true;
                } else {
                    $scope.selected[full.Id] = false;
                }
            }
            return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-click="toggleOne(selected,$event,' + full.Id + ')"/><span></span></label>';
        }).withOption('sWidth', '30px').withOption('sClass', ''));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FolderName').withOption('sClass', '').withTitle('{{"HR_HR_FORDER" | translate}}').withOption('sClass', 'nowrap').renderWith(function (data, type, full) {
        return '<i class="jstree-icon jstree-themeicon fa fa-folder icon-state-warning jstree-themeicon-custom" aria-hidden="true"></i>&nbsp;' + data;
    }));
    vm.reloadData = reloadData;
    vm.dt.dtInstance = {};
    function reloadData(resetPaging) {
        vm.dt.dtInstance.reloadData(callback, resetPaging);
    }
    function callback(json) {

    }
    function toggleAll(selectAll, selectedItems) {
        if (selectAll)
            $('#tblDataDetailRepository').DataTable().$('tr:not(.selected)').addClass('selected');
        else
            $('#tblDataDetailRepository').DataTable().$('tr.selected').removeClass('selected');
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }
    function toggleOne(selectedItems, evt, itemId) {
        $('#tblDataFolder').DataTable().$('tr.selected').removeClass('selected');
        for (var id in selectedItems) {
            if (id != itemId) {
                selectedItems[id] = false;
            } else {
                if (selectedItems[id]) {
                    $(evt.target).closest('tr').toggleClass('selected');
                }
            }
        }
    }

    $scope.init = function () {
        $scope.model.FileName = para.FileName;
        $scope.model.NumberDocument = para.data.NumberDocument;
        $scope.model.Tags = (para.data.Tags != '' && para.data.Tags != null) ? para.data.Tags.split(',') : [];
        $scope.model.Desc = para.data.Desc;
    }
    $scope.init();
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.submit = function () {
        var itemSelect = [];
        for (var id in $scope.selected) {
            if ($scope.selected.hasOwnProperty(id)) {
                if ($scope.selected[id]) {
                    itemSelect.push(id);
                }
            }
        }
        if (itemSelect.length == 0) {
            App.toastrError(caption.HR_HR_MAN_MSG_SELECT_FORDER);
        } else if (itemSelect.length > 1) {
            App.toastrError(caption.HR_HR_MAN_MSG_SELECT_FORDER);
        } else {
            if ($scope.editformfile.validate()) {
                var data = new FormData();
                data.append("CateRepoSettingId", itemSelect[0]);
                data.append("FileCode", para.data.FileCode);
                data.append("Desc", $scope.model.Desc);
                data.append("Tags", $scope.model.Tags);
                data.append("NumberDocument", $scope.model.NumberDocument);
                data.append("CardCode", $rootScope.CardCode);
                dataserviceCardJob.updateCardFile(data, function (result) {
                    result = result.data;
                    if (result.Error) {
                        App.toastrError(result.Title);
                    } else {
                        App.toastrSuccess(result.Title);
                        $uibModalInstance.close();
                    }
                });
            }
        }
    };
    //treeview
    $scope.ctr = {};
    $scope.readyCB = function () {
        if ($scope.treeDataCategory.length == 0) {
            App.blockUI({
                target: "#contentMainRepository",
                boxed: true,
                message: 'loading...'
            });
            dataserviceCardJob.getTreeCategory(function (result) {
                result = result.data;
                if (!result.Error) {
                    var root = {
                        id: 'root',
                        parent: "#",
                        text: "Tất cả danh mục",//"Tất cả kho dữ liệu"
                        state: { selected: false, opened: true, checkbox_disabled: true, disabled: true }
                    }
                    $scope.treeDataCategory.push(root);
                    var index = 0;
                    $scope.ListParent = result.filter(function (item) {
                        return (item.ParentCode == '#');
                    });
                    for (var i = 0; i < result.length; i++) {
                        if (result[i].ParentCode == '#') {
                            var stt = $scope.ListParent.length - index;
                            if (stt.toString().length == 1) {
                                stt = "0" + stt;
                            }
                            index = index + 1;
                            var data = {
                                id: result[i].Code,
                                parent: 'root',
                                text: stt + ' - ' + result[i].Title,
                                catId: result[i].Id,
                                catCode: result[i].Code,
                                catName: result[i].Title,
                                catParent: result[i].ParentCode,
                                listRepository: result[i].ListRepository,
                                state: { selected: result[i].Code == para.data.CateRepoSettingCode ? true : false, opened: true }
                            }
                            $scope.treeDataCategory.push(data);
                        } else {
                            var data = {
                                id: result[i].Code,
                                parent: result[i].ParentCode,
                                text: result[i].Code + ' - ' + result[i].Title,
                                catId: result[i].Id,
                                catCode: result[i].Code,
                                catName: result[i].Title,
                                catParent: result[i].ParentCode,
                                listRepository: result[i].ListRepository,
                                state: { selected: result[i].Code == para.data.CateRepoSettingCode ? true : false, opened: true }
                            }
                            $scope.treeDataCategory.push(data);
                        }
                    }
                    App.unblockUI("#contentMainRepository");
                    console.log($scope.treeDataCategory);
                }
            });
        }
    }
    $scope.selectNodeCategory = function () {
        var listNoteSelect = $scope.ctr.treeInstance.jstree(true).get_checked(true);
        $scope.catCode = listNoteSelect[0].id;
        reloadData(true);
    }
    $scope.deselectNodeCategory = function () {
        $scope.catCode = "";
        reloadData(true);
    }
    $scope.treeConfig = {
        core: {
            multiple: false,
            animation: true,
            error: function (error) {
                $log.error('treeCtrl: error from js tree - ' + angular.toJson(error));
            },
            check_callback: true,
            worker: true,

        },
        types: {
            default: {
                icon: 'fa fa-folder icon-state-warning'
            }
        },
        version: 1,
        plugins: ['checkbox', 'types', 'sort'],
        checkbox: {
            "three_state": false,
            "whole_node": true,
            "keep_selected_style": true,
            "cascade": "undetermined",
        }
    };
    $scope.treeEvents = {
        'ready': $scope.readyCB,
        'select_node': $scope.selectNodeCategory,
        'deselect_node': $scope.deselectNodeCategory,
    }
    setTimeout(function () {
        setModalDraggable('.modal-dialog');
        //setModalMaxHeight('.modal-file');
    }, 200);
});

app.controller('viewer', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModalInstance, para, $sce) {
    var data = para;
    $scope.url = data.url;
    $scope.isImage = data.isImage;
    if ($scope.isImage)
        $scope.url = "/" + $scope.url;
    $scope.currentProjectUrl = $sce.trustAsResourceUrl($scope.url);
    console.log($scope.currentProjectUrl);
    console.log(data);
});

app.controller('shareFile', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModalInstance, dataserviceCardJob, para) {
    $scope.cancel = function () {
        $uibModalInstance.close('cancel');
    };

    $scope.model = {
        UserName: ''
    };

    $scope.model1 = {
        Code: '',
        Name: '',
        DepartmentName: '',
        Id: para.Id
    };

    $scope.permission = {
        Read: true,
        Write: true,
        Delete: true
    };

    $scope.init = function () {
        $scope.model.Id = para.Id;

        dataserviceCardJob.getListUserShare(para.CardCode, function (rs) {
            rs = rs.data;
            $scope.listUser = rs;
        });

        dataserviceCardJob.getUserShareFilePermission($scope.model.Id, function (rs) {
            rs = rs.data;
            $scope.lstUserSharePermission = rs;
        })
    };

    $scope.init();

    $scope.share = function () {
        if ($scope.model.UserName == '') {
            return App.toastrError("Vui lòng chọn nhân viên");
        }
        $scope.model1.Permission = $scope.permission;
        dataserviceCardJob.insertFileShareCard($scope.model1, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getUserShareFilePermission($scope.model.Id, function (rs) {
                    rs = rs.data;
                    $scope.lstUserSharePermission = rs;
                })
            }
        })
    }

    $scope.updatePermission = function (item, position, value) {
        item.Id = para.Id;
        if (position == 0) {
            if (value) {
                item.Permission.Read = false;
                item.Permission.Write = false;
                item.Permission.Delete = false;
            }
            else {
                item.Permission.Read = true;
            }
        }
        else if (position == 1) {
            if (value) {
                item.Permission.Write = false;
                item.Permission.Delete = false;
            }
            else {
                item.Permission.Write = true;
                item.Permission.Read = true;
            }
        }
        else {
            if (value) {
                item.Permission.Delete = false;
            }
            else {
                item.Permission.Delete = true;
                item.Permission.Read = true;
                item.Permission.Write = true;
            }
        }
        dataserviceCardJob.insertFileShareCard(item, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getUserShareFilePermission($scope.model.Id, function (rs) {
                    rs = rs.data;
                    $scope.lstUserSharePermission = rs;
                })
            }
        })
    }

    $scope.deleteShare = function (userName) {
        dataserviceCardJob.deleteShareFile(para.Id, userName, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getUserShareFilePermission($scope.model.Id, function (rs) {
                    rs = rs.data;
                    $scope.lstUserSharePermission = rs;
                })
            }
        })
    }

    $scope.changeUser = function (item) {

        $scope.model1.Name = item.Name;
        $scope.model1.Code = item.Code;
        $scope.model1.DepartmentName = item.DepartmentName;
    }

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('add-card-buffer', function ($scope, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, $filter, para) {
    $scope.cancel = function () {
        CKEDITOR.removeAllListeners();
        CKEDITOR.instances['description'].removeAllListeners();
        if (!$rootScope.isAddedCard) {
            //clearInterval($scope.interval);
            $uibModalInstance.close('cancel');
        }
        else {
            if (!$rootScope.isUpdate) {
                dataserviceCardJob.removeLockShare($rootScope.CardCode, function (rs) {
                    //clearInterval($scope.interval);
                    $uibModalInstance.close('cancel');
                })
            }
            else {
                //clearInterval($scope.interval);
                $uibModalInstance.close('cancel');
            }
        }
    }

    //Declare model angular
    $scope.modelShift = {
        In: '',
        Out: '',
        DateIn: '',
        DateOut: '',
        DateInOut: ''
    };

    $scope.obj = {
        Board: '',
        List: ''
    };

    $scope.model = {
        CardName: '',
        BeginTime: $filter('date')(new Date(), 'dd/MM/yyyy'),
        Deadline: '',
        EndTime: '',
        Status: 'CREATED',
        CardLevel: '',
        WorkType: '',
        WeightNum: 0,
        Cost: 0,
        Currency: 'VND',
        ListCode: '',
        Description: '',
        Cycle: ''
    };

    if ($scope.IsCreateWF) {
        $scope.modelWF = {
            WorkflowCode: '',
            WfInstCode: '',
            ActInstCode: ''
        };
    }
    //End declare model angualar

    //Declare variable
    $scope.isHideMap = false;

    $rootScope.isAddedCard = false;

    $rootScope.isAceptCard = true;

    $rootScope.IsLock = false;

    $rootScope.isUpdate = false;

    $scope.isSave = true;

    $rootScope.isApprove = true;

    $scope.permissionHeaderCard = true;

    $scope.CardInherit = null;

    $scope.Links = [];

    $rootScope.CardCode = "";

    $rootScope.checklists = [];

    var editor;

    $rootScope.isShowPercentItem = true;
    //End declare variable

    //Declare for rollback card
    $scope.rollBack = {
        ListChkItemRollback: [],
        Comment: [],
        ObjectRela: [],
        Products: [],
        Services: [],
        AddressCard: []
    }

    $scope.ListChkItemRollback = [];

    $scope.rollbackComment = [];

    $scope.rollbackObject = [];

    $scope.rollbackProduct = [];

    $scope.rollbackService = [];

    $scope.rollbackAddress = [];

    $scope.rollbackLinks = [];
    //End declare for rollback card

    //Card title
    $scope.editingCardetailHeaderAuto = function () {
        if ($(".modal-dialog").hasClass("ui-draggable-dragging") == false) {
            $scope.acticeDetailDrag = true;
            var title = document.getElementById("card_000000");
            if (title != null && title != undefined) {
                title.focus()
            }
        } else {
            $scope.acticeDetailDrag = false;
        }
    }
    //End card title

    //Init data
    $scope.activity = [
        {
            Name: "Đã xem",
            Value: 0,
            Date: "",
            Time: "",
            IsCheck: true
        },
        {
            Name: "Từ chối",
            Value: 1,
            Date: "",
            Time: "",
            IsCheck: false
        },
        {
            Name: "Đồng ý",
            Value: 2,
            Date: "",
            Time: "",
            IsCheck: true
        }
    ];

    $scope.initData = function () {
        $rootScope.ActivityData = [];
        $scope.acticeDetailDrag = false;
        $scope.listCycle = [
            {
                Code: 'CYCLE_NONE', Name: caption.CJ_CYCLE_NONE
            },
            {
                Code: 'CYCLE_HOUR', Name: caption.CJ_CYCLE_HOUR
            },
            {
                Code: 'CYCLE_DAY', Name: caption.CJ_CYCLE_DAY
            },
            {
                Code: 'CYCLE_WEEK', Name: caption.CJ_CYCLE_WEEK
            },
            {
                Code: 'CYCLE_MONTH', Name: caption.CJ_CYCLE_MONTH
            },
            {
                Code: 'CYCLE_YEAR', Name: caption.CJ_CYCLE_YEAR
            },
        ];
        dataserviceCardJob.getListBoard(function (rs) {
            rs = rs.data;
            $scope.listBoards = rs;
        });
        dataserviceCardJob.getLevels(function (rs) {
            rs = rs.data;
            $scope.CardLevels = rs;
        });
        dataserviceCardJob.getWorkType(function (rs) {
            rs = rs.data;
            $scope.WorkTypes = rs;
        });
        dataserviceCardJob.getStatus(function (rs) {
            rs = rs.data;
            $scope.CardStatus = rs;
        });
        dataserviceCardJob.getCurrency(function (rs) {
            rs = rs.data;
            $scope.listCurrency = rs;
        })
        dataserviceCardJob.getProduct(function (rs) {
            rs = rs.data;
            $scope.listProduct = rs;
        });
        dataserviceCardJob.getService(function (rs) {
            rs = rs.data;
            $scope.listService = rs;
        })
        dataserviceCardJob.getUnit(function (rs) { rs = rs.data; $scope.listUnit = rs });
        dataserviceCardJob.getActivityService(function (rs) {
            rs = rs.data;
            $scope.listActivityService = rs;
        });
        dataserviceCardJob.getActivityProduct(function (rs) {
            rs = rs.data;
            $scope.listActivityProduct = rs;
        });
        dataserviceCardJob.hideCost(function (rs) {
            rs = rs.data;
            $scope.isNotVatco = rs;
        })
        dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
            rs = rs.data;
            $scope.listShift = rs;
            if ($scope.listShift.length > 0) {
                $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')
                var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                $scope.modelShift.In = inTime;
                $scope.modelShift.Out = outTime;

                $scope.timeCheckIn = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss dd/MM/yyyy');
                $scope.timeCheckOut = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss dd/MM/yyyy');

                if (inDate != outDate && outDate != null) {
                    $scope.modelShift.DateIn = inDate;
                    $scope.modelShift.DateOut = outDate;
                    $scope.isSameDate = false;
                } else {
                    $scope.modelShift.DateInOut = inDate;
                    $scope.isSameDate = true;
                }
            }
        })
        dataserviceCardJob.getListDefault($rootScope.boardCode, function (rs) {
            rs = rs.data;
            $scope.obj.Board = rs.BoardCode;
            $scope.obj.List = rs.ListCode;
            $scope.model.ListCode = rs.ListCode;

            if ($scope.obj.Board != "" && $scope.obj.Board != null && $scope.obj.Board != undefined) {
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
            }
        })
        dataserviceCardJob.getAllWfInstance(function (rs) {
            rs = rs.data;
            $scope.lstWfInst = rs;
        })
        setTimeout(function () {
            $scope.editingCardetailHeaderAuto();

        }, 400)
    }

    $scope.initData();
    //End init data

    //Rollback info card and more
    $scope.rollbackCard = function () {
        debugger
        //$scope.rollBack.CardHeader = $scope.model;
        $scope.rollBack.ListChkItemRollback = $scope.ListChkItemRollback;
        $scope.rollBack.Comment = $scope.rollbackComment;
        $scope.rollBack.ObjectRela = $scope.rollbackObject;
        $scope.rollBack.Products = $scope.rollbackProduct;
        $scope.rollBack.Services = $scope.rollbackService;
        dataserviceCardJob.rollbackInfoCard($scope.rollBack, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                loadNewData();
            }
        })
    }
    //End rollback info card and more

    //Board, list select 
    $scope.boardSelect = function (boardCode) {
        if ($scope.obj.Board == "") {
            $scope.errorBoard = true;
        }
        else {
            $scope.errorBoard = false;
        }
        $scope.obj.List = "";
        $scope.model.ListCode = "";
        dataserviceCardJob.getLists(boardCode, function (rs) {
            rs = rs.data;
            $scope.Lists = rs;
        });
    };

    $scope.listSelect = function (listCode) {
        if ($scope.obj.List == "") {
            $scope.errorList = true;
        }
        else {
            $scope.errorList = false;
            $scope.model.ListCode = listCode;
            if ($rootScope.isAddedCard) {
                dataserviceCardJob.updateListReal($rootScope.CardCode, $scope.model.ListCode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        $scope.model.ListCode = "";
                        $scope.obj.List = "";
                    }
                    else {
                        App.toastrSuccess(rs.Title);
                        $scope.completeBoard = rs.Object.PercentBoard;
                        $scope.completeList = rs.Object.PercentList;
                    }
                })
            }
        }
    };
    //End select board, list

    //Insert card
    $scope.saveBuffer = function () {
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
            newName = "";
        }
        $scope.acticeDetailDrag = false;

        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
        }

        validationSelect($scope.model);
        if ($scope.addform.validate() && !validationSelect($scope.model).Status && $scope.isLockWf != true) { // not save with lock wf
            if ($scope.model.CardName.trim() == "" && $scope.model.ListCode == "") {
                return App.toastrError("Vui lòng nhập tên thẻ việc và chọn danh mục công việc");
            }
            else if ($scope.model.CardName.trim() == "") {
                return App.toastrError(caption.CJ_BTN_PLS_IMPORT_NAME_CARDJOB);
            }
            else if ($scope.model.ListCode == "") {
                return App.toastrError("Vui lòng chọn danh mục công việc");
            }

            App.blockUI({
                target: "#modal-body",
                boxed: true,
                message: 'loading...'
            });

            if (!$rootScope.isAddedCard) {
                dataserviceCardJob.insertCardNew($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                        App.unblockUI("#modal-body");
                    }
                    else {
                        $rootScope.isAddedCard = true;
                        $rootScope.CardCode = rs.Object;
                        $scope.cardCode = rs.Object;
                        App.toastrSuccess(rs.Title)

                        //Copy data using to rollback
                        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            if (!rs.Error) {
                                $scope.model = rs.Object.CardDetail;
                                $scope.cardCode = $scope.model.CardCode;
                                $scope.cardName = $scope.model.CardName;
                                $rootScope.Inherit = $scope.model.Inherit;
                                $scope.obj.Board = rs.Object.Board;
                                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                                $rootScope.IsLock = $scope.model.IsLock;
                                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                                    rs = rs.data;
                                    $scope.Lists = rs;
                                });
                                $scope.obj.List = rs.Object.List;
                                $scope.CompletedOld = $scope.model.Completed;
                                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                                        $scope.isAssign = false;
                                    } else {
                                        $scope.isAssign = true;
                                    }
                                }
                                $rootScope.settingNotification = rs.Object.Notification;
                                $scope.currentUser = rs.Object.CurrenUser;
                                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                                $scope.completeBoard = rs.Object.BoardCompleted;
                                $scope.completeList = rs.Object.ListCompleted;
                                //Copy data using to rollback
                                $scope.rollBack.CardHeader = angular.copy($scope.model);
                                //End copy data using to rollback

                                setTimeout(function () {
                                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                }, 100);
                            }
                        });

                        //End copy data using to rollback

                        dataserviceCardJob.updateActivity(rs.Object, 2, true, function (rs) {
                            rs = rs.data;
                            dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.model = rs.Object.CardDetail;

                                    $scope.descriptionOld = angular.copy($scope.model.Description);

                                    if ($scope.model.Status == "CLOSED") {
                                        $scope.isClose = true;
                                    } else {
                                        $scope.isClose = false;
                                    }
                                    $scope.CompletedOld = $scope.model.Completed;
                                    if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {

                                        if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                                            $scope.isAssign = false;
                                        } else {
                                            $scope.isAssign = true;
                                        }
                                    }
                                    $rootScope.settingNotification = rs.Object.Notification;
                                    $scope.currentUser = rs.Object.CurrenUser;
                                    $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                                    $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                                    $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                                    $scope.completeBoard = rs.Object.BoardCompleted;
                                    $scope.completeList = rs.Object.ListCompleted;
                                    dataserviceCardJob.roleInCardOfUser($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.RoleUser = rs.Responsibility;

                                        if ($scope.RoleUser == "ROLE_LEADER") {
                                            $scope.isNotLeader = false;
                                        }
                                        if ($scope.isNotLeader && $scope.isClose) {
                                            $scope.isDisableStatus = true;
                                            $scope.isDisableControl = true;
                                        } else if (!$scope.isNotLeader && $scope.isClose) {
                                            $scope.isDisableStatus = false;
                                            $scope.isDisableControl = true;
                                        } else {
                                            $scope.isDisableStatus = false;
                                            $scope.isDisableControl = false;
                                        }
                                    })
                                    setTimeout(function () {
                                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                    }, 100);
                                }
                            });
                        });
                        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.comments = rs;
                        });
                        $rootScope.getLogActivity();
                        dataserviceCardJob.insertCardSuggestion($rootScope.CardCode, function (rs) {
                            dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.listID = [];
                                $rootScope.listObjRelative = rs;
                                for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                                    $rootScope.listID.push($scope.listObjRelative[i].ID);
                                }
                                $scope.rollbackObject = angular.copy($rootScope.listID);
                            });
                        });
                        //$rootScope.reloadFile();
                        $rootScope.listCardJobLink = [];
                        //clearInterval($scope.interval);
                        //$scope.interval = setInterval(sessionCard, 60000);
                        $rootScope.isDataChanged = true;
                        $rootScope.timeUpdate = moment().format("DD/MM/YYYY HH:mm");
                        App.unblockUI("#modal-body");
                    }
                })
            }
        }
    }


    // view help detail
    $scope.viewCmsDetail = function (helpId) {
        //item, bookMark
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderDashBoard + '/viewItem.html',
            controller: 'viewItemHelp',
            backdrop: 'static',
            windowClass: 'message-avoid-header',
            size: '65',
            resolve: {
                para: function () {
                    return {
                        helpId
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };


    $scope.update = function () {
        if (!$rootScope.isUpdate) {
            return;
        }
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                editor.setData($scope.model.Description);
                $scope.cardCode = $scope.model.CardCode;
                $scope.cardName = $scope.model.CardName;
                $scope.obj.Board = rs.Object.Board;
                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                $rootScope.IsLock = $scope.model.IsLock;
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
                $scope.obj.List = rs.Object.List;
                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.CreatedBy == userName) {
                        $scope.isAssign = false;
                    }
                    else if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                dataserviceCardJob.getAllWfInstance(function (rs) {
                    rs = rs.data;
                    $scope.lstWfInst = rs;
                })

                dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.modelWF.WfInstCode = rs;
                    dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                        rs = rs.data;
                        $scope.lstActInstance = rs;
                    })
                })

                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $rootScope.isAceptCard = true;
                } else {
                    $rootScope.isAceptCard = false;
                }
            }
        });
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            angular.forEach(rs, function (value, key) {
                value.CheckTitle = decodeHTML(value.CheckTitle);
                setTimeout(function () {
                    $scope.$apply();
                })
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                        if (true) {
                            value.Completed = 100;
                            for (var i = 0; i < $rootScope.checkList[value.ChkListCode].length; i++) {
                                checkitem.Approve = true;
                                checkItem.DisableApprove = true;
                            }
                        }
                    })
                })
            })
        });
        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.comments = rs;
        });
        dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listAddress = rs;
        });
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
        });
        dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listCardProduct = rs;
        });
        dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listCardService = rs;
        });
        dataserviceCardJob.permissionHeaderCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.hasPermissionHeaderCard = rs;
        })
        //$rootScope.reloadFile();
    }

    //Update directly
    $scope.changeData = function (selectType, value) {
        if (!$rootScope.isAddedCard) {
            return;
        }
        else if ($rootScope.IsLock) {
            return;
        }
        if (selectType == "BeginTime") {
            updateBeginTime();
        }
        else if (selectType == "CardName") {
            updateCardName();
        }
        else if (selectType == "Deadline") {
            updateDeadline();
        }
        else if (selectType == "EndTime") {
            updateEndTime();
        }
        else if (selectType == "Status") {
            updateStatus();
        }
        else if (selectType == "CardLevel") {
            updateCardLevel();
        }
        else if (selectType == "WorkType") {
            updateWorkType();
        }
        else if (selectType == "WeightNum") {
            updateWeightNum();
        }
        else if (selectType == "Cost") {

        }
        else if (selectType == "Currency") {

        }
        else if (selectType == "Cycle") {
            updateCardCycle();
        }
    }

    function updateCardName() {
        var element = $('#card_000000');
        var newName = element.val();
        var currentName = element.attr('data-currentvalue');
        if (newName != currentName) {
            $scope.model.CardName = newName;
            if ($scope.model.CardName.trim() == "" || $scope.model.CardName == undefined || $scope.model.CardName == null) {
                return;
            }
            dataserviceCardJob.updateCardNameReal($rootScope.CardCode, $scope.model.CardName, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title)
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $rootScope.getLogActivity();
                }
            })
        }
    }

    function updateBeginTime() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardBegintimeReal($rootScope.CardCode, $scope.model.BeginTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateDeadline() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardDeadlineReal($rootScope.CardCode, $scope.model.Deadline, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateEndTime() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardEndtimeReal($rootScope.CardCode, $scope.model.EndTime, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateStatus() {
        dataserviceCardJob.updateCardStatusReal($rootScope.CardCode, $scope.model.Status, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateCardLevel() {
        dataserviceCardJob.updateCardLevelReal($rootScope.CardCode, $scope.model.CardLevel, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateWorkType() {
        dataserviceCardJob.updateCardWorkTypeReal($rootScope.CardCode, $scope.model.WorkType, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
            }
        })
    }

    function updateWeightNum() {
        dataserviceCardJob.updateWeightNumReal($rootScope.CardCode, $scope.model.WeightNum, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.completeBoard = rs.Object.PercentBoard;
                $scope.completeList = rs.Object.PercentList;
                $rootScope.getLogActivity();
            }
        })
    }

    function updateDescription() {
        debugger
        if (!$rootScope.isAddedCard) {
            return;
        }
        else if ($rootScope.IsLock) {
            return;
        }
        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            if ($scope.model.Description !== data) {
                $scope.model.Description = data;

                var data = { CardCode: $rootScope.CardCode, Description: $scope.model.Description };

                dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title)
                    }
                    else {
                        App.toastrSuccess(rs.Title);
                        $rootScope.getLogActivity();
                    }
                })
            }
        }

    }

    function updateCardCycle() {
        if ($rootScope.IsLock) {
            return;
        }
        else if (!$rootScope.isAceptCard) {
            return;
        }
        dataserviceCardJob.updateCardCycleReal($rootScope.CardCode, $scope.model.Cycle, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title)
            }
            else {
                App.toastrSuccess(rs.Title);
                $rootScope.getLogActivity();
                $rootScope.isDataChanged = true;
            }
        })
    }

    CKEDITOR.on('instanceReady', function (evt) {
        var editor = evt.editor,
            body = CKEDITOR.document.getBody();
        $scope.ckEditor = editor;
        editor.on('focus', function () {
        });
        var myListener = function () {
            updateDescription();
        };

        editor.on('blur', myListener);

        //editor.on('destroy', function () {
        //    CKEDITOR.instances['description'].removeAllListeners();
        //});
    });
    //End update directly

    function sessionCard() {
        //dataserviceCardJob.isUpdateNewData($rootScope.CardCode, $rootScope.timeUpdate, function (rs) {
        //    rs = rs.data;
        //    if (rs) {
        //        loadNewData();
        //        $rootScope.timeUpdate = moment().add(1, 'minute').format("DD/MM/YYYY HH:mm");
        //    }
        //})
    }

    function loadNewData() {
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.model = rs.Object.CardDetail;
                $scope.cardCode = $scope.model.CardCode;
                editor.setData($scope.model.Description);
                $scope.cardName = $scope.model.CardName;
                $rootScope.Inherit = $scope.model.Inherit;
                $scope.obj.Board = rs.Object.Board;
                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                $rootScope.IsLock = $scope.model.IsLock;
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
                $scope.obj.List = rs.Object.List;
                debugger
                var element = document.getElementById("card_000000");
                element.setAttribute('data-currentvalue', $scope.cardName);
                element.setAttribute('value', $scope.cardName);
                element.value = $scope.cardName;

                $scope.CompletedOld = $scope.model.Completed;
                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                        $scope.isAssign = false;
                    } else {
                        $scope.isAssign = true;
                    }
                }
                $rootScope.settingNotification = rs.Object.Notification;
                $scope.currentUser = rs.Object.CurrenUser;
                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.RoleUser = rs.Responsibility;

                    if ($scope.RoleUser == "ROLE_LEADER") {
                        $scope.isNotLeader = false;
                    }
                    if ($scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = true;
                        $scope.isDisableControl = true;
                    } else if (!$scope.isNotLeader && $scope.isClose) {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = true;
                    } else {
                        $scope.isDisableStatus = false;
                        $scope.isDisableControl = false;
                    }
                })
                dataserviceCardJob.getAllWfInstance(function (rs) {
                    rs = rs.data;
                    $scope.lstWfInst = rs;
                })

                dataserviceCardJob.getWfInstanceOfCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.modelWF.WfInstCode = rs;
                    dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, para, function (rs) {
                        rs = rs.data;
                        $scope.lstActInstance = rs;
                    })
                })
                $scope.disableCkEditer(editor);
                setTimeout(function () {
                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                }, 100);
            }
        });
        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.activity = rs;
            if ($scope.activity.length > 0) {
                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                    $rootScope.isAceptCard = true;
                } else {
                    $rootScope.isAceptCard = false;
                }
            }
        });
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    }
                }
            }
        });
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            angular.forEach(rs, function (value, key) {
                value.CheckTitle = decodeHTML(value.CheckTitle);
                setTimeout(function () {
                    $scope.$apply();
                })
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                        iterator.Title = decodeHTML(iterator.Title);
                    }
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.comments = rs;
        });
        dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listAddress = rs;
        });
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
        });
        dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardProduct = rs;
        });
        dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listCardService = rs;
        });
        dataserviceCardJob.permissionHeaderCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.permissionHeaderCard = rs;
        })
        dataserviceCardJob.roleInCardOfUser($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (rs.Responsibility === "ROLE_LEADER") {
                $rootScope.isApprove = true;
            }
            else {
                $rootScope.isApprove = false;
            }
        })
        dataserviceCardJob.getCardRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;

            $scope.CardInherit = rs.Inherit;
            $scope.Links = rs.Links;
        })
        dataserviceCardJob.insertListUserView($rootScope.CardCode, function (rs) { })
        dataserviceCardJob.getDataLoggerCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listData = rs;
        });

        //$rootScope.reloadFile();
        $rootScope.getLogActivity();
    }

    //End insert card

    //Start date
    function loadDate() {
        $("#startDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            dateFormat: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#deadline').datepicker('setStartDate', maxDate);
            $('#endDate').datepicker('setStartDate', maxDate);
        });
        $("#endDate").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.Deadline != "") {
                const [day, month, year] = $scope.model.Deadline.split("/")
                var deadLine = new Date(year, month - 1, day)
                if (maxDate > deadLine) {
                    $('#startDate').datepicker('setEndDate', deadLine);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
        $("#deadline").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {

            var maxDate = new Date(selected.date.valueOf());
            if ($scope.model.EndTime != "") {
                const [day, month, year] = $scope.model.EndTime.split("/")
                var endTime = new Date(year, month - 1, day)
                if (maxDate > endTime) {
                    $('#startDate').datepicker('setEndDate', endTime);
                }
                else {
                    $('#startDate').datepicker('setEndDate', maxDate);
                }
            }
            else {
                $('#startDate').datepicker('setEndDate', maxDate);
            }
        });
    }

    function validateDefaultDate(startDate, endDate, deadline) {
        setStartDate("#endDate", startDate);
        setStartDate("#deadline", startDate);
        //setEndDate
        const [dayDead, monthDead, yearDeal] = deadline.split("/")
        var deadTime = new Date(yearDeal, monthDead - 1, dayDead)
        if (endDate != "") {
            const [day, month, year] = endDate.split("/")
            var endTime = new Date(year, month - 1, day)
            if (endTime > deadTime) {
                setEndDate("#startDate", deadline)
            }
            else {
                setEndDate("#startDate", endDate)
            }
        }
        else {
            setEndDate("#startDate", deadline)
        }
    }
    //End date

    //Editor

    function ckEditer() {
        editor = CKEDITOR.replace('description', {
            cloudServices_tokenUrl: '/MobileApp/Token',
            cloudServices_uploadUrl: '/MobileApp/UploadFile',
            filebrowserBrowseUrl: '',
            filebrowserUploadUrl: '/MobileApp/Upload',
            embed_provider: '/uploader/upload.php'
        });
        CKEDITOR.instances['description'].config.height = 360;
        CKEDITOR.instances['description'].on('contentDomUnload', function () {
            // Do here whatever you need
            if (this.checkDirty()) {
                // The instance is dirty
            }
        });
        //setTimeout(function () {
        //    $scope.disableCkEditer(editor);
        //}, 1000);
    }

    $scope.disableCkEditer = function (editor) {

        if (!$rootScope.isAceptCard || $rootScope.IsLock) {
            editor.setReadOnly(true);
        } else {
            editor.setReadOnly(false);
        }
    }
    //End editor

    //View tab
    $scope.idxViewTab = 0;
    $scope.viewTab = function (index) {
        if (!$rootScope.isAddedCard && index != 0) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        $scope.idxViewTab = index;
        if ($scope.idxViewTab == 7) {
            $rootScope.$broadcast('reloadItemWork', {});
        }
    }
    //Edn view tab

    //Add member
    $scope.addMember = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        $rootScope.titleModalAssign = 3;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-group-or-team.html',
            controller: 'add-group-or-teamCardJob',
            size: '55',
            resolve: {
                obj: function () {
                    return {
                        CardCode: $scope.cardCode,
                        Type: 4
                    };
                }
            },
            backdrop: 'static',
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getCheckList($scope.cardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;

                $rootScope.ItemCheck = rs;
                angular.forEach(rs, function (value, key) {
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            dataserviceCardJob.getActivityAssign($scope.cardCode, function (rs) {
                rs = rs.data;
                $rootScope.ActivityData = rs;
                if ($rootScope.ActivityData.length > 0) {
                    for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                        if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                            $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                        }
                    }
                }
            });
            dataserviceCardJob.getGroupDepartmentAssign($scope.cardCode, function (rs) {
                rs = rs.data;
                $scope.lstGrpAssign = rs.Group
                $scope.lstDpmAssign = rs.Dpm
            });
        }, function () {
        });
    };
    //End add member

    //Send notifi
    $scope.sendNotifi = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/send-notifi-card.html',
            controller: 'send-notifi-card',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End send notification

    //Log status
    $scope.viewLogStatus = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-status-log.html',
            controller: 'log-status',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End log status

    //Log workflow
    $scope.viewLogWF = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-activity-wf.html',
            controller: 'log-activity-wf',
            backdrop: 'static',
            size: '50',
            resolve: {
                para: function () {
                    var obj = { WfInstCode: $scope.modelWF.WfInstCode, CardCode: $rootScope.CardCode };
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    }
    //End

    //Show log accept, reject
    $scope.showLogActivity = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/log-user-activity.html',
            controller: 'log-user-activity',
            size: '30',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
        });
    }
    //End

    //Update activity
    $scope.updateActivity = function (value, isCheck) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        if (isCheck) {
            var activity = $scope.activity.find(function (element) {
                if (element.Value != value && element.Value != 0) return true;
            });
            if (activity) {
                activity.IsCheck = false;
            }
            if (value == 2 && isCheck) {
                $rootScope.isAceptCard = true;
                if ($scope.model.Status != "START") {
                    dataserviceCardJob.changeCardStatus($rootScope.CardCode, "START", function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.model = rs.Object.CardDetail;
                                    $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                                    $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                                    $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                                }
                            })
                        }
                    });
                }
                dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var activity = $scope.activity.find(function (element) {
                            if (element.Value == value) return true;
                        });
                        if (activity) {
                            activity.Date = rs.Object.Date;
                            activity.Time = rs.Object.Time;
                        }
                        App.toastrSuccess(rs.Title);
                        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.activity = rs;
                            if ($scope.activity.length > 0) {
                                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                    $rootScope.isAceptCard = true;
                                } else {
                                    $rootScope.isAceptCard = false;
                                }
                            }
                        });
                        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }
                });
            }
            else if (value == 1 && isCheck) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/add-reason-reject.html',
                    controller: 'add-reason-reject',
                    backdrop: 'static',
                    size: '25',
                    keyboard: false,
                    windowClass: "modal-position",
                    resolve: {
                        para: function () {
                            return {
                                Value: value,
                                CardCode: $rootScope.CardCode
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.activity = rs;
                        if ($scope.activity.length > 0) {
                            if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                $rootScope.isAceptCard = true;
                            } else {
                                $rootScope.isAceptCard = false;
                            }
                        }
                    });
                    $rootScope.getLogActivity();
                }, function () { });
            }
            else {
                $rootScope.isAceptCard = false;
                dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    }
                    else {
                        var activity = $scope.activity.find(function (element) {
                            if (element.Value == value) return true;
                        });
                        if (activity) {
                            activity.Date = rs.Object.Date;
                            activity.Time = rs.Object.Time;
                        }
                        App.toastrSuccess(rs.Title);
                        dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $scope.activity = rs;
                            if ($scope.activity.length > 0) {
                                if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                    $rootScope.isAceptCard = true;
                                } else {
                                    $rootScope.isAceptCard = false;
                                }
                            }
                        });
                        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.ActivityData = rs;
                            if ($rootScope.ActivityData.length > 0) {
                                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                    if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                        $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                    }
                                }
                            }
                        });
                    }
                });
            }
            $scope.disableCkEditer(editor);
        }
        else {
            $rootScope.isAceptCard = false;
            dataserviceCardJob.updateActivity($rootScope.CardCode, value, isCheck, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    var activity = $scope.activity.find(function (element) {
                        if (element.Value == value) return true;
                    });
                    if (activity) {
                        activity.Date = rs.Object.Date;
                        activity.Time = rs.Object.Time;
                    }
                    App.toastrSuccess(rs.Title);
                    dataserviceCardJob.getCardActivityByUser($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $scope.activity = rs;
                        if ($scope.activity.length > 0) {
                            if ($scope.activity[$scope.activity.length - 1].Name == "Đồng ý" && $scope.activity[$scope.activity.length - 1].IsCheck == true) {
                                $rootScope.isAceptCard = true;
                            } else {
                                $rootScope.isAceptCard = false;
                            }
                        }
                    });
                    dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.ActivityData = rs;
                        if ($rootScope.ActivityData.length > 0) {
                            for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                                if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                                    $rootScope.ActivityData[i].ChangeDetails = $scope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                                }
                            }
                        }
                    });
                }
            });
        }
    }
    //end

    //Start validate
    $scope.changeSelect = function (selectType, item) {
        if (selectType === "Status") {
            if ($scope.model.Status == "") {
                $scope.errorStatus = true;
            }
            else {
                $scope.errorStatus = false;
            }
        }
    }

    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.Status == "") {
            $scope.errorStatus = true;
            mess.Status = true;
        } else {
            $scope.errorStatus = false;
        }

        if (data.WfType == "") {
            $scope.errorWfType = true;
            mess.Status = true;
        } else {
            $scope.errorWfType = false;
        }

        return mess;
    };
    //End validate

    //Show hide content
    $scope.showPanelRight = true;
    $scope.showInfoHeader = true;

    $scope.showPanel = function () {
        if ($scope.showPanelRight)
            $scope.showPanelRight = false;
        else
            $scope.showPanelRight = true;
    }

    $scope.showInfo = function () {
        if ($scope.showInfoHeader)
            $scope.showInfoHeader = false;
        else
            $scope.showInfoHeader = true;
    }

    //End show hide content

    //Start add common
    $scope.addCommonSettingWorkType = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'OBJ_WORKTYPE',
                        GroupNote: 'Kiểu công việc',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getWorkType(function (rs) {
                rs = rs.data;
                $scope.WorkTypes = rs;
            });
        }, function () { });
    }

    $scope.addCommonSettingCardLevel = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'LEVEL',
                        GroupNote: 'Độ ưu tiên',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getLevels(function (rs) {
                rs = rs.data;
                $scope.CardLevels = rs;
            });
        }, function () { });
    }

    $scope.addProductActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_PRODUCT',
                        GroupNote: 'Hoạt động sản phẩm',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityProduct(function (rs) {
                rs = rs.data;
                $scope.listActivityProduct = rs;
            })
        }, function () { });
    }

    $scope.addSeriveActivity = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCommonSetting + "/detail.html",
            controller: 'detail',
            size: '50',
            backdrop: 'static',
            resolve: {
                para: function () {
                    return {
                        Group: 'JC_ACTIVITY_SERVICE',
                        GroupNote: 'Hoạt động dịch vụ',
                        AssetCode: 'CARDJOB'
                    }
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getActivityService(function (rs) {
                rs = rs.data;
                $scope.listActivityService = rs;
            });
        }, function () { });
    }
    //End add common

    //Lock card
    $scope.lockCard = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng thêm thẻ việc trước");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        var value = false;
        if (!$scope.model.IsLock) {
            value = true;
        }
        dataserviceCardJob.lockCard($rootScope.CardCode, value, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.model = rs.Object.CardDetail;
                        $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                        $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                        $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                        //$scope.updateCardName("card_000000");
                        setTimeout(function () {
                            $scope.disableCkEditer(editor);
                            validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                        }, 500);
                    }
                });
                if (value) {
                    $rootScope.IsLock = true;
                }
                else {
                    $rootScope.IsLock = false;
                }
            }
        })
    }
    //End

    //Workflow
    $scope.IsCreateWF = false;

    $scope.changeWorkFlow = function () {
        isChange = true;
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmQuestion.html',
            windowClass: "message-center",
            resolve: {
                params: function () {
                    return {
                        CardCode: $rootScope.CardCode,
                        WfCode: $scope.modelWF.WorkflowCode
                    };
                }
            },
            controller: function ($scope, $uibModalInstance, params) {
                $scope.message = caption.CJ_MSG_QUESTION_CREATE_WF;
                $scope.ok = function () {
                    dataserviceCardJob.createInstanceWF(params.WfCode, params.CardCode, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        } else {
                            App.toastrSuccess(rs.Title);

                            $rootScope.wfInstance = rs.Object.WfInstCode;
                            $uibModalInstance.close();
                            dataserviceCardJob.insertInstRunning(rs.Object.WfInstCode, rs.Object.WorkflowCode, function (rs) { })
                        }
                    })
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.modelWF.WfInstCode = $rootScope.wfInstance;
            dataserviceCardJob.getActInstCard($rootScope.wfInstance, $rootScope.CardCode, function (rs) {
                rs = rs.data;
                $scope.lstActInstance = rs;
            })
            $scope.IsCreateWF = false;
            dataserviceCardJob.getAllWfInstance(function (rs) {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }, function () {
        });
    }

    $scope.changeWfInst = function (code) {
        $rootScope.wfInstance = code;
        $scope.modelWF = { WfInstCode: $rootScope.wfInstance };
        dataserviceCardJob.getActInstCard($rootScope.wfInstance, "", function (rs) {
            rs = rs.data;
            $scope.lstActInstance = rs;
        })
    }

    $scope.checkCreateWF = function () {
        if (!$rootScope.isAddedCard) {
            $scope.IsCreateWF = false;
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        if ($scope.IsCreateWF) {
            dataserviceCardJob.checkWfInstCard($rootScope.CardCode, function (rs) {
                rs = rs.data;
                if (rs) {
                    $scope.IsCreateWF = false;
                    return App.toastrError(caption.CJ_MSG_CARD_HAS_WF);
                }
                dataserviceCardJob.getWorkFlow(function (rs) {
                    rs = rs.data;
                    $scope.listWorkFlow = rs;
                })
            })
        }
        else {
            dataserviceCardJob.getWfInst($rootScope.CardCode, function () {
                rs = rs.data;
                $scope.lstWfInst = rs;
            })
        }
    }

    $scope.changeActInst = function () {
        var data = {
            ActInstCode: $scope.modelWF.ActInstCode,
            WfInstCode: $scope.modelWF.WfInstCode,
            ObjectInst: $rootScope.CardCode,
            ObjectType: "CARD_JOB",
        };
        dataserviceCardJob.insertObjectProcess(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getActInstCard($scope.modelWF.WfInstCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $scope.lstActInstance = rs;
                })
            }
        })
    }
    //End workflow

    //add-card-inherit, card-link
    $scope.addInheritLink = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-card-link.html',
            controller: 'add-card-link',
            windowClass: "message-center",
            size: '35',
            backdrop: 'static',
            resolve: {
                cardJob: function () {
                    return {
                        cardCode: $rootScope.CardCode,
                        cardName: $scope.model.CardName,
                        Inherit: $scope.model.Inherit
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.model.Inherit = $rootScope.CardInherit.Code;
            dataserviceCardJob.getCardRelative($rootScope.CardCode, function (rs) {
                rs = rs.data;

                $scope.CardInherit = rs.Inherit;
                $scope.Links = rs.Links;
            })
        });
    }
    //End

    //Add list/board
    $scope.addBoard = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-board.html',
            controller: 'add-boardCardJob',
            size: '30',
            backdrop: 'static'
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getListBoard(function (rs) {
                rs = rs.data;
                $scope.listBoards = rs;
            });
        }, function () { });
    };
    $scope.addList = function (board) {
        if (board == '') {
            App.toastrError(caption.CJ_MSG_PLS_SELECT_TABLE_WORKING);
        } else {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: ctxfolderCardJob + '/add-list.html',
                controller: 'add-listCardJob',
                backdrop: 'static',
                size: '25',
                resolve: {
                    para: function () {
                        return board;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                    rs = rs.data;
                    $scope.Lists = rs;
                });
            }, function () { });
        }
    }
    //End

    //Push trash
    $scope.pushTrash = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceCardJob.changeCardStatus($rootScope.CardCode, "TRASH", function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(caption.COM_DELETE_SUCCESS);
                //clearInterval($scope.interval);
                $uibModalInstance.close();
                $rootScope.reloadGridCard();
            }
        });
    }
    //End

    setTimeout(function () {
        ckEditer();
        loadDate();
        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline);
        setModalDraggable(".modal-dialog");
    }, 400);
});

app.controller('card-comment', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, $filter) {
    $scope.comment = {
        Content: ""
    };

    //Comment
    $scope.addComment = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        //else if (!$rootScope.isAceptCard) {
        //    return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        //}
        if ($scope.comment.Content == "") {
            return;
        }
        var obj = {
            CardCode: $rootScope.CardCode,
            CmtContent: $scope.comment.Content
        }
        dataserviceCardJob.addComment(obj, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.comment.Content = '';
                dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.comments = rs;
                });
                $rootScope.getLogActivity();
            }
        })
    }

    $scope.deleteComment = function (CmtId) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        //else if (!$rootScope.isAceptCard) {
        //    return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        //}
        dataserviceCardJob.deleteComment(CmtId, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.comments = rs;
                });
                $rootScope.getLogActivity();
            }
        });
    }

    $scope.updateComment = function (e) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        //else if (!$rootScope.isAceptCard) {
        //    return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        //}
        $scope.show.editComment[e.target.getAttribute('cmtid')] = false;
        var obj = {
            Id: e.target.getAttribute('cmtid'),
            CmtContent: e.target.value
        }
        dataserviceCardJob.updateComment(obj, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.comments = rs;
                });
                $rootScope.getLogActivity();
            }
        });
    };

});

app.controller('card-attr-result-data', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, Fullscreen, $filter) {
    // Data logger card
    $scope.isSelectChkList = false;
    $scope.chkListSelect = [];
    $scope.modelAttr = {
        ID: "",
        DtCode: "",
        DtTitle: "",
        DtValue: "",
        DtUnit: "",
        DtValueType: "",
        DtGroup: "",
        ShiftCode: ""
    };
    $scope.fileAttr = {};
    $scope.modelListAttr = [];
    $scope.listAttrTemp = [];
    $scope.lstLoggerDataCard = [];
    $scope.lstLoggerDataCardDetail = [];
    $scope.tabTypeLogger = 0;

    $scope.initData = function () {
        dataserviceCardJob.getAttrGroup($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.lstAttrGroup = rs;
        })
        dataserviceCardJob.getDataLoggerCard($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listData = rs;
        });
    }

    $scope.initData();

    $scope.changeAttrGroup = function (code) {
        $scope.modelAttr.DtGroup = code;
        $scope.lstLoggerDataCard = [];
        $scope.checklists = [];
        dataserviceCardJob.getAttrByGroup($scope.modelAttr.DtGroup, function (rs) {
            rs = rs.data;
            $scope.listAttrTemp = rs;

            if ($scope.cardLogger.validate()) {
                $scope.modelAttr.JobcardCode = $rootScope.CardCode;
                var chkList = [];
                if (!$scope.isSelectChkList) {
                    for (var i = 0; i < $scope.checklists.length; i++) {
                        var obj = {
                            Code: $scope.checklists[i].ChkListCode,
                            Title: $scope.checklists[i].CheckTitle,
                        };
                        chkList.push(obj);
                    }
                }
                else {
                    for (var i = 0; i < $scope.chkListSelect.length; i++) {
                        var obj = {
                            Code: $scope.chkListSelect[i].ChkListCode,
                            Title: $scope.chkListSelect[i].Title,
                        };
                        chkList.push(obj);
                    }
                }

                $scope.modelAttr.ItemList = JSON.stringify(chkList);
                $scope.modelAttr.ShiftCode = $scope.attrShiftCode;

                if ($scope.modelAttr.DtValueType === "ATTR_DATA_TYPE_FILE") {
                    $scope.modelAttr.DtValue = JSON.stringify($scope.fileAttr);
                }

                for (var j = 0; j < $scope.listAttrTemp.length; j++) {
                    var objAttr = {
                        ID: $scope.listAttrTemp[j].ID,
                        Code: $scope.listAttrTemp[j].Code,
                        Title: $scope.listAttrTemp[j].Name,
                        Value: $scope.modelAttr.DtValue,
                        Unit: $scope.listAttrTemp[j].Unit,
                        Type: $scope.listAttrTemp[j].Type,
                        Shift: $scope.attrShiftCode,
                        CreatedBy: $scope.listAttrTemp[j].CreatedBy,
                        CreatedTime: $scope.listAttrTemp[j].CreatedTime,
                        ItemList: JSON.stringify(chkList),
                        JobcardCode: $scope.modelAttr.JobcardCode,
                        DtGroup: $scope.listAttrTemp[j].DtGroup
                    };

                    $scope.lstLoggerDataCard.push(objAttr);
                };
            }
        });
    };

    $scope.isFullScreen = false;
    $scope.goFullscreen = function () {
        $scope.isFullScreen = !$scope.isFullScreen;
    }

    $scope.submitAttr = function () {

        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        if ($scope.tabTypeLogger === 1) {
            $scope.tabTypeLogger = 0;
        } else {
            $scope.modelListAttr = [];

            if ($scope.lstLoggerDataCard.length === 0) {
                App.toastrError(caption.CJ_MSG_GROUP_TEMP_NO_ATTR);
                return;
            };

            for (var j = 0; j < $scope.lstLoggerDataCard.length; j++) {
                var objAttr = {
                    ID: $scope.lstLoggerDataCard[j].ID,
                    DtCode: $scope.lstLoggerDataCard[j].Code,
                    DtTitle: $scope.lstLoggerDataCard[j].Title,
                    DtValue: $scope.lstLoggerDataCard[j].Value,
                    DtUnit: $scope.lstLoggerDataCard[j].Unit,
                    DtValueType: $scope.lstLoggerDataCard[j].Type,
                    DtGroup: $scope.lstLoggerDataCard[j].DtGroup,
                    ShiftCode: $scope.lstLoggerDataCard[j].Shift,
                    ItemList: $scope.modelAttr.ItemList,
                    JobcardCode: $scope.lstLoggerDataCard[j].JobcardCode,
                };

                $scope.modelListAttr.push(objAttr);
            };

            dataserviceCardJob.insertDataLogger($scope.modelListAttr, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.lstLoggerDataCard = [];
                    $scope.modelAttr.DtGroup = '';
                    $scope.initData();
                    $rootScope.getLogActivity();
                }
            });
        }
    };

    $scope.deleteDataLogger = function (sessionId) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            appendTo: angular.element(document).find('#card-attr-result-data'),
            resolve: {
                para: function () {
                    return sessionId;
                }
            },
            controller: function ($scope, $uibModalInstance, para) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteDataLogger(para, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title);
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            $uibModalInstance.close('cancel');
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '50',
        });
        modalInstance.rendered.then(function () {
            angular.element(document).find('.modal-backdrop').addClass('z-index-1049');
            //$document.find('#attr-data-tab')
        }, function () { });
        modalInstance.result.then(function (d) {
            $scope.initData();
        }, function () {

        });
    };

    $scope.uploadFileAttr = function () {
        $("#fileAttr").trigger("click");
    };

    $scope.loadFileAttr = function (event) {
        var file = event.target.files[0];
        if (file != undefined) {
            var data = new FormData();
            data.append("FileUpload", file);
            data.append("CardCode", $rootScope.CardCode)
            dataserviceCardJob.uploadAttachment(data, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return;
                }
                else {
                    var fileName = $('#fileAttr').val();
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                    var file = fileName.split('\\');
                    $scope.fileAttr = {
                        FileName: file[file.length - 1],
                        FileUrl: '/uploads/repository/CARDJOB/' + rs.Object,
                        CardCode: $scope.cardCode
                    }
                    $('#fileAttr').replaceWith($('#fileAttr').val('').clone(true));
                    App.toastrSuccess("Tải tệp tin thành công");
                    $scope.modelAttr.DtValue = $scope.fileAttr.FileName;
                }
            });
        }
    }

    $scope.selectChkItem = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/select-check-item.html',
            controller: 'select-check-item',
            backdrop: 'static',
            size: '40',
            resolve: {
                para: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.chkListSelect = d;
            $scope.isSelectChkList = true;
        }, function () { });
    }

    $scope.addCheckInOut = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-check-in-out.html',
            controller: 'add-check-in-out',
            size: '50'
        });
        modalInstance.result.then(function (d) {
            $scope.timeCheckIn = d.TimeIn;
            $scope.timeCheckOut = d.TimeOut;
            $scope.attrShiftCode = d.ShiftCode;
            dataserviceCardJob.getAllShiftOfUser(userName, function (rs) {
                rs = rs.data;
                $scope.listShift = rs;
                if ($scope.listShift.length > 0) {
                    $scope.modelShift.ShiftCode = $scope.listShift[0].ShiftCode;
                    var inDate = $filter('date')($scope.listShift[0].ChkinTime, 'dd/MM/yyyy')
                    var outDate = $filter('date')($scope.listShift[0].ChkoutTime, 'dd/MM/yyyy')
                    var inTime = $filter('date')($scope.listShift[0].ChkinTime, 'HH:mm:ss')
                    var outTime = $filter('date')($scope.listShift[0].ChkoutTime, 'HH:mm:ss')
                    $scope.modelShift.In = inTime;
                    $scope.modelShift.Out = outTime;
                    if (inDate != outDate && outDate != null) {
                        $scope.modelShift.DateIn = inDate;
                        $scope.modelShift.DateOut = outDate;
                        $scope.isSameDate = false;
                    } else {
                        $scope.modelShift.DateInOut = inDate;
                        $scope.isSameDate = true;
                    }
                }
            })
        });
    }
});

app.controller('card-item-check', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, $filter) {
    $scope.modelCheckList = {
        Title: '',
        WeightNum: 0,
    }

    $scope.checkitem = {
        Title: ''
    };

    $rootScope.checkList = [];

    $rootScope.statusItem = [];

    $scope.isUpdateCheckList = false;

    $rootScope.getCheckLists = function () {
        dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.checklists = rs;
            angular.forEach(rs, function (value, key) {
                value.CheckTitle = decodeHTML(value.CheckTitle);
                setTimeout(function () {
                    $scope.$apply();
                })
                dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                    result = result.data;
                    $rootScope.checkList[value.ChkListCode] = result;
                    for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                        iterator.Title = decodeHTML(iterator.Title);
                    }
                })
                dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.statusItem[value.ChkListCode] = rs;
                })
            })
        });
        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
            rs = rs.data;
            if (!rs.Error) {
                $scope.completeBoard = rs.Object.BoardCompleted;
                $scope.completeList = rs.Object.ListCompleted;
                $scope.leader = rs.Object.Leader;
            }
        });
    }

    $scope.deleteCheckList = function (CheckCode, id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        dataserviceCardJob.deleteCheckList(CheckCode, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.isUpdateCheckList = false;
                dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.checklists = rs;
                    //$rootScope.ItemCheck = $scope.checklists;
                    angular.forEach(rs, function (value, key) {
                        value.CheckTitle = decodeHTML(value.CheckTitle);
                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                            result = result.data;
                            $rootScope.checkList[value.ChkListCode] = result;
                            for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                                iterator.Title = decodeHTML(iterator.Title);
                            }
                        })
                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.statusItem[value.ChkListCode] = rs;
                        })
                    })
                });
                dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.completeBoard = rs.Object.BoardCompleted;
                        $scope.completeList = rs.Object.ListCompleted;
                        $scope.leader = rs.Object.Leader;
                    }
                });
                $scope.model.Completed = rs.Object.PercentCard;
                $scope.completeList = rs.Object.PercentList;
                $scope.completeBoard = rs.Object.PercentBoard;
                $rootScope.getLogActivity();
                var content = CKEDITOR.instances['description'].getData();
                var idQ = `#ci-${id}`;
                var $html = $('<div />', { html: content });
                $html.find(idQ).remove();
                console.log($html.html());
                content = $html.html();
                CKEDITOR.instances['description'].setData(content);
                var data = { CardCode: $rootScope.CardCode, Description: content };

                dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title)
                    }
                    else {
                        App.toastrSuccess(rs.Title);
                        $rootScope.getLogActivity();
                    }
                })
            }
        })
    }

    $scope.assignUserToItem = function (chkListCode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        else if (!$rootScope.isApprove) {
            return App.toastrError("Bạn không có quyền thực hiện");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/assign-user-item-check.html',
            controller: 'assign-user-item-check',
            size: '50',
            resolve: {
                cardCodeAssign: function () {
                    return {
                        ChkListCode: chkListCode,
                        CardCode: $rootScope.CardCode
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            isChange = true;
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;
                angular.forEach(rs, function (value, key) {
                    value.CheckTitle = decodeHTML(value.CheckTitle);
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                        for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                            iterator.Title = decodeHTML(iterator.Title);
                        }
                    })
                })
            });
            $rootScope.getLogActivity();
        });
    }

    $scope.addCheckList = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        if ($scope.checklist.validate()) {
            var chkCode = "CHECK_LIST_" + generateUUID();
            var obj = {
                CardCode: $rootScope.CardCode,
                CheckTitle: $scope.modelCheckList.Title,
                WeightNum: $scope.modelCheckList.WeightNum,
                ChkListCode: chkCode
            }
            dataserviceCardJob.addCheckList(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    isChange = true;
                    dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.checklists = rs;
                        angular.forEach(rs, function (value, key) {
                            value.CheckTitle = decodeHTML(value.CheckTitle);
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $rootScope.checkList[value.ChkListCode] = result;
                                for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                                    iterator.Title = decodeHTML(iterator.Title);
                                }
                            })
                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.statusItem[value.ChkListCode] = rs;
                            })
                        })
                    });
                    dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        if (!rs.Error) {
                            $scope.completeBoard = rs.Object.BoardCompleted;
                            $scope.completeList = rs.Object.ListCompleted;
                            $scope.leader = rs.Object.Leader;
                        }
                    });
                    $scope.modelCheckList.Title = '';
                    $scope.modelCheckList.WeightNum = 0;
                    $rootScope.getLogActivity();
                    var content = CKEDITOR.instances['description'].getData();
                    content += `<a title='${obj.CheckTitle}' id='ci-${rs.ID}'>${obj.CheckTitle}</a>`;
                    CKEDITOR.instances['description'].setData(content);
                    var data = { CardCode: $rootScope.CardCode, Description: content };

                    dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title)
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            $rootScope.getLogActivity();
                        }
                    })
                }
            })
        }
    }

    $scope.getCheckList = function (code, title, weightNum, id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        else if (!$rootScope.isApprove) {
            return App.toastrError("Bạn không có quyền thực hiện");
        }
        $scope.modelCheckList.Id = id;
        $scope.modelCheckList.ChkListCode = code;
        $scope.modelCheckList.Title = title;
        $scope.modelCheckList.WeightNum = weightNum;
        $scope.isUpdateCheckList = true;
    }

    $scope.updateCheckList = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        if ($scope.checklist.validate()) {
            var obj = {
                CardCode: $rootScope.CardCode,
                CheckTitle: $scope.modelCheckList.Title,
                WeightNum: $scope.modelCheckList.WeightNum,
                ChkListCode: $scope.modelCheckList.ChkListCode
            }
            dataserviceCardJob.updateCheckList(obj, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.checklists = rs;
                        angular.forEach(rs, function (value, key) {
                            value.CheckTitle = decodeHTML(value.CheckTitle);
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $rootScope.checkList[value.ChkListCode] = result;
                                for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                                    iterator.Title = decodeHTML(iterator.Title);
                                }
                            })
                        })
                    });
                    dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        if (!rs.Error) {
                            $scope.completeBoard = rs.Object.BoardCompleted;
                            $scope.completeList = rs.Object.ListCompleted;
                            $scope.leader = rs.Object.Leader;
                        }
                    });
                    $scope.modelCheckList.ChkListCode = "";
                    $scope.modelCheckList.Title = "";
                    $scope.modelCheckList.WeightNum = 0;
                    $scope.isUpdateCheckList = false;
                    $scope.model.Completed = rs.Object.PercentCard;
                    $scope.completeList = rs.Object.PercentList;
                    $scope.completeBoard = rs.Object.PercentBoard;
                    $rootScope.getLogActivity();
                    var content = CKEDITOR.instances['description'].getData();
                    var idQ = `#ci-${$scope.modelCheckList.Id}`;
                    var $html = $('<div />', { html: content });
                    var a = $html.find(idQ);
                    if (a && a.length > 0) {
                        a[0].title = obj.CheckTitle;
                        a[0].text = obj.CheckTitle;
                        content = $html.html();
                    }
                    else {
                        content += `<a title='${obj.CheckTitle}' id='ci-${$scope.modelCheckList.Id}'>${obj.CheckTitle}</a>`;
                    }
                    CKEDITOR.instances['description'].setData(content);
                    var data = { CardCode: $rootScope.CardCode, Description: content };

                    dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                            App.toastrError(rs.Title)
                        }
                        else {
                            App.toastrSuccess(rs.Title);
                            $rootScope.getLogActivity();
                        }
                    })
                }
            })
        }
    }

    $scope.itemWork = {
        checkItem: false
    };

    $scope.initSubscribe = function () {
        var addItemWork = $rootScope.$on('addItemWork', function (event) {
            dataserviceCardJob.getListWorkItem($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $scope.listItemWork = rs.Object;
            });
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;
                angular.forEach(rs, function (value, key) {
                    value.CheckTitle = decodeHTML(value.CheckTitle);
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                        for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                            iterator.Title = decodeHTML(iterator.Title);
                        }
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
            dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                rs = rs.data;
                if (!rs.Error) {
                    $scope.completeBoard = rs.Object.BoardCompleted;
                    $scope.completeList = rs.Object.ListCompleted;
                    $scope.leader = rs.Object.Leader;
                }
            });
            $rootScope.getLogActivity();
        })
        $scope.$on('$destroy', addItemWork);
    }
    $scope.initSubscribe();

    $scope.addItemWork = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        if ($scope.model.Status == "CREATED") {
            dataserviceCardJob.changeCardStatus($rootScope.CardCode, "START", function (rs) {
                rs = rs.data;
                if (rs.Error) {
                }
                else {
                    dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        if (!rs.Error) {
                            $scope.completeBoard = rs.Object.BoardCompleted;
                            $scope.completeList = rs.Object.ListCompleted;
                            $scope.leader = rs.Object.Leader;
                        }
                    });
                }
            });
        }
        //var modalInstance = $uibModal.open({
        //    animation: true,
        //    templateUrl: ctxfolderCardJob + '/item-work.html',
        //    controller: 'add-item-work',
        //    size: '60',
        //    resolve: {
        //        paraItemWork: function () {
        //            return {
        //                CardCode: $rootScope.CardCode
        //            }
        //        }
        //    }
        //});
        //modalInstance.result.then(function (d) {
        //    dataserviceCardJob.getListWorkItem($rootScope.CardCode, function (rs) {
        //        rs = rs.data;
        //        $scope.listItemWork = rs.Object;
        //    });
        //    dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
        //        rs = rs.data;
        //        $rootScope.checklists = rs;
        //        angular.forEach(rs, function (value, key) {
        //            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
        //                result = result.data;
        //                $rootScope.checkList[value.ChkListCode] = result;
        //            })
        //            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

        //                rs = rs.data;
        //                $rootScope.statusItem[value.ChkListCode] = rs;
        //            })
        //        })
        //    });
        //    dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
        //        rs = rs.data;
        //        if (!rs.Error) {
        //            $scope.completeBoard = rs.Object.BoardCompleted;
        //            $scope.completeList = rs.Object.ListCompleted;
        //            $scope.leader = rs.Object.Leader;
        //        }
        //    });
        //    $rootScope.getLogActivity();
        //});
    }

    $scope.approve = function (code, title) {

        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        else if (!$rootScope.isApprove) {
            return App.toastrError("Bạn không có quyền duyệt tiến độ");
        }
        dataserviceCardJob.checkConstraintSuccess(code, function (rs) {
            rs = rs.data;
            if (rs) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/approve-item-work.html',
                    controller: 'approve-item-work',
                    backdrop: 'static',
                    keyboard: false,
                    resolve: {
                        para: function () {
                            return {
                                ChkListCode: code,
                                Title: title
                            };
                        }
                    },
                    size: '50',
                });
                modalInstance.result.then(function (d) {
                    dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.checklists = rs;
                        $rootScope.ItemCheck = rs;
                        angular.forEach(rs, function (value, key) {
                            value.CheckTitle = decodeHTML(value.CheckTitle);
                            dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                                result = result.data;
                                $rootScope.checkList[value.ChkListCode] = result;
                                for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                                    iterator.Title = decodeHTML(iterator.Title);
                                }
                            })
                            dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.statusItem[value.ChkListCode] = rs;
                            })
                        })
                    });
                    $rootScope.getLogActivity();
                });
            }
            else {
                App.toastrError(caption.CJ_MSG_CONSTRAINT_ITEM_NO_SUCCESS);
            }
        })
    }

    //SUb item $rootScope.CardCode
    $scope.deleteCheckItem = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        dataserviceCardJob.deleteCheckItem(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                isChange = true;
                dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.checklists = rs;
                    angular.forEach(rs, function (value, key) {
                        value.CheckTitle = decodeHTML(value.CheckTitle);
                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                            result = result.data;
                            $rootScope.checkList[value.ChkListCode] = result;
                            for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                                iterator.Title = decodeHTML(iterator.Title);
                            }
                        })
                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.statusItem[value.ChkListCode] = rs;
                        })
                    })
                });
                dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.completeBoard = rs.Object.BoardCompleted;
                        $scope.completeList = rs.Object.ListCompleted;
                        $scope.leader = rs.Object.Leader;
                    }
                });
                $scope.model.Completed = rs.Object.PercentCard;
                $scope.completeList = rs.Object.PercentList;
                $scope.completeBoard = rs.Object.PercentBoard;
                $rootScope.getLogActivity();
                //var content = CKEDITOR.instances['description'].getData();
                //var idQ = `#si-${id}`;
                //var $html = $('<div />', { html: content });
                //$html.find(idQ).remove();
                //console.log($html.html());
                //content = $html.html();
                //CKEDITOR.instances['description'].setData(content);
                //var data = { CardCode: $rootScope.CardCode, Description: content };

                //dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                //    rs = rs.data;
                //    if (rs.Error) {
                //        App.toastrError(rs.Title)
                //    }
                //    else {
                //        App.toastrSuccess(rs.Title);
                //        $rootScope.getLogActivity();
                //    }
                //})
            }
        })
    }

    $scope.checkItemClick = function (itemId, checkListId, disableApprove) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        else if (disableApprove) {
            return;
        }
        App.blockUI({
            target: "#modal-body",
            boxed: true,
            message: 'loading...'
        });

        dataserviceCardJob.changeChkItemStatus(itemId, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
                App.unblockUI("#modal-body");
            }
            else {
                App.toastrSuccess(rs.Title);
                if (rs.Object) {
                    $scope.model.Completed = rs.Object.PercentCard;
                    $scope.completeList = rs.Object.PercentList;
                    $scope.completeBoard = rs.Object.PercentBoard;
                    var checkList = $scope.checklists.find(function (element) {
                        if (element.Id == checkListId) return true;
                    });
                    if (checkList) {
                        checkList.Completed = rs.Object.PercentCheckList;
                    }
                    $rootScope.getLogActivity();
                }
                App.unblockUI("#modal-body");
            }
        });
    }

    $scope.addCheckItem = function (checkCode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        if ($scope.checkitem.Title == '') {
            return App.toastrError("Vui lòng nhập tiêu đề");
        }
        var obj = {
            ChkListCode: checkCode,
            Title: $scope.checkitem.Title
        }
        dataserviceCardJob.addCheckItem(obj, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.checkitem.Title = '';
                dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.checklists = rs;
                    angular.forEach(rs, function (value, key) {
                        value.CheckTitle = decodeHTML(value.CheckTitle);
                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                            result = result.data;
                            $rootScope.checkList[value.ChkListCode] = result;
                            for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                                iterator.Title = decodeHTML(iterator.Title);
                            }
                        })
                        dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {

                            rs = rs.data;
                            $rootScope.statusItem[value.ChkListCode] = rs;
                        })
                    })
                });
                dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    if (!rs.Error) {
                        $scope.completeBoard = rs.Object.BoardCompleted;
                        $scope.completeList = rs.Object.ListCompleted;
                        $scope.leader = rs.Object.Leader;
                    }
                });
                $scope.show.addCheckItem[checkCode] = false;
                $scope.model.Completed = rs.Object.PercentCard;
                $scope.completeList = rs.Object.PercentList;
                $scope.completeBoard = rs.Object.PercentBoard;
                $rootScope.getLogActivity();
                //var content = CKEDITOR.instances['description'].getData();
                //content += `<a title='${obj.Title}' id='si-${rs.ID}'>${obj.Title}</a>`;
                //CKEDITOR.instances['description'].setData(content);
                //var data = { CardCode: $rootScope.CardCode, Description: content };

                //dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                //    rs = rs.data;
                //    if (rs.Error) {
                //        App.toastrError(rs.Title)
                //    }
                //    else {
                //        App.toastrSuccess(rs.Title);
                //        $rootScope.getLogActivity();
                //    }
                //})
            }
        })
    }

    $scope.editCheckItemTitle = function (e) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        var itemTitle = e.target.value;
        var itemId = e.target.getAttribute("itemid");
        $scope.show.editCheckItem[e.target.getAttribute('itemid')] = false;

        if (itemTitle == '' || itemTitle == null || itemTitle == undefined) {
            return App.toastrError("Vui lòng nhập tiêu đề");
        }
        var obj = {
            Id: itemId,
            Title: itemTitle
        }
        dataserviceCardJob.changeChkItemTitle(obj, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.checklists = rs;
                    angular.forEach(rs, function (value, key) {
                        value.CheckTitle = decodeHTML(value.CheckTitle);
                        dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                            result = result.data;
                            $rootScope.checkList[value.ChkListCode] = result;
                            for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                                iterator.Title = decodeHTML(iterator.Title);
                            }
                        })
                    })
                });
                $rootScope.getLogActivity();
                //var content = CKEDITOR.instances['description'].getData();
                //var idQ = `#si-${itemId}`;
                //var $html = $('<div />', { html: content });
                //var a = $html.find(idQ);
                //if (a && a.length > 0) {
                //    a[0].title = itemTitle;
                //    a[0].text = itemTitle;
                //    content = $html.html();
                //}
                //else {
                //    content += `<a title='${itemTitle}' id='si-${itemId}'>${itemTitle}</a>`;
                //}
                //CKEDITOR.instances['description'].setData(content);
                //var data = { CardCode: $rootScope.CardCode, Description: content };

                //dataserviceCardJob.updateDescriptionReal(data, function (rs) {
                //    rs = rs.data;
                //    if (rs.Error) {
                //        App.toastrError(rs.Title)
                //    }
                //    else {
                //        App.toastrSuccess(rs.Title);
                //        $rootScope.getLogActivity();
                //    }
                //})
            }
        })
    }

    $scope.assignUserToSubItem = function (checkitemId, checkListCode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        else if (!$rootScope.isApprove) {
            return App.toastrError("Bạn không có quyền thực hiện");
        }

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/assign-user-sub-item-check.html',
            controller: 'assign-user-sub-item-check',
            size: '50',
            resolve: {
                item: function () {
                    return {
                        CheckitemId: checkitemId,
                        CheckListCode: checkListCode,
                        CardCode: $rootScope.CardCode
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            isChange = true;
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;
                angular.forEach(rs, function (value, key) {
                    value.CheckTitle = decodeHTML(value.CheckTitle);
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                        for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                            iterator.Title = decodeHTML(iterator.Title);
                        }
                    })
                })
            });
        });
    }

    $scope.advance = function (item) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/file-item.html',
            controller: 'file-item',
            backdrop: 'static',
            keyboard: false,
            size: '50',
            resolve: {
                para: function () {
                    return item;
                }
            }
        });
        modalInstance.result.then(function (d) {
            dataserviceCardJob.getCheckList($rootScope.CardCode, function (rs) {
                rs = rs.data;
                $rootScope.checklists = rs;
                $scope.ListChkItemRollback = angular.copy($rootScope.checklists);
                angular.forEach(rs, function (value, key) {
                    value.CheckTitle = decodeHTML(value.CheckTitle);
                    dataserviceCardJob.getCheckItem(value.ChkListCode, function (result) {
                        result = result.data;
                        $rootScope.checkList[value.ChkListCode] = result;
                        for (const iterator of $rootScope.checkList[value.ChkListCode]) {
                            iterator.Title = decodeHTML(iterator.Title);
                        }
                    })
                    dataserviceCardJob.checkItemSuccess(value.ChkListCode, $rootScope.CardCode, function (rs) {
                        rs = rs.data;
                        $rootScope.statusItem[value.ChkListCode] = rs;
                    })
                })
            });
        }, function () { });
    }

    $scope.viewCmsCheckItem = function (data) {
        console.log(data);
        console.log(ctxfolderDashBoard);
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/viewItem.html',
            controller: 'viewItemCardJob',
            backdrop: 'static',
            windowClass: 'message-avoid-header',
            size: '75',
            resolve: {
                para: function () {
                    return {
                        data: $rootScope.CardCode,
                        bookMark: `ci-${data.Id}`
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };
    $scope.viewCmsSubItem = function (data) {
        console.log(data);
        console.log(ctxfolderDashBoard);
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/viewItem.html',
            controller: 'viewItemCardJob',
            backdrop: 'static',
            windowClass: 'message-avoid-header',
            size: '75',
            resolve: {
                para: function () {
                    return {
                        data: $rootScope.CardCode,
                        bookMark: `si-${data.Id}`
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };
    function decodeHTML(str) {
        var element = document.createElement('div');
        if (str && typeof str === 'string') {
            // strip script/html tags
            str = str.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
            str = str.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
            element.innerHTML = str;
            str = element.textContent;
            element.textContent = '';
        }

        return str;
    }
    window.decodeHTML = decodeHTML;
});

app.controller('card-log-activity', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, $filter) {

    $rootScope.getLogActivity = function () {
        dataserviceCardJob.getActivityAssign($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.ActivityData = rs;
            if ($rootScope.ActivityData.length > 0) {
                for (var i = 0; i < $rootScope.ActivityData.length; i++) {
                    //if ($rootScope.ActivityData[i].IdObject == "DESCRIPTION") {
                    //    //$rootScope.ActivityData[i].ChangeDetails = $rootScope.getSafehtml($rootScope.ActivityData[i].ChangeDetails);
                    //    $rootScope.ActivityData[i].ChangeDetails = window.decodeHTML($rootScope.ActivityData[i].ChangeDetails);
                    //}
                    $rootScope.ActivityData[i].ChangeDetails = window.decodeHTML($rootScope.ActivityData[i].ChangeDetails);
                }
            }
            console.log($rootScope.ActivityData);
        });
    }

    $rootScope.getSafehtml = function (description) {
        var tmp = document.createElement("DIV");
        tmp.innerHTML = description;
        return tmp.textContent || tmp.innerText || "";
    }

    $scope.viewLogActUser = function () {
        if ($rootScope.isViewLog) {
            $rootScope.isViewLog = false;
        }
        else {
            $rootScope.isViewLog = true;
        }
    }
});

app.controller('card-map', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, $filter) {
    $scope.address = {};

    $scope.isHideMap = false;

    $scope.model = {};

    $rootScope.listAddress = [];

    function initMap() {
        fields_vector_source = new ol.source.Vector({});
        var center = ol.proj.transform([$rootScope.lngDefault, $rootScope.latDefault], 'EPSG:4326', 'EPSG:3857');
        map = new ol.Map({
            target: $('#map')[0],

            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM({
                        url: 'https://mt{0-3}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}'


                    })
                }),
                new ol.layer.Vector({
                    source: fields_vector_source
                })
            ],

            view: new ol.View({
                center: center,
                zoom: 15

            }),

            controls: ol.control.defaults({
                attribution: false,
                zoom: false,
            })
        });
        var pathGG = $('#pathGG').html();
        var id = $("#ID").html();
        var aaa = parseInt(id);
        if (pathGG != "" && pathGG != null) {
            pathSourceVector = new ol.source.Vector({
                features: []
            });
            pathLayerMarker = new ol.layer.Vector({
                source: pathSourceVector
            });
            var path = polyline.decode(pathGG);

            pathLayerMarker = renderLinePathLayer(path);
            map.addLayer(pathLayerMarker);

            var styles3 = [

                new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: '#64c936',
                        width: 3
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(100, 201, 54,1)'
                    })
                }),
            ];

            var iconStyleStart = new ol.style.Style({
                image: new ol.style.Icon(({
                    anchor: [0.5, 26],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: 'https://i.imgur.com/pjZYQLJ.png'
                })),
                zIndex: 11
            });
            var iconStyleEnd = new ol.style.Style({
                image: new ol.style.Icon(({
                    anchor: [0.5, 26],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    src: 'https://i.imgur.com/3g07NhB.png'
                })),
                zIndex: 11
            });

            var pathLenght = path.length - 1;
            var iconFeatureStart = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.transform([parseFloat(path[0][1]), parseFloat(path[0][0])], 'EPSG:4326', 'EPSG:3857')),
                type: "valve"
            });

            iconFeatureStart.setId(1);
            iconFeatureStart.setStyle(iconStyleStart);
            var iconFeatureEnd = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.transform([parseFloat(path[pathLenght][1]), parseFloat(path[pathLenght][0])], 'EPSG:4326', 'EPSG:3857')),
                type: "valve"
            });
            iconFeatureEnd.setId(2);
            iconFeatureEnd.setStyle(iconStyleEnd);
            var vectorIcon = new ol.source.Vector({});
            vectorIcon.addFeature(iconFeatureStart);
            vectorIcon.addFeature(iconFeatureEnd);

            var vectorLayer = new ol.layer.Vector({
                source: vectorIcon,
                style: styles3
            });

            map.addLayer(vectorLayer);


            //pathSource = new ol.source.Vector({});


            pathSource.addFeature(renderLineStringFeature(path))
            var field_location = pathSource.getFeatureById(aaa).getProperties();
            var field_extent = field_location.geometry.getExtent();
            map.getView().fit(field_extent, map.getSize());
            map.getView().setZoom(12);
        }
    }

    function initDataMap() {
        if ($scope.model.LocationGps == null) {
            $scope.address.lat = $rootScope.latDefault;
            $scope.address.lng = $rootScope.lngDefault;
            $scope.address.text = $rootScope.addressDefault;
        }
        else {
            $scope.address.lat = parseFloat($scope.model.LocationGps.split(',')[0]);
            $scope.address.lng = parseFloat($scope.model.LocationGps.split(',')[1]);
            $scope.address.text = $scope.model.LocationText;
        }


        var centerPoint = { lat: $scope.address.lat, lng: $scope.address.lng };
        var infowindow = new google.maps.InfoWindow({
            content: $scope.address.text,
        });
        var maps = new google.maps.Map(
            document.getElementById('map'), { zoom: $rootScope.zoomMapDefault, center: centerPoint });
        var marker = new google.maps.Marker({
            zoom: 12,
            position: centerPoint,
            map: maps,
        });
        var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-33.8902, 151.1759), new google.maps.LatLng(-33.8474, 151.2631));
        var options = {
            bounds: defaultBounds,
            types: ['geocode']
        };


        //Autocomplete
        var input = document.getElementById('searchAddress');
        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);
        var service = new google.maps.places.PlacesService(maps);


        //Map change
        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Không tìm thấy địa chỉ này");
                return;
            }
            if (place.geometry.viewport) {
                maps.fitBounds(place.geometry.viewport);
            } else {
                maps.setCenter(place.geometry.location);
                maps.setZoom(17);
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);
            var html = "<b>" + place.name + "</b> <br/>" + place.formatted_address;
            infowindow.setContent(html);
            infowindow.open(maps, marker);
            $scope.address.text = place.formatted_address;
            $scope.address.lat = place.geometry.location.lat();
            $scope.address.lng = place.geometry.location.lng();
            $scope.$apply();
        });

        infowindow.open(map, marker);
        maps.addListener('click', function (event) {
            var point = { lat: event.latLng.lat(), lng: event.latLng.lng() }
            $scope.address.lat = point.lat;
            $scope.address.lng = point.lng;
            dataserviceCardJob.getAddress(point.lat, point.lng, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    var html = "<b>Thông tin</b> <br/>" + rs.Object;
                    infowindow.setContent(html);
                    infowindow.open(map, marker, html);
                    $scope.address.text = rs.Object;
                }
            })
            if (marker) {
                marker.setPosition(point);
            }
            else {
                marker = new google.maps.Marker({
                    position: point,
                    map: maps,
                });
            }
            maps.setZoom($rootScope.zoomMapDefault);
        })
    }

    function mapReSize() {
        setTimeout(function () {
            map.updateSize();
        }, 600);
    }

    $scope.initData = function () {
        initMap();
        initDataMap();
        mapReSize();
    }

    $scope.initData();

    //Address
    $scope.saveAddress = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var data = { CardCode: $rootScope.CardCode, LocationGps: "" + $scope.address.lat + "," + $scope.address.lng, LocationText: $scope.address.text };
        dataserviceCardJob.InsertAddressJobCard(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.listAddress = rs;
                });
                $rootScope.getLogActivity();
            }
        })
    }

    $scope.deletedAddress = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceCardJob.deleteAddress(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                dataserviceCardJob.GetLisAddressJobCard($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.listAddress = rs;
                });
                $rootScope.getLogActivity();
            }
        })
    }
});

app.controller('card-object-relative', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, $filter) {
    $rootScope.listID = [];
    //Object relative
    $scope.initCardRelative = function () {
        dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $rootScope.listID = [];
            $rootScope.listObjRelative = rs;
            for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                $rootScope.listID.push($scope.listObjRelative[i].ID);
            }
        });
    }

    $scope.deleteObjReletive = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceCardJob.deleteCardDependency(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                App.toastrSuccess(rs.Title);
                $scope.initCardRelative();
                $rootScope.getLogActivity();
            }
        });
    };

    $scope.addObjectRelative = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/add-object-relative.html',
            controller: 'add-object-relativeCardJob',
            size: '70',
            backdrop: 'static',
            keyboard: false,
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.initCardRelative();
        }, function () {
        });
    };
});

app.controller('card-product-relative', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, $filter) {
    $scope.product = {
        ProductCode: '',
        Quantity: 0,
        Activity: '',
        CardCode: $rootScope.CardCode
    };

    $scope.addProduct = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var partternNumber = /^[1-9]\d*(\\d+)?$/;
        if (!partternNumber.test($scope.product.Quantity)) {
            return App.toastrError("Vui lòng nhập số nguyên và lớn hơn 0");
        }
        else if ($scope.product.Quantity > 10000) {
            return App.toastrError("Vui lòng nhập số nguyên nhỏ hơn 10000");
        }

        if ($scope.product.ProductCode == '') {
            return App.toastrError("Vui lòng chọn sản phẩm");
        }
        var data = {
            CardCode: $rootScope.CardCode, ProductCode: $scope.product.ProductCode,
            Quantity: $scope.product.Quantity, JcAct: $scope.product.Activity
        };
        dataserviceCardJob.insertProduct(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
                    debugger
                    rs = rs.data;
                    $rootScope.listCardProduct = rs;
                });
                $rootScope.getLogActivity();
            }
        })
    }

    $scope.deletedProduct = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceCardJob.deleteProduct(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardProduct($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.listCardProduct = rs;
                });
                $rootScope.getLogActivity();
            }
        })
    }
});

app.controller('card-service-relative', function ($scope, $http, $rootScope, $compile, $uibModal, dataserviceCardJob, $filter) {
    $scope.service = {
        ServiceCode: '',
        Quantity: 0,
        Activity: '',
        CardCode: $rootScope.CardCode
    };

    $scope.addService = function (serviceCode, quantity, activity) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var partternNumber = /^[1-9]\d*(\\d+)?$/;
        if (!partternNumber.test($scope.service.Quantity)) {
            return App.toastrError("Vui lòng nhập số nguyên và lớn hơn 0");
        }
        else if ($scope.service.Quantity > 10000) {
            return App.toastrError("Vui lòng nhập số nguyên nhỏ hơn 10000");
        }
        if ($scope.service.ServiceCode == '') {
            return App.toastrError("Vui lòng chọn dịch vụ");
        }

        var data = {
            CardCode: $rootScope.CardCode, ServiceCode: $scope.service.ServiceCode,
            Quantity: $scope.service.Quantity, JcAct: $scope.service.Activity
        };
        debugger
        dataserviceCardJob.insertService(data, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.listCardService = rs;
                });
                $rootScope.getLogActivity();
            }
        })
    }

    $scope.deletedService = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceCardJob.deleteService(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                dataserviceCardJob.getCardService($rootScope.CardCode, function (rs) {
                    rs = rs.data;
                    $rootScope.listCardService = rs;
                });
                $rootScope.getLogActivity();
            }
        })
    }
});

app.controller('add-reason-reject', function ($scope, $http, $rootScope, $compile, $uibModal, $confirm, $uibModalInstance, dataserviceCardJob, para) {
    $scope.model = {
        CardCode: para.CardCode,
        Value: para.Value,
        ChangeDetails: ""
    }

    $scope.cancel = function () {
        $uibModalInstance.close("cancel");
    };

    $scope.submit = function () {
        if ($scope.addformreason.validate()) {

            dataserviceCardJob.rejectCard($scope.model, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $uibModalInstance.close();
                }
            })
        }
    }

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200);
});

app.controller('file-item', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, dataserviceCardJob, $filter, $translate, dataserviceSupplier, $uibModalInstance, dataserviceCardJob, para) {
    var vm = $scope;
    $scope.selected = [];
    $scope.selectAll = false;
    $scope.toggleAll = toggleAll;
    $scope.toggleOne = toggleOne;
    $scope.model = {
        CheckTitle: para.CheckTitle,
        ChkListCode: para.ChkListCode,
        Note: para.Note,
        Completed: para.Completed
    }

    $scope.modelCoaching = {
        CardCode: $rootScope.CardCode,
        ItemCode: para.ChkListCode,
        CoachType: ''
    }

    var titleHtml = '<label class="mt-checkbox"><input type="checkbox" ng-model="selectAll" ng-click="toggleAll(selectAll, selected)"/><span></span></label>';
    vm.dtOptions = DTOptionsBuilder.newOptions()
        .withOption('ajax', {
            url: "/Admin/CardJob/JTableFileWorkRequest",
            beforeSend: function (jqXHR, settings) {
                App.blockUI({
                    target: "#modal-body-file-item",
                    boxed: true,
                    message: 'loading...'
                });
            },
            type: 'POST',
            data: function (d) {
                d.ItemCode = para.ChkListCode;
            },
            complete: function () {
                App.unblockUI("#modal-body-file-item");
                heightTableManual(335, "#tblDataCustomerFile");
            }
        })
        .withPaginationType('full_numbers').withDOM("<'table-scrollable't>ip")
        .withDataProp('data').withDisplayLength(5)
        .withOption('order', [0, 'desc'])
        .withOption('serverSide', true)
        .withOption('headerCallback', function (header) {
            if (!$scope.headerCompiled) {
                $scope.headerCompiled = true;
                $compile(angular.element(header).contents())($scope);
            }
        })
        .withOption('initComplete', function (settings, json) {
        })
        .withOption('createdRow', function (row, data, dataIndex) {
            const contextScope = $scope.$new(true);
            contextScope.data = data;
            contextScope.contextMenu = $scope.contextMenu;
            $compile(angular.element(row))($scope);
            $compile(angular.element(row).attr('context-menu', 'contextMenu'))(contextScope);
        });
    vm.dtColumns = [];
    vm.dtColumns.push(DTColumnBuilder.newColumn("Id").withTitle(titleHtml).notSortable().renderWith(function (data, type, full, meta) {
        $scope.selected[full.Id] = false;
        return '<label class="mt-checkbox"><input type="checkbox" ng-model="selected[' + full.Id + ']" ng-click="toggleOne(selected)"/><span></span></label>';
    }).withOption('sClass', 'hidden'));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileName').withTitle("{{'CJ_BTN_NAME_FILE' | translate}}").renderWith(function (data, type, full) {
        var excel = ['.XLSM', '.XLSX', '.XLS'];
        var document = ['.TXT'];
        var word = ['.DOCX', '.DOC'];
        var pdf = ['.PDF'];
        var powerPoint = ['.PPS', '.PPTX', '.PPT'];
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];
        var icon = "";
        if (excel.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(106,170,89);font-size: 15px;" class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp;';
        } else if (word.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(13,118,206);font-size: 15px;" class="fa fa-file-word-o" aria-hidden="true"></i>&nbsp;';
        } else if (document.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(0,0,0);font-size: 15px;" class="fa fa-file-text-o" aria-hidden="true"></i>&nbsp;';
        } else if (pdf.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-pdf-o" aria-hidden="true"></i>&nbsp;';
        } else if (powerPoint.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(226,165,139);font-size: 15px;" class="fa fa-file-powerpoint-o" aria-hidden="true"></i>&nbsp;';
        } else if (image.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fa fa-picture-o" aria-hidden="true"></i>&nbsp;';
        } else {
            icon = '<i style="color: rgb(42,42,42);font-size: 15px;" class="fas fa-align-justify" aria-hidden="true"></i>&nbsp;';
        }
        return icon + data;
    }));
    //vm.dtColumns.push(DTColumnBuilder.newColumn('ReposName').withTitle("{{'CJ_LIST_COL_CAT' | translate}}").renderWith(function (data, type, full) {
    //    return '<i class="fa fa-folder-open icon-state-warning"></i>&nbsp' + data;
    //}));
    vm.dtColumns.push(DTColumnBuilder.newColumn('FileID').withOption('sClass', 'nowrap dataTable-w80 text-center').withTitle("{{'CJ_LIST_COL_VIEW_CONTENT' | translate}}").notSortable().renderWith(function (data, type, full) {
        var excel = ['.XLSM', '.XLSX', '.XLS'];
        var document = ['.TXT'];
        var word = ['.DOCX', '.DOC'];
        var pdf = ['.PDF'];
        var powerPoint = ['.PPS', '.PPTX', '.PPT'];
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];

        var mode = 2;
        if (full.ListUserShare != "" && full.ListUserShare != null && full.ListUserShare != undefined) {
            var lstShare = JSON.parse(full.ListUserShare);
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write) {
                            mode = 0;
                            break;
                        }
                    }
                }
            }
        }

        if (excel.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'excel';
            return '<a ng-click="viewExcel(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit pt5"></i></a>';
        } else if (word.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'Syncfusion';
            return '<a ng-click="viewWord(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit pt5"></i></a>';
        } else if (pdf.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            typefile = 'pdf';
            return '<a ng-click="viewPDF(' + full.Id + ', ' + mode + '' + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit pt5"></i></a>';
        } else if (document.indexOf(full.FileTypePhysic.toUpperCase()) !== -1 || image.indexOf(full.FileTypePhysic.toUpperCase()) !== -1) {
            return '<a ng-click="view(' + full.Id + ')" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit pt5"></i></a>';
        } else {
            return '<a ng-click="getObjectFile(0)" title="{{&quot; Chỉnh sửa &quot; | translate}}" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-edit pt5"></i></a>';
        }
    }));
    //vm.dtColumns.push(DTColumnBuilder.newColumn('').withTitle('{{"CJ_LIST_COL_DES" | translate}}').notSortable().renderWith(function (data, type, full) {
    //    return '<button title="Mô tả" ng-click="extension(' + full.FileID + ')" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline blue"><i class="fa fa-info-circle"></i></button>';
    //}));
    vm.dtColumns.push(DTColumnBuilder.newColumn('CreatedTime').withTitle("{{'CJ_COL_CREATE_DATE' | translate}}").renderWith(function (data, type) {
        return data != "" ? $filter('date')(new Date(data), 'dd/MM/yyyy') : null;
    }));
    vm.dtColumns.push(DTColumnBuilder.newColumn('action').withTitle($translate('COM_LIST_COL_ACTION')).withOption('sClass', 'nowrap w75').renderWith(function (data, type, full) {
        if (full.TypeFile == "SHARE") {
            return '<a ng-click="dowload(\'' + full.FileCode + '\')" target="_blank" style="width: 25px; height: 25px; padding: 0px" title="Tải xuống - ' + full.FileName + '" class="btn btn-icon-only btn-circle btn-outline green " download><i class="fa fa-download pt5"></i></a>';
        } else {
            return '<a ng-click="share(' + full.Id + ')" style="width: 25px; height: 25px; padding: 0px" title="Chia sẻ - ' + full.FileName + '" class="btn btn-icon-only btn-circle btn-outline blue "><i class="fa fa-share-alt pt5"></i></a>' +
                '<a ng-click="dowload(\'' + full.FileCode + '\')" style="width: 25px; height: 25px; padding: 0px" title="Tải xuống - ' + full.FileName + '" class="btn btn-icon-only btn-circle btn-outline green"><i class="fa fa-download pt5"></i></a>' +
                '<button title="Xoá" ng-click="delete(' + full.Id + ')" style="width: 25px; height: 25px; padding: 0px" class="btn btn-icon-only btn-circle btn-outline red"><i class="fa fa-trash"></i></button>';
        }
    }));
    vm.reloadData = reloadData;
    vm.dtInstance = {};

    function reloadData(resetPaging) {
        vm.dtInstance.reloadData(callback, resetPaging);
    }

    function callback(json) {

    }

    function toggleAll(selectAll, selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                selectedItems[id] = selectAll;
            }
        }
    }

    function toggleOne(selectedItems) {
        for (var id in selectedItems) {
            if (selectedItems.hasOwnProperty(id)) {
                if (!selectedItems[id]) {
                    vm.selectAll = false;
                    return;
                }
            }
        }
        vm.selectAll = true;
    }

    $scope.reload = function () {
        reloadData(true);
    }

    $rootScope.reloadFile = function () {
        $scope.reload();
    }

    $scope.cancel = function () {
        $uibModalInstance.close("cancel");
    };

    $scope.initData = function () {
        dataserviceCardJob.getListCoachingType(function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                $scope.lstCoachingType = rs.Object;
            }
        });

        dataserviceCardJob.getListCoachingDetail($rootScope.CardCode, para.ChkListCode, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                $scope.listCoachingDetail = rs.Object;
            }
        });
    }

    $scope.initData();

    $scope.search = function () {
        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderCustomer + '/file_search.html',
            windowClass: 'modal-file',
            backdrop: 'static',
            controller: function ($scope, $uibModalInstance) {
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '30',
        });
        modalInstance.result.then(function (d) {
            reloadData()
        }, function () { });
    }

    $scope.add = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        if ($scope.file == '' || $scope.file == undefined) {
            App.toastrError(caption.COM_MSG_CHOSE_FILE);
        } else {
            App.blockUI({
                target: "#modal-body-file-item",
                boxed: true,
                message: 'loading...'
            });
            var data = new FormData();
            data.append("FileUpload", $scope.file);
            data.append("CardCode", para.ChkListCode);
            data.append("IsMore", false);
            dataserviceCardJob.insertCardJobFileRequest(data, function (result) {
                result = result.data;
                if (result.Error) {
                    App.toastrError(result.Title);
                    App.unblockUI("#modal-body-file-item");
                } else {
                    App.toastrSuccess(result.Title);
                    defaultShareFile(result.Object);
                    $scope.reload();
                    App.unblockUI("#modal-body-file-item");
                    $scope.file = null;
                }
            })
        }
    }

    $scope.edit = function (fileName, id) {
        dataserviceCardJob.getCardFileRequest(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            }
            else {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: ctxfolderCardJob + '/file_edit.html',
                    controller: 'fileEditCardJob',
                    windowClass: "modal-file",
                    backdrop: 'static',
                    size: '60',
                    resolve: {
                        para: function () {
                            return {
                                data: rs.Object,
                                FileName: fileName
                            };
                        }
                    }
                });
                modalInstance.result.then(function (d) {
                    reloadData()
                }, function () { });
            }
        })
    }

    $scope.delete = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isDelete = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Delete) {
                            isDelete = false;
                            break;
                        }
                    }
                }
                if (!isDelete) {
                    return App.toastrError("Bạn không có quyền xóa tệp tin");
                }
            }
        }

        var modalInstance = $uibModal.open({
            templateUrl: ctxfolderMessage + '/messageConfirmDeleted.html',
            windowClass: "message-center",
            controller: function ($scope, $uibModalInstance) {
                $scope.message = caption.COM_MSG_DELETE_CONFIRM_COM;
                $scope.ok = function () {
                    dataserviceCardJob.deleteCardFile(id, function (result) {
                        result = result.data;
                        if (result.Error) {
                            App.toastrError(result.Title);
                        } else {
                            App.toastrSuccess(result.Title);
                            $uibModalInstance.close();
                            $rootScope.getLogActivity();
                        }
                    });
                };
                $scope.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            size: '25',
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    }

    $scope.share = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderFileShare + '/fileShare.html',
            controller: 'fileShare',
            windowClass: 'modal-center',
            backdrop: 'static',
            size: '60',
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () { });
    }

    $scope.viewFile = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        //dataserviceHrEmployeeCustomer.getByteFile(id, function (rs) {rs=rs.data;
        //    
        //    var blob = new Blob([rs.Object], { type: "application/msword;charset=utf-8" });
        //    var blobUrl = URL.createObjectURL(blob);
        //    var url = window.encodeURIComponent(blobUrl);
        //    window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
        //})
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //
        //var dt = userModel.Url;
        //dt = dt.replace("\/", "\\");
        //var url1 = "upload\\repository" + dt;
        //url1 = "\\uploads\\repository\\3.THÔNG TIN CHUNG\\mail vib.docx";
        //var url = window.encodeURIComponent(url1);
        //window.open('https://docs.google.com/gview?url=' + "https://facco.s-work.vn" + '' + url + '&embedded=true', '_blank');
    }

    $scope.viewImage = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        //var userModel = {};
        //var listdata = $('#tblDataFile').DataTable().data();
        //for (var i = 0; i < listdata.length; i++) {
        //    if (listdata[i].Id == id) {
        //        userModel = listdata[i];
        //        break;
        //    }
        //}
        //toDataUrl(window.location.origin + userModel.Url, function (myBase64) {
        //    var modalInstance = $uibModal.open({
        //        templateUrl: '/views/admin/edmsRepository/imageViewer.html',
        //        controller: 'contractTabFileImageViewer',
        //        backdrop: 'static',
        //        size: '40',
        //        resolve: {
        //            para: function () {
        //                return myBase64;
        //            }
        //        }
        //    });
        //    modalInstance.result.then(function (d) {
        //    }, function () {
        //    });
        //});
    }

    $scope.dowload = function (fileCode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].FileCode == fileCode) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isDownload = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isDownload = false;
                            break;
                        }
                    }
                }
                if (!isDownload) {
                    return App.toastrError("Bạn không có quyền tải tệp tin");
                }
            }
        }

        location.href = "/Admin/EDMSRepository/DownloadFile?fileCode="
            + fileCode;
    }

    $scope.extend = function (id) {
        //dataserviceCardJob.getSuggestionsCardFile($rootScope.CardCode, function (rs) {
        //    rs = rs.data;
        //    var data = rs !== '' ? rs : { CatCode: '', ObjectCode: $rootScope.CardCode, ObjectType: 'CARDJOB' };
        //    var modalInstance = $uibModal.open({
        //        templateUrl: ctxfolderRepository + '/addFile.html',
        //        controller: 'addFile',
        //        windowClass: 'modal-file',
        //        backdrop: 'static',
        //        size: '60',
        //        resolve: {
        //            para: function () {
        //                return data;
        //            }
        //        }
        //    });
        //    modalInstance.result.then(function (d) {
        //        reloadData();
        //        defaultShareFile(d);
        //    }, function () { });
        //})
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        dataserviceSupplier.getDefaultRepo(para.ChkListCode, 'ITEM_REQUEST', function (rs) {
            rs = rs.data;
            var data = rs !== null ? rs : { CatCode: '', ObjectCode: para.ChkListCode, ObjectType: 'ITEM_REQUEST' };
            var modalInstance = $uibModal.open({
                templateUrl: ctxfolderSupplier + '/addFile.html',
                controller: 'setupRepoDefault',
                windowClass: 'modal-file',
                backdrop: 'static',
                size: '60',
                resolve: {
                    para: function () {
                        return data;
                    }
                }
            });
            modalInstance.result.then(function (d) {
                reloadData();
            }, function () { });
        })
    }

    $scope.loadFile = function (event) {
        $scope.file = event.target.files[0];
    }

    $scope.getObjectFile = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            dataserviceCardJob.getItemFile(id, true, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                    return null;
                }
            });
        }
    };

    $scope.viewExcel = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }
        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            if (userModel.SizeOfFile < 20971520) {
                dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        if (rs.ID === -1) {
                            App.toastrError(rs.Title);
                            setTimeout(function () {
                                window.open('/Admin/Excel#', '_blank');
                            }, 2000);
                        } else {
                            App.toastrError(rs.Title);
                        }
                        return null;
                    } else {
                        window.open('/Admin/Excel#', '_blank');
                    }
                });
            } else {
                App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
            }

        }
    };

    $scope.viewWord = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            if (userModel.SizeOfFile < 20971520) {
                dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        if (rs.ID === -1) {
                            App.toastrError(rs.Title);
                            setTimeout(function () {
                                window.open('/Admin/Docman#', '_blank');
                            }, 2000);
                        } else {
                            App.toastrError(rs.Title);
                        }
                        return null;
                    } else {
                        window.open('/Admin/Docman#', '_blank');
                    }
                });
            } else {
                App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
            }
        }
    };

    $scope.viewPDF = function (id, mode) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }
        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (id === 0) {
            App.toastrError(caption.COM_MSG_NOT_SUPPORT);
            return null;
        } else {
            if (userModel.SizeOfFile < 20971520) {
                dataserviceCardJob.getItemFile(id, true, mode, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        if (rs.ID === -1) {
                            App.toastrError(rs.Title);
                            setTimeout(function () {
                                window.open('/Admin/PDF#', '_blank');
                            }, 2000);
                        } else {
                            App.toastrError(rs.Title);
                        }
                        return null;
                    } else {
                        window.open('/Admin/PDF#', '_blank');
                    }
                });
            } else {
                App.toastrError(caption.HR_HR_FILE_SIZE_LIMIT);
            }
        }
    };

    $scope.view = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var isImage = false;
        var image = ['.JPG', '.PNG', '.TIF', '.TIFF'];
        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (userModel.ListUserShare != "" && userModel.ListUserShare != null && userModel.ListUserShare != undefined) {
            var lstShare = JSON.parse(userModel.ListUserShare);
            var isView = true;
            if (lstShare.length > 0) {
                for (var i = 0; i < lstShare.length; i++) {
                    if (lstShare[i].Code == userName) {
                        if (!lstShare[i].Permission.Write && !lstShare[i].Permission.Read) {
                            isView = false;
                            break;
                        }
                    }
                }
                if (!isView) {
                    return App.toastrError("Bạn không có quyền xem tệp tin");
                }
            }
        }

        if (image.indexOf(userModel.FileTypePhysic.toUpperCase()) !== -1) {
            isImage = true;
        }
        if (userModel.CloudFileId != null && userModel.CloudFileId != "") {
            //SHOW LÊN MÀN HÌNH LUÔN
            // window.open(" https://drive.google.com/file/d/" + userModel.CloudFileId + "/view", "_blank");
            //$scope.openViewer("https://drive.google.com/file/d/"+userModel.CloudFileId + "/view");3
            dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                rs = rs.data;
                rs.Object = encodeURI(rs.Object);
                if (rs.Error == false) {
                    if (isImage == false) {
                        window.open(rs.Object, '_blank')
                        //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                    } else
                        $scope.openViewer(rs.Object, isImage);
                    //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                }
                else {

                }
            });
        }
        else {
            dataserviceCardJob.createTempFile(id, false, "", function (rs) {
                rs = rs.data;
                rs.Object = encodeURI(rs.Object);
                if (rs.Error == false) {
                    if (isImage == false) {
                        var url = window.location.origin + '/' + rs.Object;
                        window.open(url, '_blank')
                        //$scope.openViewer("https://docs.google.com/gview?url=" + window.location.origin + '/' + rs.Object + '&embedded=true', isImage);
                    }
                    else
                        $scope.openViewer(rs.Object, isImage);
                    //window.open('https://docs.google.com/gview?url=' + window.location.origin + '/' + rs.Object + '&embedded=true', '_blank');
                }
                else {

                }
            });
        }
    }

    $scope.openViewer = function (url, isImage) {
        var data = {};
        data.url = url;
        data.isImage = isImage;
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/viewer.html',
            controller: 'viewer',
            backdrop: 'false',
            size: '60',
            resolve: {
                para: function () {
                    return data;
                }
            }
        });
    }

    $scope.extension = function (item) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderRepository + '/extension.html',
            controller: 'extension',
            backdrop: 'static',
            size: '55',
            resolve: {
                para: function () {
                    return {
                        Type: 'LIST',
                        Object: item
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    $scope.share = function (id) {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        //else if ($rootScope.isUpdate) {
        //    return App.toastrError("Vui lòng vào phiên để cập nhật");
        //}
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }

        var userModel = {};
        var listdata = $('#tblDataCustomerFile').DataTable().data();
        for (var i = 0; i < listdata.length; i++) {
            if (listdata[i].Id == id) {
                userModel = listdata[i];
                break;
            }
        }

        if (!$rootScope.isApprove && userModel.CreatedBy != userName) {
            return App.toastrError("Bạn không có quyền thực hiện chức năng này");
        }

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/shareFile.html',
            controller: 'shareFile',
            backdrop: 'static',
            size: '40',
            resolve: {
                para: function () {
                    return {
                        Id: id,
                        CardCode: $rootScope.CardCode
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    };

    $scope.fileManage = function () {
        if (!$rootScope.isAddedCard) {
            return App.toastrError("Vui lòng tạo thẻ việc trước");
        }
        else if ($rootScope.IsLock) {
            return App.toastrError("Thẻ việc đã khóa");
        }
        else if ($rootScope.isUpdate) {
            return App.toastrError("Vui lòng vào phiên");
        }
        else if (!$rootScope.isAceptCard) {
            return App.toastrError("Vui lòng đồng ý thực hiện thẻ việc");
        }
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/fileManage.html',
            controller: 'fileManage',
            backdrop: 'static',
            size: '50',
            resolve: {
                cardCode: function () {
                    return $rootScope.CardCode;
                }
            }
        });
        modalInstance.result.then(function (d) {
            $scope.reload();
        }, function () {
        });
    }

    $scope.updateCheckList = function () {
        if ($scope.model.CheckTitle == null || $scope.model.CheckTitle == "" || $scope.model.CheckTitle == undefined)
            return App.toastrError('Đầu mục việc không được để trống')

        if ($scope.isAceptCard) {
            if ($scope.model.WorkflowCode == null || $scope.model.WorkflowCode == "" || $scope.model.WorkflowCode == undefined) {
                var obj = {
                    CardCode: $rootScope.CardCode,
                    CheckTitle: $scope.model.CheckTitle,
                    WeightNum: para.WeightNum,
                    ChkListCode: $scope.model.ChkListCode,
                    Note: $scope.model.Note
                }
                dataserviceCardJob.updateCheckList(obj, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                    } else {
                        App.toastrSuccess(rs.Title);
                    }
                })
            }
            else {
                App.toastrError(caption.CJ_MSG_CARD_FLOW_NOT_UPDATE);
            }
        } else {
            App.toastrError(caption.CJ_MSG_PLS_ACCEPT);
        }
    }

    $scope.changeCoachingType = function (item) {
        $scope.errorCoachingType = false;
        dataserviceCardJob.getListCoachingId(item.Type, item.Id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                $scope.lstCoachingId = rs.Object;
            }
        });
    }

    $scope.changeCoachingId = function () {
        $scope.errorCoachingId = false;
    }

    $scope.addCoaching = function () {
        if (!validationSelect($scope.modelCoaching).Status) {
            dataserviceCardJob.insertCoaching($scope.modelCoaching, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                } else {
                    App.toastrSuccess(rs.Title);
                    $scope.initData();
                }
            });
        }
    }

    $scope.deleteCoaching = function (id) {
        dataserviceCardJob.deleteCoaching(id, function (rs) {
            rs = rs.data;
            if (rs.Error) {
                App.toastrError(rs.Title);
            } else {
                App.toastrSuccess(rs.Title);
                $scope.initData();
            }
        });
    }

    $scope.viewDetailCoaching = function (item) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderCardJob + '/view-detail-coaching.html',
            controller: 'viewDetailCoaching',
            backdrop: 'static',
            size: '60',
            resolve: {
                para: function () {
                    return item;
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    }

    function loadDate() {
        $("#FromTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#DateTo').datepicker('setStartDate', maxDate);
        });
        $("#DateTo").datepicker({
            inline: false,
            autoclose: true,
            format: "dd/mm/yyyy",
            fontAwesome: true,
        }).on('changeDate', function (selected) {
            var maxDate = new Date(selected.date.valueOf());
            $('#FromTo').datepicker('setEndDate', maxDate);
        });
        $('.end-date').click(function () {
            $('#FromTo').datepicker('setEndDate', null);
        });
        $('.start-date').click(function () {
            $('#DateTo').datepicker('setStartDate', null);
        });
    }

    $scope.modelShare = {
        Id: '',
        LstShare: ''
    };

    $scope.permission = {
        Read: true,
        Write: true,
        Delete: true
    };

    function validationSelect(data) {
        var mess = { Status: false, Title: "" };
        if (data.CoachType == "" || data.CoachType == null || data.CoachType == undefined) {
            $scope.errorCoachingType = true;
            mess.Status = true;
        } else {
            $scope.errorCoachingType = false;
        }
        if (data.CoachId !== null && data.CoachId !== undefined) {
            $scope.errorCoachingId = false;
        } else {
            mess.Status = true;
            $scope.errorCoachingId = true;
        }
        return mess;
    };

    function defaultShareFile(id) {
        dataserviceCardJob.getListUserShare($rootScope.CardCode, function (rs) {
            rs = rs.data;
            $scope.listUser = rs;
            $scope.lstUserShare = [];
            if ($scope.listUser.length > 0) {
                for (var i = 0; i < $scope.listUser.length; i++) {
                    var item = {
                        Code: $scope.listUser[i].Code,
                        Name: $scope.listUser[i].Name,
                        DepartmentName: $scope.listUser[i].DepartmentName,
                        Permission: $scope.permission
                    }
                    $scope.lstUserShare.push(item);
                }
                $scope.modelShare.Id = id;
                $scope.modelShare.LstShare = JSON.stringify($scope.lstUserShare);
                dataserviceCardJob.autoShareFilePermission($scope.modelShare, function (rs) { })
            }
        });
    }

    setTimeout(function () {
        loadDate();
    }, 200);
});

app.controller('viewDetailCoaching', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModalInstance, $filter, $translate, para) {
    $scope.cancel = function () {
        $uibModalInstance.close();
    }


    setTimeout(function () {
        $('#coachingViewItem').html($scope.model.Content);
        setModalDraggable('.modal-dialog');
    }, 200)
});

app.controller('board-detail', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModalInstance, $filter, $translate, para) {
    $scope.cancel = function () {
        $uibModalInstance.close();
    }
    $scope.model = para;
    // view help detail
    $scope.viewCmsDetail = function (helpId) {
        //item, bookMark
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: ctxfolderDashBoard + '/viewItem.html',
            controller: 'viewItemHelp',
            backdrop: 'static',
            windowClass: 'message-avoid-header',
            size: '65',
            resolve: {
                para: function () {
                    return {
                        helpId
                    };
                }
            }
        });
        modalInstance.result.then(function (d) {

        }, function () {
        });
    };

    setTimeout(function () {
        loadData();
    }, 200)
});

app.controller('add-card-object', function ($scope, $controller, $http, $rootScope, $compile, $uibModal, $uibModalInstance, dataserviceCardJob, $filter, para) {
    $controller('add-card-buffer', { $scope: $scope, $rootScope: $rootScope, $uibModalInstance: $uibModalInstance, para: para });
    $scope.initCardObject = function () {
        $scope.cardName = para.Name;
    }
    $scope.initCardObject();

    // add card buffer
    $scope.saveBuffer = function () {
        $scope.model.CardName = $scope.cardName;
        $scope.acticeDetailDrag = false;

        var check = CKEDITOR.instances['description'];
        if (check !== undefined) {
            var data = CKEDITOR.instances['description'].getData();
            $scope.model.Description = data;
        }

        validationSelect($scope.model);
        if ($scope.addform.validate() && !validationSelect($scope.model).Status) {
            if ($scope.model.CardName.trim() == "" && $scope.model.ListCode == "") {
                return App.toastrError("Vui lòng nhập tên thẻ việc và chọn danh mục công việc");
            }
            else if ($scope.model.CardName.trim() == "") {
                return App.toastrError("Vui lòng nhập tên thẻ việc");
            }
            else if ($scope.model.ListCode == "") {
                return App.toastrError("Vui lòng chọn danh mục công việc");
            }

            App.blockUI({
                target: "#modal-body",
                boxed: true,
                message: 'loading...'
            });

            if (!$rootScope.isAddedCard) {
                dataserviceCardJob.insertCardNew($scope.model, function (rs) {
                    rs = rs.data;
                    if (rs.Error) {
                        App.toastrError(rs.Title);
                        App.unblockUI("#modal-body");
                    }
                    else {
                        $rootScope.isAddedCard = true;
                        $rootScope.CardCode = rs.Object;
                        $scope.cardCode = rs.Object;
                        App.toastrSuccess(rs.Title)

                        //Copy data using to rollback
                        dataserviceCardJob.getCardDetail($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            if (!rs.Error) {
                                $scope.model = rs.Object.CardDetail;
                                $scope.cardCode = $scope.model.CardCode;
                                $scope.cardName = $scope.model.CardName;
                                $rootScope.Inherit = $scope.model.Inherit;
                                $scope.obj.Board = rs.Object.Board;
                                $rootScope.isShowPercentItem = rs.Object.BoardFullData.BoardType == "BOARD_REGULARLY" ? false : true;
                                $rootScope.IsLock = $scope.model.IsLock;
                                dataserviceCardJob.getLists($scope.obj.Board, function (rs) {
                                    rs = rs.data;
                                    $scope.Lists = rs;
                                });
                                $scope.obj.List = rs.Object.List;
                                $scope.CompletedOld = $scope.model.Completed;
                                if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {
                                    if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                                        $scope.isAssign = false;
                                    } else {
                                        $scope.isAssign = true;
                                    }
                                }
                                $rootScope.settingNotification = rs.Object.Notification;
                                $scope.currentUser = rs.Object.CurrenUser;
                                $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                                $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                                $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                                $scope.completeBoard = rs.Object.BoardCompleted;
                                $scope.completeList = rs.Object.ListCompleted;
                                //Copy data using to rollback
                                $scope.rollBack.CardHeader = angular.copy($scope.model);
                                //End copy data using to rollback

                                setTimeout(function () {
                                    validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                }, 100);
                            }
                        });

                        //End copy data using to rollback

                        dataserviceCardJob.updateActivity(rs.Object, 2, true, function (rs) {
                            rs = rs.data;
                            dataserviceCardJob.getCardDetail($scope.cardCode, function (rs) {
                                rs = rs.data;
                                if (!rs.Error) {
                                    $scope.model = rs.Object.CardDetail;

                                    $scope.descriptionOld = angular.copy($scope.model.Description);

                                    if ($scope.model.Status == "CLOSED") {
                                        $scope.isClose = true;
                                    } else {
                                        $scope.isClose = false;
                                    }
                                    $scope.CompletedOld = $scope.model.Completed;
                                    if ($scope.model.LstUser != null && $scope.model.LstUser != "" && $scope.model.LstUser != undefined) {

                                        if ($scope.model.LstUser.includes(userId) || rs.Object.Session) {
                                            $scope.isAssign = false;
                                        } else {
                                            $scope.isAssign = true;
                                        }
                                    }
                                    $rootScope.settingNotification = rs.Object.Notification;
                                    $scope.currentUser = rs.Object.CurrenUser;
                                    $scope.model.BeginTime = $scope.model.BeginTime != '' ? $filter('date')($scope.model.BeginTime, 'dd/MM/yyyy') : '';
                                    $scope.model.Deadline = $scope.model.Deadline != '' ? $filter('date')($scope.model.Deadline, 'dd/MM/yyyy') : '';
                                    $scope.model.EndTime = $scope.model.EndTime != null ? $filter('date')($scope.model.EndTime, 'dd/MM/yyyy') : "";
                                    $scope.completeBoard = rs.Object.BoardCompleted;
                                    $scope.completeList = rs.Object.ListCompleted;
                                    dataserviceCardJob.roleInCardOfUser($scope.cardCode, function (rs) {
                                        rs = rs.data;
                                        $scope.RoleUser = rs.Responsibility;

                                        if ($scope.RoleUser == "ROLE_LEADER") {
                                            $scope.isNotLeader = false;
                                        }
                                        if ($scope.isNotLeader && $scope.isClose) {
                                            $scope.isDisableStatus = true;
                                            $scope.isDisableControl = true;
                                        } else if (!$scope.isNotLeader && $scope.isClose) {
                                            $scope.isDisableStatus = false;
                                            $scope.isDisableControl = true;
                                        } else {
                                            $scope.isDisableStatus = false;
                                            $scope.isDisableControl = false;
                                        }
                                    })
                                    setTimeout(function () {
                                        validateDefaultDate($scope.model.BeginTime, $scope.model.EndTime, $scope.model.Deadline)
                                    }, 100);
                                }
                            });
                        });
                        dataserviceCardJob.getComment($rootScope.CardCode, function (rs) {
                            rs = rs.data;
                            $rootScope.comments = rs;
                        });
                        $rootScope.getLogActivity();
                        dataserviceCardJob.insertCardSuggestion($rootScope.CardCode, function (rs) {
                            dataserviceCardJob.getObjectRelative($rootScope.CardCode, function (rs) {
                                rs = rs.data;
                                $rootScope.listID = [];
                                $rootScope.listObjRelative = rs;
                                for (var i = 0; i < $rootScope.listObjRelative.length; i++) {
                                    $rootScope.listID.push($scope.listObjRelative[i].ID);
                                }
                                $scope.rollbackObject = angular.copy($rootScope.listID);
                            });
                        });
                        //$rootScope.reloadFile();
                        $rootScope.listCardJobLink = [];
                        //clearInterval($scope.interval);
                        //$scope.interval = setInterval(sessionCard, 60000);
                        App.unblockUI("#modal-body");
                        $scope.changeActInst();
                    }
                })
            }
        }
    };

    // list Select
    $scope.listSelect = function (listCode) {
        $scope.addcard = {};
        $scope.addcard.ListCode = listCode;
        $scope.addcard.TabBoard = para.TabBoard;
        $scope.addcard.CardName = para.Name;
        $scope.addcard.ListCodeRelative = [{ Code: para.Code }];
        if ($scope.isCreatedCard == false) {
            dataserviceCardJob.insertCard($scope.addcard, function (rs) {
                rs = rs.data;
                if (rs.Error) {
                    App.toastrError(rs.Title);
                }
                else {
                    App.toastrSuccess(rs.Title);
                    $scope.isCreatedCard = true;
                    $scope.obj.CardCode = rs.Object.CardCode;
                    $rootScope.CardCode = rs.Object.CardCode;
                    dataserviceCardJob.updateActivity($scope.obj.CardCode, 2, true, function (rs) {
                        rs = rs.data;
                        if (rs.Error) {
                        }
                        else {
                            $scope.isAceptCard = true;
                            setTimeout(function () {
                                $scope.disableCkEditer(editor);
                            }, 1000);
                        }
                    });
                    $scope.initAfterCreateCard();
                    if ($rootScope.reloadCardJob) {
                        $rootScope.reloadCardJob();
                    }
                }
            });
        }
    };

    function validationSelect(data) {
        var mess = { Status: false, Title: "" }
        if (data.Status == "") {
            $scope.errorStatus = true;
            mess.Status = true;
        } else {
            $scope.errorStatus = false;
        }

        if (data.WfType == "") {
            $scope.errorWfType = true;
            mess.Status = true;
        } else {
            $scope.errorWfType = false;
        }

        return mess;
    };

    function validateDefaultDate(startDate, endDate, deadline) {
        setStartDate("#endDate", startDate);
        setStartDate("#deadline", startDate);
        //setEndDate
        const [dayDead, monthDead, yearDeal] = deadline.split("/")
        var deadTime = new Date(yearDeal, monthDead - 1, dayDead)
        if (endDate != "") {
            const [day, month, year] = endDate.split("/")
            var endTime = new Date(year, month - 1, day)
            if (endTime > deadTime) {
                setEndDate("#startDate", deadline)
            }
            else {
                setEndDate("#startDate", endDate)
            }
        }
        else {
            setEndDate("#startDate", deadline)
        }
    }

    function sessionCard() {
        //dataserviceCardJob.isUpdateNewData($rootScope.CardCode, function (rs) {
        //    rs = rs.data;
        //    if (rs) {
        //        loadNewData();
        //    }
        //})
    }
});

app.controller('viewItemCardJob', function ($scope, $rootScope, $compile, $uibModal, DTOptionsBuilder, DTColumnBuilder, DTInstances, $uibModalInstance, $filter, $translate, dataserviceCardJob, Fullscreen, para, $location, $anchorScroll) {
    $scope.cancel = function () {
        $uibModalInstance.close();
    }

    $scope.model = {};
    console.log(para);
    if (para.data) {
        var id = para.data;
        dataserviceCardJob.getContentCms(id, function (rs) {
            rs = rs.data;
            $scope.model.Title = rs.Title;
            $('#cmsViewItem').html(rs.Content);
            $compile(angular.element("#cmsViewItem"))($scope);

            if (para.bookMark) {
                //$location.hash(para.bookMark);

                // call $anchorScroll()
                //$anchorScroll();
                var idTarget = `#${para.bookMark}`;
                $('#cmsViewItem').animate({
                    scrollTop: $(idTarget).offset().top
                }, 2000);
            }
        })
    }
    $scope.isFullScreen = false;
    $scope.goFullscreen = function () {
        $scope.isFullScreen = !$scope.isFullScreen;
    }

    setTimeout(function () {
        setModalDraggable('.modal-dialog');
    }, 200)
});