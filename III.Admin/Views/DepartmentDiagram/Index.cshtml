@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<html>
<head>
    @*<script src="//ej2.syncfusion.com/javascript/demos/diagram/overview/datasource.js" type="text/javascript"></script>*@
    <script src="https://cdn.syncfusion.com/ej2/20.4.42/dist/ej2.min.js"></script>
    <script>
        ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhkQlFadVdJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxQdkRiW31fdHVRT2NfVEU=');
    </script>
    <link href="https://cdn.syncfusion.com/ej2/20.3.47/material.css" rel="stylesheet">

    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            touch-action: none;
        }
    </style>
</head>
<body>
    <div class="bootstrap5">
        <div>
            <div id="toolbar" style="width: 100%"></div>
        </div>
        <div class="col-lg-8 control-section">
            <style>
                .image-pattern-style {
                    background-color: white;
                    background-size: contain;
                    background-repeat: no-repeat;
                    height: 75px;
                    width: calc((100% - 18px) / 3);
                    cursor: pointer;
                    border: 1px solid #D5D5D5;
                    background-position: center;
                    float: left;
                }

                    .image-pattern-style:hover {
                        border-color: gray;
                        border-width: 2px;
                    }

                .row {
                    margin-left: 0px;
                    margin-right: 0px;
                }

                .row-header {
                    font-size: 13px;
                    font-weight: 500;
                }

                .row-header1 {
                    font-size: 12px;
                    padding-left: 2px;
                    font-weight: 400;
                }

                .property-panel-header {
                    padding-top: 2px;
                    padding-bottom: 5px;
                }

                .e-selected-orientation-style {
                    border-color: #006CE6;
                    border-width: 2px;
                }

                .e-selected-pattern-style {
                    border-color: #006CE6;
                    border-width: 2px;
                }

                .e-checkbox-wrapper .e-label {
                    font-size: 12px;
                }

                .col-xs-6 {
                    padding-left: 0px;
                    padding-right: 0px;
                }
            </style>
            <div class="content-wrapper" style="width: 100%">
                <div id="diagram"></div>
            </div>
        </div>
        <div class="col-lg-4 property-section">
            <div class="property-panel-header">
                Thuộc tính
            </div>
            <div class="row property-panel-content" id="appearance">
                <div class="row" style="padding-top: 10px">
                    <div class="row row-header">
                        Kiểu sơ đồ
                    </div>
                    <div id="orientation">
                        <div class="row" style="padding-top: 8px">
                            <div class="image-pattern-style e-selected-orientation-style" id="organizational_chart" style="background-image: url(/images/icons/Organizational_chart.png); margin-right: 3px">
                            </div>
                            <div class="image-pattern-style" id="radial_chart" style="background-image: url(/images/icons/Radial_chart.png); margin: 0px 3px">
                            </div>
                        </div>
                    </div>
                    @*<div class="row row-header" style="padding-top: 10px">
                    Subtree Alignment
                    </div>*@
                    @*<div id="pattern">
                    <div class="row" style="padding-top: 8px">
                    <div class="image-pattern-style" id="pattern1" style="background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/patternimages/Pattern_1.png); margin-right: 3px">
                    </div>
                    <div class="image-pattern-style" id="pattern2" style="background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/patternimages/Pattern_2.png); margin: 0px 3px">
                    </div>
                    <div class="image-pattern-style  e-selected-pattern-style" id="pattern5" style="background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/patternimages/Pattern_5.png); margin: 0px 3px">
                    </div>
                    </div>
                    <div class="row" style="padding-top: 8px">
                    <div class="image-pattern-style" id="pattern6" style="background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/patternimages/Pattern_6.png); margin: 0px 3px">
                    </div>
                    <div class="image-pattern-style" id="pattern7" style="background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/patternimages/Pattern_7.png);  margin: 0px 3px">
                    </div>
                    <div class="image-pattern-style" id="pattern8" style="background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/patternimages/Pattern_8.png); margin: 0px 3px">
                    </div>
                    </div>
                    <div class="row" style="padding-top: 8px">

                    <div class="image-pattern-style" id="pattern9" style="background-image: url(//ej2.syncfusion.com/javascript/demos/src/diagram/patternimages/Pattern_9.png); margin: 0px 3px">
                    </div>
                    </div>
                    </div>*@
                </div>
            </div>
            @*<div class="row property-panel-content" style="padding-top: 10px">
            <div class="row row-header">
            Behavior
            </div>
            <div class="row" style="padding-top: 8px">
            <div style="display: table;height: 35px;" class="col-xs-6">
            <div style="display: table-cell; vertical-align: middle">Horizontal Spacing</div>
            </div>
            <div class="col-xs-6">
            <input type="text" id="hSpacing" style="width: 100%" min="20" max="60" step="2" value="30">
            </div>
            </div>
            <div class="row" style="padding-top: 8px">
            <div style="display: table;height: 35px;" class="col-xs-6">
            <div style="display: table-cell; vertical-align: middle">Vertical Spacing</div>
            </div>
            <div class="col-xs-6">
            <input type="text" id="vSpacing" style="width: 100%" min="20" max="60" step="2" value="30">
            </div>
            </div>
            </div>*@
        </div>

    </div>
    <script>
        /**
        * organization-model
        */
        ej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.MindMap, ej.diagrams.HierarchicalTree, ej.diagrams.LayoutAnimation);

        var dataApi;
        var dataLayout;
        var diagram;
        var chartIdSelected = 'organizational_chart';
        async function getApi(reset = false) {
            var requestOptions = {
                method: 'GET',
                redirect: 'follow'
            };

            var response = await fetch("/DepartmentDiagram/GetListDepartment", requestOptions);
            dataApi = await response.json();
            console.log(dataApi);

            if (!reset) {
                var fileName = chartIdSelected === 'organizational_chart' ? '/uploads/files/diagram/Biểu đồ công ty.json' : '/uploads/files/diagram/Biểu đồ công ty Vũ trụ.json';
                var fileUrl = window.location.protocol + "//" + window.location.host + fileName;
                var response = await fetch(`/DepartmentDiagram/GetFileDiagram?url=${fileUrl}`, requestOptions);
                dataLayout = await response.text();
                if (dataLayout) {
                    try {
                        var json = JSON.parse(dataLayout);
                        console.log(json);
                        json.nodes.forEach(x => {
                            var indexData = dataApi.findIndex(y => y.Id == x.data.Id);
                            console.log(indexData);
                            x.data = dataApi[indexData];
                        });
                        var height = window.outerHeight - 112;
                        json.height = height + 'px';
                        json.rulerSettings = {
                            horizontalRuler: {
                                "orientation": "Horizontal",
                                "arrangeTick": null
                            },
                            showRulers: false,
                            verticalRuler: {
                                "orientation": "Vertical",
                                "arrangeTick": null
                            }
                        };
                        dataLayout = JSON.stringify(json);
                    } catch (error) {
                        console.log(error);
                        // Expected output: ReferenceError: nonExistentFunction is not defined
                        // (Note: the exact output may be browser-dependent)
                        dataLayout = null;
                    }
                }
            }
            else {
                dataLayout = null;
            }
            if (chartIdSelected === 'organizational_chart') {
                configChart();
            }
            else {
                configChartRadial();
            }
        }
        getApi();
        function changeChart(chartId) {
            if (chartId != chartIdSelected) {
                chartIdSelected = chartId;
                var diagramElement = document.getElementById('diagram');
                var diagram = diagramElement.ej2_instances[0];
                diagram.destroy();
                getApi();
            }
        }

        function configChart(reset = false) {
            //sets default value for Node.
            function getNodeDefaults(obj) {
                obj.backgroundColor = obj.data?.Color ?? '';
                obj.style = { fill: 'none', strokeColor: 'none', color: 'white' };
                obj.expandIcon = { height: 10, width: 10, shape: 'None', fill: 'lightgray', offset: { x: 0.5, y: 1 } };
                obj.expandIcon.verticalAlignment = 'Center';
                obj.expandIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
                obj.collapseIcon.offset = { x: 0.5, y: 1 };
                obj.collapseIcon.verticalAlignment = 'Center';
                obj.collapseIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
                obj.collapseIcon.height = 10;
                obj.collapseIcon.width = 10;
                obj.collapseIcon.shape = 'None';
                obj.collapseIcon.fill = 'lightgray';
                obj.width = 120;
                obj.height = 30;
                //obj.constraints = ej.diagrams.NodeConstraints.Select | ej.diagrams.NodeConstraints.Drag;
                return obj;
            }
            //sets default value for Connector.
            function getConnectorDefaults(connector) {
                connector.targetDecorator.shape = 'None';
                connector.type = 'Orthogonal';
                connector.constraints = 0;
                connector.cornerRadius = 0;
                return connector;
            }
            var handles = [
                {
                    name: 'clone', pathData: 'M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,' +
                        '0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z ' +
                        'M68.5,72.5h-30V34.4h30V72.5z',
                    visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
                }
            ];


            //set the position of the userhandle.
            function setuserhandleposition(offset, side, target) {
                diagram.selectedItems.userHandles[0].offset = offset;
                diagram.selectedItems.userHandles[0].side = side;

            }
            //set the style of the userhandle.
            function applyuserhandlestyle(bgcolor, target) {
                diagram.selectedItems.userHandles[0].backgroundColor = bgcolor;
                diagram.selectedItems.userHandles[0].pathColor = 'White';

            }

            //Initializes the nodes for the diagram
            var height = window.outerHeight - 112;
            diagram = new ej.diagrams.Diagram({
                width: '100%', height: height + 'px',
                //configures data source settings
                dataSourceSettings: {
                    id: 'Code', parentId: 'Parent',
                    dataSource: new ej.data.DataManager(dataApi),
                    doBinding: function (nodeModel, data, diagram) {
                        nodeModel.shape = {
                            type: 'Text', content: data.Title,
                            margin: { left: 10, right: 10, top: 10, bottom: 10 }
                        };
                        nodeModel.annotations = [
                            {
                                content: `Tổng số thẻ việc: ${data.CardSumCount}`,
                                style: { fontSize: 10, color: 'blue' },
                                offset: {
                                    x: 1.1, y: 0.1
                                },
                                verticalAlignment: 'Top',
                                horizontalAlignment: 'Left',
                            },
                            {
                                content: `Số thẻ đã hoàn thành: ${data.CardSuccessCount}`,
                                style: { fontSize: 10, color: 'green' },
                                offset: {
                                    x: 1.1, y: 0.4
                                },
                                verticalAlignment: 'Top',
                                horizontalAlignment: 'Left',
                            },
                            {
                                content: `Số thẻ đang làm: ${data.CardPendingCount}`,
                                style: { fontSize: 10, color: 'orange' },
                                offset: {
                                    x: 1.1, y: 0.7
                                },
                                verticalAlignment: 'Top',
                                horizontalAlignment: 'Left',
                            },
                        ];
                    }
                },
                //Disables all interactions except zoom/pan
                //tool: ej.diagrams.DiagramTools.ZoomPan,
                //Configures automatic layout
                layout: {
                    type: 'OrganizationalChart',
                    getLayoutInfo: function (node, options) {
                        //if (node.data.Role === 'General Manager') {
                        //    options.assistants.push(options.children[0]);
                        //    options.children.splice(0, 1);
                        //}
                        if (!options.hasSubTree) {
                            options.type = 'Right';
                        }
                    }
                },
                selectedItems: { constraints: ej.diagrams.SelectorConstraints.UserHandle/*, userHandles: handles*/ },
                snapSettings: { constraints: ej.diagrams.SnapConstraints.None },
                //Defines the default node and connector properties
                getNodeDefaults: function (obj, diagram) {
                    return getNodeDefaults(obj, diagram);
                }, getConnectorDefaults: function (connector, diagram) {
                    return getConnectorDefaults(connector, diagram);
                }
            });
            diagram.appendTo('#diagram');
            diagram.fitToPage();
            diagram.select([diagram.nodes[0]]);
            //NumericTextBox used to increase/decrease horizontalSpacing of the layout.
            var hSpace = new ej.inputs.NumericTextBox({
                format: '###.##',
                change: function () {
                    diagram.layout.horizontalSpacing = Number(hSpacing.value);
                    diagram.dataBind();
                }
            });
            //NumericTextBox used to increase/decrease verticalSpacing of the layout.
            hSpace.appendTo('#hSpacing');
            var vSpace = new ej.inputs.NumericTextBox({
                format: '###.##',
                change: function () {
                    diagram.layout.verticalSpacing = Number(vSpacing.value);
                    diagram.dataBind();
                }
            });
            vSpace.appendTo('#vSpacing');
            //Enable of disable the expandable option for Node.
            var checkBoxObj = new ej.buttons.CheckBox({
                label: 'Expandable',
                checked: false, change: function () {
                    for (var _i = 0, _a = diagram.nodes; _i < _a.length; _i++) {
                        var node_1 = _a[_i];
                        if (checkBoxObj.checked) {
                            node_1.expandIcon.shape = 'Minus';
                            node_1.collapseIcon.shape = 'Plus';
                        }
                        else {
                            node_1.expandIcon.shape = 'None';
                            node_1.collapseIcon.shape = 'None';
                        }
                    }
                    diagram.dataBind();
                    diagram.doLayout();
                }
            });
            checkBoxObj.appendTo('#checked');


            if (dataLayout) {
                diagram.loadDiagram(dataLayout);
                diagram.fitToPage();
            }
        }

        function configChartRadial(reset = false) {
            //sets default value for Node.
            function getNodeDefaults(obj) {
                obj.backgroundColor = obj.data.Color;
                obj.style = { fill: 'none', strokeColor: 'none', color: 'white' };
                obj.expandIcon = { height: 10, width: 10, shape: 'None', fill: 'lightgray', offset: { x: 0.5, y: 1 } };
                obj.expandIcon.verticalAlignment = 'Center';
                obj.expandIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
                obj.collapseIcon.offset = { x: 0.5, y: 1 };
                obj.collapseIcon.verticalAlignment = 'Center';
                obj.collapseIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
                obj.collapseIcon.height = 10;
                obj.collapseIcon.width = 10;
                obj.collapseIcon.shape = 'None';
                obj.collapseIcon.fill = 'lightgray';
                obj.width = 120;
                obj.height = 30;
                //obj.constraints = ej.diagrams.NodeConstraints.Select | ej.diagrams.NodeConstraints.Drag;
                return obj;
            }
            //sets default value for Connector.
            function getConnectorDefaults(connector) {
                connector.targetDecorator.shape = 'None';
                connector.type = 'Orthogonal';
                connector.constraints = 0;
                connector.cornerRadius = 0;
                return connector;
            }
            var handles = [
                {
                    name: 'clone', pathData: 'M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,' +
                        '0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z ' +
                        'M68.5,72.5h-30V34.4h30V72.5z',
                    visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
                }
            ];


            //set the position of the userhandle.
            function setuserhandleposition(offset, side, target) {
                diagram.selectedItems.userHandles[0].offset = offset;
                diagram.selectedItems.userHandles[0].side = side;

            }
            //set the style of the userhandle.
            function applyuserhandlestyle(bgcolor, target) {
                diagram.selectedItems.userHandles[0].backgroundColor = bgcolor;
                diagram.selectedItems.userHandles[0].pathColor = 'White';

            }

            //Initializes the nodes for the diagram
            var height = window.outerHeight - 112;
            diagram = new ej.diagrams.Diagram({
                width: '100%', height: height + 'px',
                //configures data source settings
                dataSourceSettings: {
                    id: 'Code', parentId: 'Parent',
                    dataSource: new ej.data.DataManager(dataApi),
                    doBinding: function (nodeModel, data, diagram) {
                        nodeModel.shape = {
                            type: 'Text', content: data.Title,
                            margin: { left: 10, right: 10, top: 10, bottom: 10 }
                        };
                        nodeModel.annotations = [
                            {
                                content: `Tổng số thẻ việc: ${data.CardSumCount}`,
                                style: { fontSize: 10, color: 'blue' },
                                offset: {
                                    x: 1.1, y: 0.1
                                },
                                verticalAlignment: 'Top',
                                horizontalAlignment: 'Left',
                            },
                            {
                                content: `Số thẻ đã hoàn thành: ${data.CardSuccessCount}`,
                                style: { fontSize: 10, color: 'green' },
                                offset: {
                                    x: 1.1, y: 0.4
                                },
                                verticalAlignment: 'Top',
                                horizontalAlignment: 'Left',
                            },
                            {
                                content: `Số thẻ đang làm: ${data.CardPendingCount}`,
                                style: { fontSize: 10, color: 'orange' },
                                offset: {
                                    x: 1.1, y: 0.7
                                },
                                verticalAlignment: 'Top',
                                horizontalAlignment: 'Left',
                            },
                        ];
                    }
                },
                //Disables all interactions except zoom/pan
                //tool: ej.diagrams.DiagramTools.ZoomPan,
                //Configures automatic layout
                layout: {
                    type: 'RadialTree', verticalSpacing: 30, horizontalSpacing: 20,
                    root: 'Category',
                    //getLayoutInfo: function (node, options) {
                    //    //if (node.data.Role === 'General Manager') {
                    //    //    options.assistants.push(options.children[0]);
                    //    //    options.children.splice(0, 1);
                    //    //}
                    //    if (!options.hasSubTree) {
                    //        options.type = 'Right';
                    //    }
                    //}
                },
                selectedItems: { constraints: ej.diagrams.SelectorConstraints.UserHandle/*, userHandles: handles*/ },
                snapSettings: { constraints: ej.diagrams.SnapConstraints.None },
                //Defines the default node and connector properties
                getNodeDefaults: function (obj, diagram) {
                    return getNodeDefaults(obj, diagram);
                }, getConnectorDefaults: function (connector, diagram) {
                    return getConnectorDefaults(connector, diagram);
                }
            });
            diagram.appendTo('#diagram');
            diagram.fitToPage();
            diagram.select([diagram.nodes[0]]);
            //NumericTextBox used to increase/decrease horizontalSpacing of the layout.
            var hSpace = new ej.inputs.NumericTextBox({
                format: '###.##',
                change: function () {
                    diagram.layout.horizontalSpacing = Number(hSpacing.value);
                    diagram.dataBind();
                }
            });
            //NumericTextBox used to increase/decrease verticalSpacing of the layout.
            hSpace.appendTo('#hSpacing');
            var vSpace = new ej.inputs.NumericTextBox({
                format: '###.##',
                change: function () {
                    diagram.layout.verticalSpacing = Number(vSpacing.value);
                    diagram.dataBind();
                }
            });
            vSpace.appendTo('#vSpacing');
            //Enable of disable the expandable option for Node.
            var checkBoxObj = new ej.buttons.CheckBox({
                label: 'Expandable',
                checked: false, change: function () {
                    for (var _i = 0, _a = diagram.nodes; _i < _a.length; _i++) {
                        var node_1 = _a[_i];
                        if (checkBoxObj.checked) {
                            node_1.expandIcon.shape = 'Minus';
                            node_1.collapseIcon.shape = 'Plus';
                        }
                        else {
                            node_1.expandIcon.shape = 'None';
                            node_1.collapseIcon.shape = 'None';
                        }
                    }
                    diagram.dataBind();
                    diagram.doLayout();
                }
            });
            checkBoxObj.appendTo('#checked');


            if (dataLayout) {
                diagram.loadDiagram(dataLayout);
                diagram.fitToPage();
            }
        }

        //based on the option, Click event to perform ZoomIn,ZoomOut and Reset.
        function onItemClick(args) {
            var diagram = document.getElementById('diagram').ej2_instances[0];
            switch (args.item.text) {
                case 'Reset':
                    //var zoomin = { type: 'ZoomIn', zoomFactor: 0.2 };
                    //diagram.zoomTo(zoomin);
                    console.log('reset');
                    var diagramElement = document.getElementById('diagram');
                    var diagram = diagramElement.ej2_instances[0];
                    diagram.destroy();
                    getApi(true);
                    break;
                case 'Save':
                    //var zoomout = { type: 'ZoomOut', zoomFactor: 0.2 };
                    //diagram.zoomTo(zoomout);
                    console.log('save');
                    var diagramElement = document.getElementById('diagram');
                    var diagram = diagramElement.ej2_instances[0];
                    var saveData;
                    //returns serialized string of the Diagram
                    saveData = diagram.saveDiagram();
                    console.log(saveData);
                    const blob = new Blob([saveData], { type: 'text/plain' });
                    var formdata = new FormData();
                    var fileName = chartIdSelected === 'organizational_chart' ? '/uploads/files/diagram/Biểu đồ công ty.json' : '/uploads/files/diagram/Biểu đồ công ty Vũ trụ.json';
                    var apiName = chartIdSelected === 'organizational_chart' ? '/DepartmentDiagram/UploadFileDiagram' : '/DepartmentDiagram/UploadFileDiagramRadial';
                    formdata.append("file", blob, fileName);

                    var requestOptions = {
                        method: 'POST',
                        body: formdata,
                        redirect: 'follow'
                    };

                    fetch(apiName, requestOptions)
                        .then(response => response.text())
                        .then(result => console.log(result))
                        .catch(error => console.log('error', error));
                    break;
            }
        }
        //create and add ZoomIn,ZoomOut and Reset options in ToolBar.
        var toolbarObj = new ej.navigations.Toolbar({
            clicked: onItemClick,
            items: [
                { type: 'Button', tooltipText: 'Save', text: 'Save', prefixIcon: 'e-ddb-icons e-save' }, { type: 'Separator' },
                { type: 'Button', tooltipText: 'Reset', text: 'Reset', prefixIcon: 'e-ddb-icons e-reset' }, { type: 'Separator' },
            ]
        });

        toolbarObj.appendTo('#toolbar');
        //Change the postion of the UserHandle
        document.getElementById('appearance').onclick = function (args) {
            var target = args.target;
            var appearanceBlock = document.getElementById('appearance');
            // custom code start
            let selectedElement = document.getElementsByClassName('e-selected-orientation-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('e-selected-orientation-style');
            }
            // custom code end

            if (target.className === 'image-pattern-style') {
                changeChart(target.id);
            }
            // custom code start
            target.classList.add('e-selected-orientation-style');
            // custom code end
        }

    </script>
</body>
</html>
