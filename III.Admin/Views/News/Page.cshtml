@model III.Admin.Controllers.ModelViewPost
@{
    ViewData["Title"] = @Model.title;
    Layout = "~/Views/Shared/_LayoutPage.cshtml"; ;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor.js Example</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@editorjs/editorjs@latest/dist/editorjs.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>

<body>
    <style>
        .edit-box {
            width: 50%;
            height: 100%;
            border: 1px solid #ccc;
        }

        ol,
        ul {
            margin: 0;
            padding: 0;
        }

        li {
            margin-bottom: 2px;
            margin-left: 20px;
        }

        blockquote {
            background-color: #f9f9f9;
            border-left: 10px solid #ccc;
            margin: 1.5em 10px;
            padding: 0.5em 10px;
        }

        footer {
            margin-top: 0.5em;
            text-align: right;
            font-style: italic;
        }

        .warning {
            border: 2px solid #f00;
            background-color: #ffe6e6;
            padding: 10px;
            margin-bottom: 20px;
        }

            .warning strong {
                color: #f00;
            }

        ul.checklist {
            list-style-type: none;
            padding-left: 0;
        }

            ul.checklist li {
                margin-bottom: 5px;
            }

                ul.checklist li.checked {
                    text-decoration: line-through;
                }

        .tit-page {
            text-align: center;
        }

        .save-btn {
            transform: translateX(670%);
            margin-top: 10px;
        }

        .ce-toolbar__settings-btn, .ce-toolbar__plus, .tc-add-column, .tc-add-row, .tc-toolbox {
            display: none
        }
    </style>
    <div id="editorjs"></div>
    <div id="editorjs-content"></div>

    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/editorjs@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/paragraph@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/list@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/header@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/image@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/embed@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/quote@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/delimiter@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/warning@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/code@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/checklist@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/table@latest"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked"></script>
    <script src="https://cdn.jsdelivr.net/npm/editorjs-text-color-plugin@2.0.4/dist/bundle.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@calumk/editorjs-nested-checklist@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/editorjs-header-with-alignment@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/editorjs-paragraph-with-alignment@latest"></script>
    <script src="~/js/editorjs/tool.js"></script>
    <script>
        var outputData = @Json.Serialize(Model.full_text.ToString());
        displayHTML(outputData);
        
        function displayHTML(editorData) {
            const editorContent = document.getElementById('editorjs-content');
            var model=JSON.parse(editorData)
            console.log(model)
            convertToHTML(model, editorContent);
        }

        function convertToHTML(editorData, container) {
            if (editorData && editorData.blocks && Array.isArray(editorData.blocks)) {
                editorData.blocks.forEach(block => {
                    const blockElement = document.createElement('div');
                    blockElement.classList.add('ce-block'); // Thêm class CSS của Editor.js cho block

                    // Xử lý từng loại block
                    switch (block.type) {
                        case 'paragraph':
                            blockElement.textContent = block.data.text;
                            blockElement.classList.add('ce-paragraph'); // Thêm class cho đoạn văn bản
                            break;
                        case 'header':
                            const headerElement = document.createElement('h' + block.data.level);
                            headerElement.textContent = block.data.text;
                            blockElement.appendChild(headerElement);
                            blockElement.classList.add('ce-header'); // Thêm class cho header
                            break;
                        case 'table':
                            const tableElement = document.createElement('table');
                            block.data.content.forEach(rowData => {
                                const rowElement = document.createElement('tr');
                                rowData.forEach(cellData => {
                                    const cellElement = document.createElement('td');
                                    cellElement.textContent = cellData;
                                    rowElement.appendChild(cellElement);
                                });
                                tableElement.appendChild(rowElement);
                            });
                            blockElement.appendChild(tableElement);
                            blockElement.classList.add('ce-table'); // Thêm class cho table
                            break;
                        case 'image':
                            const imageElement = document.createElement('img');
                            imageElement.src = block.data.file.url; // Assume image URL is in the "url" field
                            imageElement.alt = block.data.caption; // Assume caption is in the "caption" field
                            blockElement.appendChild(imageElement);
                            blockElement.classList.add('ce-image'); // Thêm class cho image
                            break;
                        // Thêm xử lý cho các loại block khác nếu cần
                    }

                    container.appendChild(blockElement);
                });
            } else {
                console.error("Invalid editor data format");
            }
        }
    </script>



</body>

</html>