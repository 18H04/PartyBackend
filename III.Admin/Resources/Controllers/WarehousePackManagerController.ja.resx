<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WPM_GROUP_PACK" xml:space="preserve">
    <value>梱包グループ</value>
  </data>
  <data name="WPM_ADD" xml:space="preserve">
    <value>新しく追加する</value>
  </data>
  <data name="WPM_ADD_ATTR" xml:space="preserve">
    <value>プロパティを追加します</value>
  </data>
  <data name="WPM_ATTR" xml:space="preserve">
    <value>プロパティ</value>
  </data>
  <data name="WPM_CANCEL" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="WPM_CODE_ATTR" xml:space="preserve">
    <value>プロパティコード</value>
  </data>
  <data name="WPM_CODE_NAME_SPEC" xml:space="preserve">
    <value>コードと特定の名前</value>
  </data>
  <data name="WPM_CODE_OBJ" xml:space="preserve">
    <value>オブジェクトコード</value>
  </data>
  <data name="WPM_DIAGRAM" xml:space="preserve">
    <value>ダイアグラム</value>
  </data>
  <data name="WPM_EDIT_PACK" xml:space="preserve">
    <value>パッケージを編集します</value>
  </data>
  <data name="WPM_FILE" xml:space="preserve">
    <value>ファイル</value>
  </data>
  <data name="WPM_FILTER" xml:space="preserve">
    <value>フィルター</value>
  </data>
  <data name="WPM_GROUP_PACK_NOT_BLANK" xml:space="preserve">
    <value>リベラルパッキンググループは空です</value>
  </data>
  <data name="WPM_LABEL" xml:space="preserve">
    <value>ラベル</value>
  </data>
  <data name="WPM_LABEL_DESCRIPTION" xml:space="preserve">
    <value>説明ラベル</value>
  </data>
  <data name="WPM_LEVEL" xml:space="preserve">
    <value>レベル</value>
  </data>
  <data name="WPM_MANIPULATION" xml:space="preserve">
    <value>操作</value>
  </data>
  <data name="WPM_MUNBER_LEVEL" xml:space="preserve">
    <value>グレード数（深さ）</value>
  </data>
  <data name="WPM_NAME_ATTR" xml:space="preserve">
    <value>属性名</value>
  </data>
  <data name="WPM_PACK" xml:space="preserve">
    <value>パック</value>
  </data>
  <data name="WPM_PACK_IN" xml:space="preserve">
    <value>詰め込む</value>
  </data>
  <data name="WPM_PACK_IN_NOT_BLANK" xml:space="preserve">
    <value>インナーパッキンは空白のままになりません</value>
  </data>
  <data name="WPM_PACK_PLACE" xml:space="preserve">
    <value>パッキングとリバース</value>
  </data>
  <data name="WPM_PATH" xml:space="preserve">
    <value>道</value>
  </data>
  <data name="WPM_PLACE_OBJ" xml:space="preserve">
    <value>オブジェクトを購読する</value>
  </data>
  <data name="WPM_PLACE_OF_ARRANGEMENT" xml:space="preserve">
    <value>配置場所（倉庫、床、違う）</value>
  </data>
  <data name="WPM_POSITION_STACKING" xml:space="preserve">
    <value>折りたたみ位置</value>
  </data>
  <data name="WPM_QUANTITY" xml:space="preserve">
    <value>額</value>
  </data>
  <data name="WPM_SAVE" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="WPM_SEARCH" xml:space="preserve">
    <value>検索</value>
  </data>
  <data name="WPM_SIZE" xml:space="preserve">
    <value>サイズ</value>
  </data>
  <data name="WPM_STATUS" xml:space="preserve">
    <value>スターテス</value>
  </data>
  <data name="WPM_STYPE_DATA" xml:space="preserve">
    <value>データ型</value>
  </data>
  <data name="WPM_STYPE_DATA_NOT_BLANK" xml:space="preserve">
    <value>データ型を空白にすることはできません</value>
  </data>
  <data name="WPM_STYPE_PACK" xml:space="preserve">
    <value>パッキングタイプ（ロール、バレル...）</value>
  </data>
  <data name="WPM_STYPE_PACK_BTN" xml:space="preserve">
    <value>パッキングタイプ</value>
  </data>
  <data name="WPM_STYPE_PACK_BTN_BLANK" xml:space="preserve">
    <value>パッキングタイプを空白にすることはできません</value>
  </data>
  <data name="WPM_STYPE_PACK_BTN_NOT_BLANK" xml:space="preserve">
    <value>プロファイル包装タイプを空白にすることはできません</value>
  </data>
  <data name="WPM_TITLE" xml:space="preserve">
    <value>タイトル</value>
  </data>
  <data name="WPM_UNIT" xml:space="preserve">
    <value>単位</value>
  </data>
  <data name="WPM_UNIT_NOT_BLANK" xml:space="preserve">
    <value>単位</value>
  </data>
  <data name="WPM_VALUE" xml:space="preserve">
    <value>価値</value>
  </data>
  <data name="WPM_ADD_DOWN" xml:space="preserve">
    <value>分けて</value>
  </data>
  <data name="WPM_CODE_NAME_ATTR" xml:space="preserve">
    <value>コードと属性の名前</value>
  </data>
  <data name="WPM_CODE_TITLE" xml:space="preserve">
    <value>コード＆タイトル</value>
  </data>
  <data name="WPM_DELETE" xml:space="preserve">
    <value>er</value>
  </data>
  <data name="WPM_ID" xml:space="preserve">
    <value>id</value>
  </data>
  <data name="WPM_IN_PACK" xml:space="preserve">
    <value>整える</value>
  </data>
  <data name="WPM_OPERATION" xml:space="preserve">
    <value>手術</value>
  </data>
  <data name="WPM_PACK_AND_PLACE" xml:space="preserve">
    <value>梱包と折りたたみ</value>
  </data>
  <data name="WPM_PACK_FATHER" xml:space="preserve">
    <value>親パッケージ</value>
  </data>
  <data name="WPM_PACK_WANT_PACK" xml:space="preserve">
    <value>必要なパッケージ</value>
  </data>
  <data name="WPM_PACK_WANT_PACK_BLANK" xml:space="preserve">
    <value>パッケージが閉じる必要があります</value>
  </data>
  <data name="WPM_PLACE" xml:space="preserve">
    <value>パック</value>
  </data>
  <data name="WPM_POSITION_PACK" xml:space="preserve">
    <value>位置</value>
  </data>
  <data name="WPM_STT" xml:space="preserve">
    <value>st</value>
  </data>
  <data name="WPM_VALUE_UNIT" xml:space="preserve">
    <value>値（単位）</value>
  </data>
  <data name="WPM_PACKAGE_UPDATE_SUCCESS" xml:space="preserve">
    <value>活性化</value>
  </data>
  <data name="WPM_NOT_ACTIVE" xml:space="preserve">
    <value>非活動中</value>
  </data>
  <data name="WPM_ACTIVE" xml:space="preserve">
    <value>正常にアレンジします</value>
  </data>
  <data name="WPM_RECORD_PACK_NOT_EXIST" xml:space="preserve">
    <value>すでに詰め込まれているファイル</value>
  </data>
  <data name="WPM_ENCAPSULATE_SUCCESS" xml:space="preserve">
    <value>ファイルを正常に追加します</value>
  </data>
  <data name="WPM_ADD_FILE_SUCCESS" xml:space="preserve">
    <value>正常にカプセル化します</value>
  </data>
  <data name="WPM_ARRANGE_SUCCESS" xml:space="preserve">
    <value>レコードパックは存在しません</value>
  </data>
  <data name="WPM_FILE_ALREADY_PACKED" xml:space="preserve">
    <value>パッケージが正常に更新されました</value>
  </data>
  <data name="WPM_FILE_NOT_EXIST" xml:space="preserve">
    <value>ファイルは存在しません</value>
  </data>
  <data name="WPM_FILE_ALREADY_PACK_ANOTHER" xml:space="preserve">
    <value>すでに別のパッケージに詰め込まれているファイル</value>
  </data>
  <data name="WPM_PACK_CODE_MATCH_PARENT" xml:space="preserve">
    <value>別の\ "パッキングで\"を選択してください</value>
  </data>
</root>